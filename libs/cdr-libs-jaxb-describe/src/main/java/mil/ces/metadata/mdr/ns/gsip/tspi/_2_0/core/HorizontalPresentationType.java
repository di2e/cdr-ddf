//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.11 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2016.07.27 at 04:06:37 PM EDT 
//


package mil.ces.metadata.mdr.ns.gsip.tspi._2_0.core;

import java.io.Serializable;
import java.util.ArrayList;
import java.util.List;
import javax.validation.Valid;
import javax.validation.constraints.NotNull;
import javax.validation.constraints.Size;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlAttribute;
import javax.xml.bind.annotation.XmlSchemaType;
import javax.xml.bind.annotation.XmlType;
import org.jvnet.jaxb2_commons.lang.CopyStrategy2;
import org.jvnet.jaxb2_commons.lang.CopyTo2;
import org.jvnet.jaxb2_commons.lang.Equals2;
import org.jvnet.jaxb2_commons.lang.EqualsStrategy2;
import org.jvnet.jaxb2_commons.lang.HashCode2;
import org.jvnet.jaxb2_commons.lang.HashCodeStrategy2;
import org.jvnet.jaxb2_commons.lang.JAXBCopyStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBEqualsStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBHashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBMergeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBToStringStrategy;
import org.jvnet.jaxb2_commons.lang.MergeFrom2;
import org.jvnet.jaxb2_commons.lang.MergeStrategy2;
import org.jvnet.jaxb2_commons.lang.ToString2;
import org.jvnet.jaxb2_commons.lang.ToStringStrategy2;
import org.jvnet.jaxb2_commons.locator.ObjectLocator;
import org.jvnet.jaxb2_commons.locator.util.LocatorUtils;


/**
 * Horizontal Presentation Type: A type consisting of one or more occurances of one of a set of alternative presentations of a point horizontal location that are generally intended for human-to-human communication rather than machine-to-machine communication.
 * 
 * <p>Java class for HorizontalPresentationType complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="HorizontalPresentationType"&gt;
 *   &lt;complexContent&gt;
 *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
 *       &lt;choice&gt;
 *         &lt;element name="sexagesimalLocation" type="{http://metadata.ces.mil/mdr/ns/GSIP/tspi/2.0/core}SexagesimalPresentationType" maxOccurs="unbounded"/&gt;
 *         &lt;element name="gridMetreLocation" type="{http://metadata.ces.mil/mdr/ns/GSIP/tspi/2.0/core}GridMetrePresentationType" maxOccurs="unbounded"/&gt;
 *         &lt;element name="zoneMetreLocation" type="{http://metadata.ces.mil/mdr/ns/GSIP/tspi/2.0/core}ZoneMetrePresentationType" maxOccurs="unbounded"/&gt;
 *         &lt;element name="quadrangleLocation" type="{http://metadata.ces.mil/mdr/ns/GSIP/tspi/2.0/core}QuadranglePresentationType" maxOccurs="unbounded"/&gt;
 *         &lt;element name="numericBitLocation" type="{http://metadata.ces.mil/mdr/ns/GSIP/tspi/2.0/core}NumericBitPresentationType" maxOccurs="unbounded"/&gt;
 *       &lt;/choice&gt;
 *       &lt;attribute name="srsName" use="required" type="{http://www.w3.org/2001/XMLSchema}anyURI" /&gt;
 *     &lt;/restriction&gt;
 *   &lt;/complexContent&gt;
 * &lt;/complexType&gt;
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "HorizontalPresentationType", propOrder = {
    "sexagesimalLocation",
    "gridMetreLocation",
    "zoneMetreLocation",
    "quadrangleLocation",
    "numericBitLocation"
})
public class HorizontalPresentationType implements Serializable, Cloneable, CopyTo2, Equals2, HashCode2, MergeFrom2, ToString2
{

    private final static long serialVersionUID = 1L;
    @Size(min = 1)
    @Valid
    protected List<SexagesimalPresentationType> sexagesimalLocation;
    @Size(min = 1)
    @Valid
    protected List<GridMetrePresentationType> gridMetreLocation;
    @Size(min = 1)
    @Valid
    protected List<ZoneMetrePresentationType> zoneMetreLocation;
    @Size(min = 1)
    @Valid
    protected List<QuadranglePresentationType> quadrangleLocation;
    @Size(min = 1)
    @Valid
    protected List<NumericBitPresentationType> numericBitLocation;
    @XmlAttribute(name = "srsName", required = true)
    @XmlSchemaType(name = "anyURI")
    @NotNull(message = "HorizontalPresentationType.srsName {javax.validation.constraints.NotNull.message}")
    protected String srsName;

    /**
     * Gets the value of the sexagesimalLocation property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the sexagesimalLocation property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getSexagesimalLocation().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link SexagesimalPresentationType }
     * 
     * 
     */
    public List<SexagesimalPresentationType> getSexagesimalLocation() {
        if (sexagesimalLocation == null) {
            sexagesimalLocation = new ArrayList<SexagesimalPresentationType>();
        }
        return this.sexagesimalLocation;
    }

    public boolean isSetSexagesimalLocation() {
        return ((this.sexagesimalLocation!= null)&&(!this.sexagesimalLocation.isEmpty()));
    }

    public void unsetSexagesimalLocation() {
        this.sexagesimalLocation = null;
    }

    /**
     * Gets the value of the gridMetreLocation property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the gridMetreLocation property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getGridMetreLocation().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link GridMetrePresentationType }
     * 
     * 
     */
    public List<GridMetrePresentationType> getGridMetreLocation() {
        if (gridMetreLocation == null) {
            gridMetreLocation = new ArrayList<GridMetrePresentationType>();
        }
        return this.gridMetreLocation;
    }

    public boolean isSetGridMetreLocation() {
        return ((this.gridMetreLocation!= null)&&(!this.gridMetreLocation.isEmpty()));
    }

    public void unsetGridMetreLocation() {
        this.gridMetreLocation = null;
    }

    /**
     * Gets the value of the zoneMetreLocation property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the zoneMetreLocation property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getZoneMetreLocation().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link ZoneMetrePresentationType }
     * 
     * 
     */
    public List<ZoneMetrePresentationType> getZoneMetreLocation() {
        if (zoneMetreLocation == null) {
            zoneMetreLocation = new ArrayList<ZoneMetrePresentationType>();
        }
        return this.zoneMetreLocation;
    }

    public boolean isSetZoneMetreLocation() {
        return ((this.zoneMetreLocation!= null)&&(!this.zoneMetreLocation.isEmpty()));
    }

    public void unsetZoneMetreLocation() {
        this.zoneMetreLocation = null;
    }

    /**
     * Gets the value of the quadrangleLocation property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the quadrangleLocation property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getQuadrangleLocation().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link QuadranglePresentationType }
     * 
     * 
     */
    public List<QuadranglePresentationType> getQuadrangleLocation() {
        if (quadrangleLocation == null) {
            quadrangleLocation = new ArrayList<QuadranglePresentationType>();
        }
        return this.quadrangleLocation;
    }

    public boolean isSetQuadrangleLocation() {
        return ((this.quadrangleLocation!= null)&&(!this.quadrangleLocation.isEmpty()));
    }

    public void unsetQuadrangleLocation() {
        this.quadrangleLocation = null;
    }

    /**
     * Gets the value of the numericBitLocation property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the numericBitLocation property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getNumericBitLocation().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link NumericBitPresentationType }
     * 
     * 
     */
    public List<NumericBitPresentationType> getNumericBitLocation() {
        if (numericBitLocation == null) {
            numericBitLocation = new ArrayList<NumericBitPresentationType>();
        }
        return this.numericBitLocation;
    }

    public boolean isSetNumericBitLocation() {
        return ((this.numericBitLocation!= null)&&(!this.numericBitLocation.isEmpty()));
    }

    public void unsetNumericBitLocation() {
        this.numericBitLocation = null;
    }

    /**
     * Gets the value of the srsName property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getSrsName() {
        return srsName;
    }

    /**
     * Sets the value of the srsName property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setSrsName(String value) {
        this.srsName = value;
    }

    public boolean isSetSrsName() {
        return (this.srsName!= null);
    }

    public String toString() {
        final ToStringStrategy2 strategy = JAXBToStringStrategy.INSTANCE;
        final StringBuilder buffer = new StringBuilder();
        append(null, buffer, strategy);
        return buffer.toString();
    }

    public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy2 strategy) {
        strategy.appendStart(locator, this, buffer);
        appendFields(locator, buffer, strategy);
        strategy.appendEnd(locator, this, buffer);
        return buffer;
    }

    public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy2 strategy) {
        {
            List<SexagesimalPresentationType> theSexagesimalLocation;
            theSexagesimalLocation = (this.isSetSexagesimalLocation()?this.getSexagesimalLocation():null);
            strategy.appendField(locator, this, "sexagesimalLocation", buffer, theSexagesimalLocation, this.isSetSexagesimalLocation());
        }
        {
            List<GridMetrePresentationType> theGridMetreLocation;
            theGridMetreLocation = (this.isSetGridMetreLocation()?this.getGridMetreLocation():null);
            strategy.appendField(locator, this, "gridMetreLocation", buffer, theGridMetreLocation, this.isSetGridMetreLocation());
        }
        {
            List<ZoneMetrePresentationType> theZoneMetreLocation;
            theZoneMetreLocation = (this.isSetZoneMetreLocation()?this.getZoneMetreLocation():null);
            strategy.appendField(locator, this, "zoneMetreLocation", buffer, theZoneMetreLocation, this.isSetZoneMetreLocation());
        }
        {
            List<QuadranglePresentationType> theQuadrangleLocation;
            theQuadrangleLocation = (this.isSetQuadrangleLocation()?this.getQuadrangleLocation():null);
            strategy.appendField(locator, this, "quadrangleLocation", buffer, theQuadrangleLocation, this.isSetQuadrangleLocation());
        }
        {
            List<NumericBitPresentationType> theNumericBitLocation;
            theNumericBitLocation = (this.isSetNumericBitLocation()?this.getNumericBitLocation():null);
            strategy.appendField(locator, this, "numericBitLocation", buffer, theNumericBitLocation, this.isSetNumericBitLocation());
        }
        {
            String theSrsName;
            theSrsName = this.getSrsName();
            strategy.appendField(locator, this, "srsName", buffer, theSrsName, this.isSetSrsName());
        }
        return buffer;
    }

    public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy2 strategy) {
        if ((object == null)||(this.getClass()!= object.getClass())) {
            return false;
        }
        if (this == object) {
            return true;
        }
        final HorizontalPresentationType that = ((HorizontalPresentationType) object);
        {
            List<SexagesimalPresentationType> lhsSexagesimalLocation;
            lhsSexagesimalLocation = (this.isSetSexagesimalLocation()?this.getSexagesimalLocation():null);
            List<SexagesimalPresentationType> rhsSexagesimalLocation;
            rhsSexagesimalLocation = (that.isSetSexagesimalLocation()?that.getSexagesimalLocation():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "sexagesimalLocation", lhsSexagesimalLocation), LocatorUtils.property(thatLocator, "sexagesimalLocation", rhsSexagesimalLocation), lhsSexagesimalLocation, rhsSexagesimalLocation, this.isSetSexagesimalLocation(), that.isSetSexagesimalLocation())) {
                return false;
            }
        }
        {
            List<GridMetrePresentationType> lhsGridMetreLocation;
            lhsGridMetreLocation = (this.isSetGridMetreLocation()?this.getGridMetreLocation():null);
            List<GridMetrePresentationType> rhsGridMetreLocation;
            rhsGridMetreLocation = (that.isSetGridMetreLocation()?that.getGridMetreLocation():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "gridMetreLocation", lhsGridMetreLocation), LocatorUtils.property(thatLocator, "gridMetreLocation", rhsGridMetreLocation), lhsGridMetreLocation, rhsGridMetreLocation, this.isSetGridMetreLocation(), that.isSetGridMetreLocation())) {
                return false;
            }
        }
        {
            List<ZoneMetrePresentationType> lhsZoneMetreLocation;
            lhsZoneMetreLocation = (this.isSetZoneMetreLocation()?this.getZoneMetreLocation():null);
            List<ZoneMetrePresentationType> rhsZoneMetreLocation;
            rhsZoneMetreLocation = (that.isSetZoneMetreLocation()?that.getZoneMetreLocation():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "zoneMetreLocation", lhsZoneMetreLocation), LocatorUtils.property(thatLocator, "zoneMetreLocation", rhsZoneMetreLocation), lhsZoneMetreLocation, rhsZoneMetreLocation, this.isSetZoneMetreLocation(), that.isSetZoneMetreLocation())) {
                return false;
            }
        }
        {
            List<QuadranglePresentationType> lhsQuadrangleLocation;
            lhsQuadrangleLocation = (this.isSetQuadrangleLocation()?this.getQuadrangleLocation():null);
            List<QuadranglePresentationType> rhsQuadrangleLocation;
            rhsQuadrangleLocation = (that.isSetQuadrangleLocation()?that.getQuadrangleLocation():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "quadrangleLocation", lhsQuadrangleLocation), LocatorUtils.property(thatLocator, "quadrangleLocation", rhsQuadrangleLocation), lhsQuadrangleLocation, rhsQuadrangleLocation, this.isSetQuadrangleLocation(), that.isSetQuadrangleLocation())) {
                return false;
            }
        }
        {
            List<NumericBitPresentationType> lhsNumericBitLocation;
            lhsNumericBitLocation = (this.isSetNumericBitLocation()?this.getNumericBitLocation():null);
            List<NumericBitPresentationType> rhsNumericBitLocation;
            rhsNumericBitLocation = (that.isSetNumericBitLocation()?that.getNumericBitLocation():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "numericBitLocation", lhsNumericBitLocation), LocatorUtils.property(thatLocator, "numericBitLocation", rhsNumericBitLocation), lhsNumericBitLocation, rhsNumericBitLocation, this.isSetNumericBitLocation(), that.isSetNumericBitLocation())) {
                return false;
            }
        }
        {
            String lhsSrsName;
            lhsSrsName = this.getSrsName();
            String rhsSrsName;
            rhsSrsName = that.getSrsName();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "srsName", lhsSrsName), LocatorUtils.property(thatLocator, "srsName", rhsSrsName), lhsSrsName, rhsSrsName, this.isSetSrsName(), that.isSetSrsName())) {
                return false;
            }
        }
        return true;
    }

    public boolean equals(Object object) {
        final EqualsStrategy2 strategy = JAXBEqualsStrategy.INSTANCE;
        return equals(null, null, object, strategy);
    }

    public int hashCode(ObjectLocator locator, HashCodeStrategy2 strategy) {
        int currentHashCode = 1;
        {
            List<SexagesimalPresentationType> theSexagesimalLocation;
            theSexagesimalLocation = (this.isSetSexagesimalLocation()?this.getSexagesimalLocation():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "sexagesimalLocation", theSexagesimalLocation), currentHashCode, theSexagesimalLocation, this.isSetSexagesimalLocation());
        }
        {
            List<GridMetrePresentationType> theGridMetreLocation;
            theGridMetreLocation = (this.isSetGridMetreLocation()?this.getGridMetreLocation():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "gridMetreLocation", theGridMetreLocation), currentHashCode, theGridMetreLocation, this.isSetGridMetreLocation());
        }
        {
            List<ZoneMetrePresentationType> theZoneMetreLocation;
            theZoneMetreLocation = (this.isSetZoneMetreLocation()?this.getZoneMetreLocation():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "zoneMetreLocation", theZoneMetreLocation), currentHashCode, theZoneMetreLocation, this.isSetZoneMetreLocation());
        }
        {
            List<QuadranglePresentationType> theQuadrangleLocation;
            theQuadrangleLocation = (this.isSetQuadrangleLocation()?this.getQuadrangleLocation():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "quadrangleLocation", theQuadrangleLocation), currentHashCode, theQuadrangleLocation, this.isSetQuadrangleLocation());
        }
        {
            List<NumericBitPresentationType> theNumericBitLocation;
            theNumericBitLocation = (this.isSetNumericBitLocation()?this.getNumericBitLocation():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "numericBitLocation", theNumericBitLocation), currentHashCode, theNumericBitLocation, this.isSetNumericBitLocation());
        }
        {
            String theSrsName;
            theSrsName = this.getSrsName();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "srsName", theSrsName), currentHashCode, theSrsName, this.isSetSrsName());
        }
        return currentHashCode;
    }

    public int hashCode() {
        final HashCodeStrategy2 strategy = JAXBHashCodeStrategy.INSTANCE;
        return this.hashCode(null, strategy);
    }

    public Object clone() {
        return copyTo(createNewInstance());
    }

    public Object copyTo(Object target) {
        final CopyStrategy2 strategy = JAXBCopyStrategy.INSTANCE;
        return copyTo(null, target, strategy);
    }

    public Object copyTo(ObjectLocator locator, Object target, CopyStrategy2 strategy) {
        final Object draftCopy = ((target == null)?createNewInstance():target);
        if (draftCopy instanceof HorizontalPresentationType) {
            final HorizontalPresentationType copy = ((HorizontalPresentationType) draftCopy);
            {
                Boolean sexagesimalLocationShouldBeCopiedAndSet = strategy.shouldBeCopiedAndSet(locator, this.isSetSexagesimalLocation());
                if (sexagesimalLocationShouldBeCopiedAndSet == Boolean.TRUE) {
                    List<SexagesimalPresentationType> sourceSexagesimalLocation;
                    sourceSexagesimalLocation = (this.isSetSexagesimalLocation()?this.getSexagesimalLocation():null);
                    @SuppressWarnings("unchecked")
                    List<SexagesimalPresentationType> copySexagesimalLocation = ((List<SexagesimalPresentationType> ) strategy.copy(LocatorUtils.property(locator, "sexagesimalLocation", sourceSexagesimalLocation), sourceSexagesimalLocation, this.isSetSexagesimalLocation()));
                    copy.unsetSexagesimalLocation();
                    if (copySexagesimalLocation!= null) {
                        List<SexagesimalPresentationType> uniqueSexagesimalLocationl = copy.getSexagesimalLocation();
                        uniqueSexagesimalLocationl.addAll(copySexagesimalLocation);
                    }
                } else {
                    if (sexagesimalLocationShouldBeCopiedAndSet == Boolean.FALSE) {
                        copy.unsetSexagesimalLocation();
                    }
                }
            }
            {
                Boolean gridMetreLocationShouldBeCopiedAndSet = strategy.shouldBeCopiedAndSet(locator, this.isSetGridMetreLocation());
                if (gridMetreLocationShouldBeCopiedAndSet == Boolean.TRUE) {
                    List<GridMetrePresentationType> sourceGridMetreLocation;
                    sourceGridMetreLocation = (this.isSetGridMetreLocation()?this.getGridMetreLocation():null);
                    @SuppressWarnings("unchecked")
                    List<GridMetrePresentationType> copyGridMetreLocation = ((List<GridMetrePresentationType> ) strategy.copy(LocatorUtils.property(locator, "gridMetreLocation", sourceGridMetreLocation), sourceGridMetreLocation, this.isSetGridMetreLocation()));
                    copy.unsetGridMetreLocation();
                    if (copyGridMetreLocation!= null) {
                        List<GridMetrePresentationType> uniqueGridMetreLocationl = copy.getGridMetreLocation();
                        uniqueGridMetreLocationl.addAll(copyGridMetreLocation);
                    }
                } else {
                    if (gridMetreLocationShouldBeCopiedAndSet == Boolean.FALSE) {
                        copy.unsetGridMetreLocation();
                    }
                }
            }
            {
                Boolean zoneMetreLocationShouldBeCopiedAndSet = strategy.shouldBeCopiedAndSet(locator, this.isSetZoneMetreLocation());
                if (zoneMetreLocationShouldBeCopiedAndSet == Boolean.TRUE) {
                    List<ZoneMetrePresentationType> sourceZoneMetreLocation;
                    sourceZoneMetreLocation = (this.isSetZoneMetreLocation()?this.getZoneMetreLocation():null);
                    @SuppressWarnings("unchecked")
                    List<ZoneMetrePresentationType> copyZoneMetreLocation = ((List<ZoneMetrePresentationType> ) strategy.copy(LocatorUtils.property(locator, "zoneMetreLocation", sourceZoneMetreLocation), sourceZoneMetreLocation, this.isSetZoneMetreLocation()));
                    copy.unsetZoneMetreLocation();
                    if (copyZoneMetreLocation!= null) {
                        List<ZoneMetrePresentationType> uniqueZoneMetreLocationl = copy.getZoneMetreLocation();
                        uniqueZoneMetreLocationl.addAll(copyZoneMetreLocation);
                    }
                } else {
                    if (zoneMetreLocationShouldBeCopiedAndSet == Boolean.FALSE) {
                        copy.unsetZoneMetreLocation();
                    }
                }
            }
            {
                Boolean quadrangleLocationShouldBeCopiedAndSet = strategy.shouldBeCopiedAndSet(locator, this.isSetQuadrangleLocation());
                if (quadrangleLocationShouldBeCopiedAndSet == Boolean.TRUE) {
                    List<QuadranglePresentationType> sourceQuadrangleLocation;
                    sourceQuadrangleLocation = (this.isSetQuadrangleLocation()?this.getQuadrangleLocation():null);
                    @SuppressWarnings("unchecked")
                    List<QuadranglePresentationType> copyQuadrangleLocation = ((List<QuadranglePresentationType> ) strategy.copy(LocatorUtils.property(locator, "quadrangleLocation", sourceQuadrangleLocation), sourceQuadrangleLocation, this.isSetQuadrangleLocation()));
                    copy.unsetQuadrangleLocation();
                    if (copyQuadrangleLocation!= null) {
                        List<QuadranglePresentationType> uniqueQuadrangleLocationl = copy.getQuadrangleLocation();
                        uniqueQuadrangleLocationl.addAll(copyQuadrangleLocation);
                    }
                } else {
                    if (quadrangleLocationShouldBeCopiedAndSet == Boolean.FALSE) {
                        copy.unsetQuadrangleLocation();
                    }
                }
            }
            {
                Boolean numericBitLocationShouldBeCopiedAndSet = strategy.shouldBeCopiedAndSet(locator, this.isSetNumericBitLocation());
                if (numericBitLocationShouldBeCopiedAndSet == Boolean.TRUE) {
                    List<NumericBitPresentationType> sourceNumericBitLocation;
                    sourceNumericBitLocation = (this.isSetNumericBitLocation()?this.getNumericBitLocation():null);
                    @SuppressWarnings("unchecked")
                    List<NumericBitPresentationType> copyNumericBitLocation = ((List<NumericBitPresentationType> ) strategy.copy(LocatorUtils.property(locator, "numericBitLocation", sourceNumericBitLocation), sourceNumericBitLocation, this.isSetNumericBitLocation()));
                    copy.unsetNumericBitLocation();
                    if (copyNumericBitLocation!= null) {
                        List<NumericBitPresentationType> uniqueNumericBitLocationl = copy.getNumericBitLocation();
                        uniqueNumericBitLocationl.addAll(copyNumericBitLocation);
                    }
                } else {
                    if (numericBitLocationShouldBeCopiedAndSet == Boolean.FALSE) {
                        copy.unsetNumericBitLocation();
                    }
                }
            }
            {
                Boolean srsNameShouldBeCopiedAndSet = strategy.shouldBeCopiedAndSet(locator, this.isSetSrsName());
                if (srsNameShouldBeCopiedAndSet == Boolean.TRUE) {
                    String sourceSrsName;
                    sourceSrsName = this.getSrsName();
                    String copySrsName = ((String) strategy.copy(LocatorUtils.property(locator, "srsName", sourceSrsName), sourceSrsName, this.isSetSrsName()));
                    copy.setSrsName(copySrsName);
                } else {
                    if (srsNameShouldBeCopiedAndSet == Boolean.FALSE) {
                        copy.srsName = null;
                    }
                }
            }
        }
        return draftCopy;
    }

    public Object createNewInstance() {
        return new HorizontalPresentationType();
    }

    public void mergeFrom(Object left, Object right) {
        final MergeStrategy2 strategy = JAXBMergeStrategy.INSTANCE;
        mergeFrom(null, null, left, right, strategy);
    }

    public void mergeFrom(ObjectLocator leftLocator, ObjectLocator rightLocator, Object left, Object right, MergeStrategy2 strategy) {
        if (right instanceof HorizontalPresentationType) {
            final HorizontalPresentationType target = this;
            final HorizontalPresentationType leftObject = ((HorizontalPresentationType) left);
            final HorizontalPresentationType rightObject = ((HorizontalPresentationType) right);
            {
                Boolean sexagesimalLocationShouldBeMergedAndSet = strategy.shouldBeMergedAndSet(leftLocator, rightLocator, leftObject.isSetSexagesimalLocation(), rightObject.isSetSexagesimalLocation());
                if (sexagesimalLocationShouldBeMergedAndSet == Boolean.TRUE) {
                    List<SexagesimalPresentationType> lhsSexagesimalLocation;
                    lhsSexagesimalLocation = (leftObject.isSetSexagesimalLocation()?leftObject.getSexagesimalLocation():null);
                    List<SexagesimalPresentationType> rhsSexagesimalLocation;
                    rhsSexagesimalLocation = (rightObject.isSetSexagesimalLocation()?rightObject.getSexagesimalLocation():null);
                    List<SexagesimalPresentationType> mergedSexagesimalLocation = ((List<SexagesimalPresentationType> ) strategy.merge(LocatorUtils.property(leftLocator, "sexagesimalLocation", lhsSexagesimalLocation), LocatorUtils.property(rightLocator, "sexagesimalLocation", rhsSexagesimalLocation), lhsSexagesimalLocation, rhsSexagesimalLocation, leftObject.isSetSexagesimalLocation(), rightObject.isSetSexagesimalLocation()));
                    target.unsetSexagesimalLocation();
                    if (mergedSexagesimalLocation!= null) {
                        List<SexagesimalPresentationType> uniqueSexagesimalLocationl = target.getSexagesimalLocation();
                        uniqueSexagesimalLocationl.addAll(mergedSexagesimalLocation);
                    }
                } else {
                    if (sexagesimalLocationShouldBeMergedAndSet == Boolean.FALSE) {
                        target.unsetSexagesimalLocation();
                    }
                }
            }
            {
                Boolean gridMetreLocationShouldBeMergedAndSet = strategy.shouldBeMergedAndSet(leftLocator, rightLocator, leftObject.isSetGridMetreLocation(), rightObject.isSetGridMetreLocation());
                if (gridMetreLocationShouldBeMergedAndSet == Boolean.TRUE) {
                    List<GridMetrePresentationType> lhsGridMetreLocation;
                    lhsGridMetreLocation = (leftObject.isSetGridMetreLocation()?leftObject.getGridMetreLocation():null);
                    List<GridMetrePresentationType> rhsGridMetreLocation;
                    rhsGridMetreLocation = (rightObject.isSetGridMetreLocation()?rightObject.getGridMetreLocation():null);
                    List<GridMetrePresentationType> mergedGridMetreLocation = ((List<GridMetrePresentationType> ) strategy.merge(LocatorUtils.property(leftLocator, "gridMetreLocation", lhsGridMetreLocation), LocatorUtils.property(rightLocator, "gridMetreLocation", rhsGridMetreLocation), lhsGridMetreLocation, rhsGridMetreLocation, leftObject.isSetGridMetreLocation(), rightObject.isSetGridMetreLocation()));
                    target.unsetGridMetreLocation();
                    if (mergedGridMetreLocation!= null) {
                        List<GridMetrePresentationType> uniqueGridMetreLocationl = target.getGridMetreLocation();
                        uniqueGridMetreLocationl.addAll(mergedGridMetreLocation);
                    }
                } else {
                    if (gridMetreLocationShouldBeMergedAndSet == Boolean.FALSE) {
                        target.unsetGridMetreLocation();
                    }
                }
            }
            {
                Boolean zoneMetreLocationShouldBeMergedAndSet = strategy.shouldBeMergedAndSet(leftLocator, rightLocator, leftObject.isSetZoneMetreLocation(), rightObject.isSetZoneMetreLocation());
                if (zoneMetreLocationShouldBeMergedAndSet == Boolean.TRUE) {
                    List<ZoneMetrePresentationType> lhsZoneMetreLocation;
                    lhsZoneMetreLocation = (leftObject.isSetZoneMetreLocation()?leftObject.getZoneMetreLocation():null);
                    List<ZoneMetrePresentationType> rhsZoneMetreLocation;
                    rhsZoneMetreLocation = (rightObject.isSetZoneMetreLocation()?rightObject.getZoneMetreLocation():null);
                    List<ZoneMetrePresentationType> mergedZoneMetreLocation = ((List<ZoneMetrePresentationType> ) strategy.merge(LocatorUtils.property(leftLocator, "zoneMetreLocation", lhsZoneMetreLocation), LocatorUtils.property(rightLocator, "zoneMetreLocation", rhsZoneMetreLocation), lhsZoneMetreLocation, rhsZoneMetreLocation, leftObject.isSetZoneMetreLocation(), rightObject.isSetZoneMetreLocation()));
                    target.unsetZoneMetreLocation();
                    if (mergedZoneMetreLocation!= null) {
                        List<ZoneMetrePresentationType> uniqueZoneMetreLocationl = target.getZoneMetreLocation();
                        uniqueZoneMetreLocationl.addAll(mergedZoneMetreLocation);
                    }
                } else {
                    if (zoneMetreLocationShouldBeMergedAndSet == Boolean.FALSE) {
                        target.unsetZoneMetreLocation();
                    }
                }
            }
            {
                Boolean quadrangleLocationShouldBeMergedAndSet = strategy.shouldBeMergedAndSet(leftLocator, rightLocator, leftObject.isSetQuadrangleLocation(), rightObject.isSetQuadrangleLocation());
                if (quadrangleLocationShouldBeMergedAndSet == Boolean.TRUE) {
                    List<QuadranglePresentationType> lhsQuadrangleLocation;
                    lhsQuadrangleLocation = (leftObject.isSetQuadrangleLocation()?leftObject.getQuadrangleLocation():null);
                    List<QuadranglePresentationType> rhsQuadrangleLocation;
                    rhsQuadrangleLocation = (rightObject.isSetQuadrangleLocation()?rightObject.getQuadrangleLocation():null);
                    List<QuadranglePresentationType> mergedQuadrangleLocation = ((List<QuadranglePresentationType> ) strategy.merge(LocatorUtils.property(leftLocator, "quadrangleLocation", lhsQuadrangleLocation), LocatorUtils.property(rightLocator, "quadrangleLocation", rhsQuadrangleLocation), lhsQuadrangleLocation, rhsQuadrangleLocation, leftObject.isSetQuadrangleLocation(), rightObject.isSetQuadrangleLocation()));
                    target.unsetQuadrangleLocation();
                    if (mergedQuadrangleLocation!= null) {
                        List<QuadranglePresentationType> uniqueQuadrangleLocationl = target.getQuadrangleLocation();
                        uniqueQuadrangleLocationl.addAll(mergedQuadrangleLocation);
                    }
                } else {
                    if (quadrangleLocationShouldBeMergedAndSet == Boolean.FALSE) {
                        target.unsetQuadrangleLocation();
                    }
                }
            }
            {
                Boolean numericBitLocationShouldBeMergedAndSet = strategy.shouldBeMergedAndSet(leftLocator, rightLocator, leftObject.isSetNumericBitLocation(), rightObject.isSetNumericBitLocation());
                if (numericBitLocationShouldBeMergedAndSet == Boolean.TRUE) {
                    List<NumericBitPresentationType> lhsNumericBitLocation;
                    lhsNumericBitLocation = (leftObject.isSetNumericBitLocation()?leftObject.getNumericBitLocation():null);
                    List<NumericBitPresentationType> rhsNumericBitLocation;
                    rhsNumericBitLocation = (rightObject.isSetNumericBitLocation()?rightObject.getNumericBitLocation():null);
                    List<NumericBitPresentationType> mergedNumericBitLocation = ((List<NumericBitPresentationType> ) strategy.merge(LocatorUtils.property(leftLocator, "numericBitLocation", lhsNumericBitLocation), LocatorUtils.property(rightLocator, "numericBitLocation", rhsNumericBitLocation), lhsNumericBitLocation, rhsNumericBitLocation, leftObject.isSetNumericBitLocation(), rightObject.isSetNumericBitLocation()));
                    target.unsetNumericBitLocation();
                    if (mergedNumericBitLocation!= null) {
                        List<NumericBitPresentationType> uniqueNumericBitLocationl = target.getNumericBitLocation();
                        uniqueNumericBitLocationl.addAll(mergedNumericBitLocation);
                    }
                } else {
                    if (numericBitLocationShouldBeMergedAndSet == Boolean.FALSE) {
                        target.unsetNumericBitLocation();
                    }
                }
            }
            {
                Boolean srsNameShouldBeMergedAndSet = strategy.shouldBeMergedAndSet(leftLocator, rightLocator, leftObject.isSetSrsName(), rightObject.isSetSrsName());
                if (srsNameShouldBeMergedAndSet == Boolean.TRUE) {
                    String lhsSrsName;
                    lhsSrsName = leftObject.getSrsName();
                    String rhsSrsName;
                    rhsSrsName = rightObject.getSrsName();
                    String mergedSrsName = ((String) strategy.merge(LocatorUtils.property(leftLocator, "srsName", lhsSrsName), LocatorUtils.property(rightLocator, "srsName", rhsSrsName), lhsSrsName, rhsSrsName, leftObject.isSetSrsName(), rightObject.isSetSrsName()));
                    target.setSrsName(mergedSrsName);
                } else {
                    if (srsNameShouldBeMergedAndSet == Boolean.FALSE) {
                        target.srsName = null;
                    }
                }
            }
        }
    }

    public void setSexagesimalLocation(List<SexagesimalPresentationType> value) {
        this.sexagesimalLocation = null;
        if (value!= null) {
            List<SexagesimalPresentationType> draftl = this.getSexagesimalLocation();
            draftl.addAll(value);
        }
    }

    public void setGridMetreLocation(List<GridMetrePresentationType> value) {
        this.gridMetreLocation = null;
        if (value!= null) {
            List<GridMetrePresentationType> draftl = this.getGridMetreLocation();
            draftl.addAll(value);
        }
    }

    public void setZoneMetreLocation(List<ZoneMetrePresentationType> value) {
        this.zoneMetreLocation = null;
        if (value!= null) {
            List<ZoneMetrePresentationType> draftl = this.getZoneMetreLocation();
            draftl.addAll(value);
        }
    }

    public void setQuadrangleLocation(List<QuadranglePresentationType> value) {
        this.quadrangleLocation = null;
        if (value!= null) {
            List<QuadranglePresentationType> draftl = this.getQuadrangleLocation();
            draftl.addAll(value);
        }
    }

    public void setNumericBitLocation(List<NumericBitPresentationType> value) {
        this.numericBitLocation = null;
        if (value!= null) {
            List<NumericBitPresentationType> draftl = this.getNumericBitLocation();
            draftl.addAll(value);
        }
    }

}
