//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.11 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2016.07.27 at 04:06:37 PM EDT 
//


package mil.ces.metadata.mdr.ns.gsip.tspi._2_0.core;

import java.io.Serializable;
import javax.validation.Valid;
import javax.validation.constraints.DecimalMax;
import javax.validation.constraints.DecimalMin;
import javax.validation.constraints.NotNull;
import javax.validation.constraints.Pattern;
import javax.validation.constraints.Size;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlSchemaType;
import javax.xml.bind.annotation.XmlType;
import org.jvnet.jaxb2_commons.lang.CopyStrategy2;
import org.jvnet.jaxb2_commons.lang.CopyTo2;
import org.jvnet.jaxb2_commons.lang.Equals2;
import org.jvnet.jaxb2_commons.lang.EqualsStrategy2;
import org.jvnet.jaxb2_commons.lang.HashCode2;
import org.jvnet.jaxb2_commons.lang.HashCodeStrategy2;
import org.jvnet.jaxb2_commons.lang.JAXBCopyStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBEqualsStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBHashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBMergeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBToStringStrategy;
import org.jvnet.jaxb2_commons.lang.MergeFrom2;
import org.jvnet.jaxb2_commons.lang.MergeStrategy2;
import org.jvnet.jaxb2_commons.lang.ToString2;
import org.jvnet.jaxb2_commons.lang.ToStringStrategy2;
import org.jvnet.jaxb2_commons.locator.ObjectLocator;
import org.jvnet.jaxb2_commons.locator.util.LocatorUtils;


/**
 * Grid-Metre Presentation Type: A datatype representing a grid-metre position presentation based on the requirements of the Military Grid Reference System (MGRS) position reporting system. [desc] Grid squares are used as a means of identifying 100,000-metre x 100,000-metre spatial regions on the Earth within which a position is specified as an easting-northing positive-offset value-pair, in metres, from the southwest corner. The presentation consists of a single component string integrating all coordinate tuple values.
 * 
 * <p>Java class for GridMetrePresentationType complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="GridMetrePresentationType"&gt;
 *   &lt;complexContent&gt;
 *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
 *       &lt;sequence&gt;
 *         &lt;element name="zoneColumn" type="{http://metadata.ces.mil/mdr/ns/GSIP/tspi/2.0/core}GridZoneColumnType" minOccurs="0"/&gt;
 *         &lt;element name="zoneRow" type="{http://metadata.ces.mil/mdr/ns/GSIP/tspi/2.0/core}GridZoneRowType"/&gt;
 *         &lt;element name="squareColumn" type="{http://metadata.ces.mil/mdr/ns/GSIP/tspi/2.0/core}GridSquareColumnType"/&gt;
 *         &lt;element name="squareRow" type="{http://metadata.ces.mil/mdr/ns/GSIP/tspi/2.0/core}GridSquareRowType"/&gt;
 *         &lt;element name="relativeLocation" minOccurs="0"&gt;
 *           &lt;complexType&gt;
 *             &lt;complexContent&gt;
 *               &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
 *                 &lt;choice&gt;
 *                   &lt;element name="decakilometre"&gt;
 *                     &lt;complexType&gt;
 *                       &lt;complexContent&gt;
 *                         &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
 *                           &lt;sequence&gt;
 *                             &lt;element name="easting" type="{http://metadata.ces.mil/mdr/ns/GSIP/tspi/2.0/core}DecaType"/&gt;
 *                             &lt;element name="northing" type="{http://metadata.ces.mil/mdr/ns/GSIP/tspi/2.0/core}DecaType"/&gt;
 *                           &lt;/sequence&gt;
 *                         &lt;/restriction&gt;
 *                       &lt;/complexContent&gt;
 *                     &lt;/complexType&gt;
 *                   &lt;/element&gt;
 *                   &lt;element name="kilometre"&gt;
 *                     &lt;complexType&gt;
 *                       &lt;complexContent&gt;
 *                         &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
 *                           &lt;sequence&gt;
 *                             &lt;element name="easting" type="{http://metadata.ces.mil/mdr/ns/GSIP/tspi/2.0/core}HectoType"/&gt;
 *                             &lt;element name="northing" type="{http://metadata.ces.mil/mdr/ns/GSIP/tspi/2.0/core}HectoType"/&gt;
 *                           &lt;/sequence&gt;
 *                         &lt;/restriction&gt;
 *                       &lt;/complexContent&gt;
 *                     &lt;/complexType&gt;
 *                   &lt;/element&gt;
 *                   &lt;element name="hectometre"&gt;
 *                     &lt;complexType&gt;
 *                       &lt;complexContent&gt;
 *                         &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
 *                           &lt;sequence&gt;
 *                             &lt;element name="easting" type="{http://metadata.ces.mil/mdr/ns/GSIP/tspi/2.0/core}KiloType"/&gt;
 *                             &lt;element name="northing" type="{http://metadata.ces.mil/mdr/ns/GSIP/tspi/2.0/core}KiloType"/&gt;
 *                           &lt;/sequence&gt;
 *                         &lt;/restriction&gt;
 *                       &lt;/complexContent&gt;
 *                     &lt;/complexType&gt;
 *                   &lt;/element&gt;
 *                   &lt;element name="decametre"&gt;
 *                     &lt;complexType&gt;
 *                       &lt;complexContent&gt;
 *                         &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
 *                           &lt;sequence&gt;
 *                             &lt;element name="easting" type="{http://metadata.ces.mil/mdr/ns/GSIP/tspi/2.0/core}DecakiloType"/&gt;
 *                             &lt;element name="northing" type="{http://metadata.ces.mil/mdr/ns/GSIP/tspi/2.0/core}DecakiloType"/&gt;
 *                           &lt;/sequence&gt;
 *                         &lt;/restriction&gt;
 *                       &lt;/complexContent&gt;
 *                     &lt;/complexType&gt;
 *                   &lt;/element&gt;
 *                   &lt;element name="metre"&gt;
 *                     &lt;complexType&gt;
 *                       &lt;complexContent&gt;
 *                         &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
 *                           &lt;sequence&gt;
 *                             &lt;element name="easting" type="{http://metadata.ces.mil/mdr/ns/GSIP/tspi/2.0/core}HectokiloType"/&gt;
 *                             &lt;element name="northing" type="{http://metadata.ces.mil/mdr/ns/GSIP/tspi/2.0/core}HectokiloType"/&gt;
 *                           &lt;/sequence&gt;
 *                         &lt;/restriction&gt;
 *                       &lt;/complexContent&gt;
 *                     &lt;/complexType&gt;
 *                   &lt;/element&gt;
 *                 &lt;/choice&gt;
 *               &lt;/restriction&gt;
 *             &lt;/complexContent&gt;
 *           &lt;/complexType&gt;
 *         &lt;/element&gt;
 *       &lt;/sequence&gt;
 *     &lt;/restriction&gt;
 *   &lt;/complexContent&gt;
 * &lt;/complexType&gt;
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "GridMetrePresentationType", propOrder = {
    "zoneColumn",
    "zoneRow",
    "squareColumn",
    "squareRow",
    "relativeLocation"
})
public class GridMetrePresentationType implements Serializable, Cloneable, CopyTo2, Equals2, HashCode2, MergeFrom2, ToString2
{

    private final static long serialVersionUID = 1L;
    @XmlSchemaType(name = "integer")
    @DecimalMax("60")
    @DecimalMin("01")
    protected Integer zoneColumn;
    @XmlElement(required = true)
    @NotNull(message = "GridMetrePresentationType.zoneRow {javax.validation.constraints.NotNull.message}")
    @Size(min = 1, max = 1)
    @Pattern(regexp = "[C-HJ-NP-X]{1,1}")
    protected String zoneRow;
    @XmlElement(required = true)
    @NotNull(message = "GridMetrePresentationType.squareColumn {javax.validation.constraints.NotNull.message}")
    @Size(min = 1, max = 1)
    @Pattern(regexp = "[A-HJ-NP-Z]{1,1}")
    protected String squareColumn;
    @XmlElement(required = true)
    @NotNull(message = "GridMetrePresentationType.squareRow {javax.validation.constraints.NotNull.message}")
    @Size(min = 1, max = 1)
    @Pattern(regexp = "[A-HJ-NP-V]{1,1}")
    protected String squareRow;
    @Valid
    protected GridMetrePresentationType.RelativeLocation relativeLocation;

    /**
     * Gets the value of the zoneColumn property.
     * 
     * @return
     *     possible object is
     *     {@link Integer }
     *     
     */
    public Integer getZoneColumn() {
        return zoneColumn;
    }

    /**
     * Sets the value of the zoneColumn property.
     * 
     * @param value
     *     allowed object is
     *     {@link Integer }
     *     
     */
    public void setZoneColumn(Integer value) {
        this.zoneColumn = value;
    }

    public boolean isSetZoneColumn() {
        return (this.zoneColumn!= null);
    }

    /**
     * Gets the value of the zoneRow property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getZoneRow() {
        return zoneRow;
    }

    /**
     * Sets the value of the zoneRow property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setZoneRow(String value) {
        this.zoneRow = value;
    }

    public boolean isSetZoneRow() {
        return (this.zoneRow!= null);
    }

    /**
     * Gets the value of the squareColumn property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getSquareColumn() {
        return squareColumn;
    }

    /**
     * Sets the value of the squareColumn property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setSquareColumn(String value) {
        this.squareColumn = value;
    }

    public boolean isSetSquareColumn() {
        return (this.squareColumn!= null);
    }

    /**
     * Gets the value of the squareRow property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getSquareRow() {
        return squareRow;
    }

    /**
     * Sets the value of the squareRow property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setSquareRow(String value) {
        this.squareRow = value;
    }

    public boolean isSetSquareRow() {
        return (this.squareRow!= null);
    }

    /**
     * Gets the value of the relativeLocation property.
     * 
     * @return
     *     possible object is
     *     {@link GridMetrePresentationType.RelativeLocation }
     *     
     */
    public GridMetrePresentationType.RelativeLocation getRelativeLocation() {
        return relativeLocation;
    }

    /**
     * Sets the value of the relativeLocation property.
     * 
     * @param value
     *     allowed object is
     *     {@link GridMetrePresentationType.RelativeLocation }
     *     
     */
    public void setRelativeLocation(GridMetrePresentationType.RelativeLocation value) {
        this.relativeLocation = value;
    }

    public boolean isSetRelativeLocation() {
        return (this.relativeLocation!= null);
    }

    public String toString() {
        final ToStringStrategy2 strategy = JAXBToStringStrategy.INSTANCE;
        final StringBuilder buffer = new StringBuilder();
        append(null, buffer, strategy);
        return buffer.toString();
    }

    public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy2 strategy) {
        strategy.appendStart(locator, this, buffer);
        appendFields(locator, buffer, strategy);
        strategy.appendEnd(locator, this, buffer);
        return buffer;
    }

    public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy2 strategy) {
        {
            Integer theZoneColumn;
            theZoneColumn = this.getZoneColumn();
            strategy.appendField(locator, this, "zoneColumn", buffer, theZoneColumn, this.isSetZoneColumn());
        }
        {
            String theZoneRow;
            theZoneRow = this.getZoneRow();
            strategy.appendField(locator, this, "zoneRow", buffer, theZoneRow, this.isSetZoneRow());
        }
        {
            String theSquareColumn;
            theSquareColumn = this.getSquareColumn();
            strategy.appendField(locator, this, "squareColumn", buffer, theSquareColumn, this.isSetSquareColumn());
        }
        {
            String theSquareRow;
            theSquareRow = this.getSquareRow();
            strategy.appendField(locator, this, "squareRow", buffer, theSquareRow, this.isSetSquareRow());
        }
        {
            GridMetrePresentationType.RelativeLocation theRelativeLocation;
            theRelativeLocation = this.getRelativeLocation();
            strategy.appendField(locator, this, "relativeLocation", buffer, theRelativeLocation, this.isSetRelativeLocation());
        }
        return buffer;
    }

    public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy2 strategy) {
        if ((object == null)||(this.getClass()!= object.getClass())) {
            return false;
        }
        if (this == object) {
            return true;
        }
        final GridMetrePresentationType that = ((GridMetrePresentationType) object);
        {
            Integer lhsZoneColumn;
            lhsZoneColumn = this.getZoneColumn();
            Integer rhsZoneColumn;
            rhsZoneColumn = that.getZoneColumn();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "zoneColumn", lhsZoneColumn), LocatorUtils.property(thatLocator, "zoneColumn", rhsZoneColumn), lhsZoneColumn, rhsZoneColumn, this.isSetZoneColumn(), that.isSetZoneColumn())) {
                return false;
            }
        }
        {
            String lhsZoneRow;
            lhsZoneRow = this.getZoneRow();
            String rhsZoneRow;
            rhsZoneRow = that.getZoneRow();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "zoneRow", lhsZoneRow), LocatorUtils.property(thatLocator, "zoneRow", rhsZoneRow), lhsZoneRow, rhsZoneRow, this.isSetZoneRow(), that.isSetZoneRow())) {
                return false;
            }
        }
        {
            String lhsSquareColumn;
            lhsSquareColumn = this.getSquareColumn();
            String rhsSquareColumn;
            rhsSquareColumn = that.getSquareColumn();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "squareColumn", lhsSquareColumn), LocatorUtils.property(thatLocator, "squareColumn", rhsSquareColumn), lhsSquareColumn, rhsSquareColumn, this.isSetSquareColumn(), that.isSetSquareColumn())) {
                return false;
            }
        }
        {
            String lhsSquareRow;
            lhsSquareRow = this.getSquareRow();
            String rhsSquareRow;
            rhsSquareRow = that.getSquareRow();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "squareRow", lhsSquareRow), LocatorUtils.property(thatLocator, "squareRow", rhsSquareRow), lhsSquareRow, rhsSquareRow, this.isSetSquareRow(), that.isSetSquareRow())) {
                return false;
            }
        }
        {
            GridMetrePresentationType.RelativeLocation lhsRelativeLocation;
            lhsRelativeLocation = this.getRelativeLocation();
            GridMetrePresentationType.RelativeLocation rhsRelativeLocation;
            rhsRelativeLocation = that.getRelativeLocation();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "relativeLocation", lhsRelativeLocation), LocatorUtils.property(thatLocator, "relativeLocation", rhsRelativeLocation), lhsRelativeLocation, rhsRelativeLocation, this.isSetRelativeLocation(), that.isSetRelativeLocation())) {
                return false;
            }
        }
        return true;
    }

    public boolean equals(Object object) {
        final EqualsStrategy2 strategy = JAXBEqualsStrategy.INSTANCE;
        return equals(null, null, object, strategy);
    }

    public int hashCode(ObjectLocator locator, HashCodeStrategy2 strategy) {
        int currentHashCode = 1;
        {
            Integer theZoneColumn;
            theZoneColumn = this.getZoneColumn();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "zoneColumn", theZoneColumn), currentHashCode, theZoneColumn, this.isSetZoneColumn());
        }
        {
            String theZoneRow;
            theZoneRow = this.getZoneRow();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "zoneRow", theZoneRow), currentHashCode, theZoneRow, this.isSetZoneRow());
        }
        {
            String theSquareColumn;
            theSquareColumn = this.getSquareColumn();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "squareColumn", theSquareColumn), currentHashCode, theSquareColumn, this.isSetSquareColumn());
        }
        {
            String theSquareRow;
            theSquareRow = this.getSquareRow();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "squareRow", theSquareRow), currentHashCode, theSquareRow, this.isSetSquareRow());
        }
        {
            GridMetrePresentationType.RelativeLocation theRelativeLocation;
            theRelativeLocation = this.getRelativeLocation();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "relativeLocation", theRelativeLocation), currentHashCode, theRelativeLocation, this.isSetRelativeLocation());
        }
        return currentHashCode;
    }

    public int hashCode() {
        final HashCodeStrategy2 strategy = JAXBHashCodeStrategy.INSTANCE;
        return this.hashCode(null, strategy);
    }

    public Object clone() {
        return copyTo(createNewInstance());
    }

    public Object copyTo(Object target) {
        final CopyStrategy2 strategy = JAXBCopyStrategy.INSTANCE;
        return copyTo(null, target, strategy);
    }

    public Object copyTo(ObjectLocator locator, Object target, CopyStrategy2 strategy) {
        final Object draftCopy = ((target == null)?createNewInstance():target);
        if (draftCopy instanceof GridMetrePresentationType) {
            final GridMetrePresentationType copy = ((GridMetrePresentationType) draftCopy);
            {
                Boolean zoneColumnShouldBeCopiedAndSet = strategy.shouldBeCopiedAndSet(locator, this.isSetZoneColumn());
                if (zoneColumnShouldBeCopiedAndSet == Boolean.TRUE) {
                    Integer sourceZoneColumn;
                    sourceZoneColumn = this.getZoneColumn();
                    Integer copyZoneColumn = ((Integer) strategy.copy(LocatorUtils.property(locator, "zoneColumn", sourceZoneColumn), sourceZoneColumn, this.isSetZoneColumn()));
                    copy.setZoneColumn(copyZoneColumn);
                } else {
                    if (zoneColumnShouldBeCopiedAndSet == Boolean.FALSE) {
                        copy.zoneColumn = null;
                    }
                }
            }
            {
                Boolean zoneRowShouldBeCopiedAndSet = strategy.shouldBeCopiedAndSet(locator, this.isSetZoneRow());
                if (zoneRowShouldBeCopiedAndSet == Boolean.TRUE) {
                    String sourceZoneRow;
                    sourceZoneRow = this.getZoneRow();
                    String copyZoneRow = ((String) strategy.copy(LocatorUtils.property(locator, "zoneRow", sourceZoneRow), sourceZoneRow, this.isSetZoneRow()));
                    copy.setZoneRow(copyZoneRow);
                } else {
                    if (zoneRowShouldBeCopiedAndSet == Boolean.FALSE) {
                        copy.zoneRow = null;
                    }
                }
            }
            {
                Boolean squareColumnShouldBeCopiedAndSet = strategy.shouldBeCopiedAndSet(locator, this.isSetSquareColumn());
                if (squareColumnShouldBeCopiedAndSet == Boolean.TRUE) {
                    String sourceSquareColumn;
                    sourceSquareColumn = this.getSquareColumn();
                    String copySquareColumn = ((String) strategy.copy(LocatorUtils.property(locator, "squareColumn", sourceSquareColumn), sourceSquareColumn, this.isSetSquareColumn()));
                    copy.setSquareColumn(copySquareColumn);
                } else {
                    if (squareColumnShouldBeCopiedAndSet == Boolean.FALSE) {
                        copy.squareColumn = null;
                    }
                }
            }
            {
                Boolean squareRowShouldBeCopiedAndSet = strategy.shouldBeCopiedAndSet(locator, this.isSetSquareRow());
                if (squareRowShouldBeCopiedAndSet == Boolean.TRUE) {
                    String sourceSquareRow;
                    sourceSquareRow = this.getSquareRow();
                    String copySquareRow = ((String) strategy.copy(LocatorUtils.property(locator, "squareRow", sourceSquareRow), sourceSquareRow, this.isSetSquareRow()));
                    copy.setSquareRow(copySquareRow);
                } else {
                    if (squareRowShouldBeCopiedAndSet == Boolean.FALSE) {
                        copy.squareRow = null;
                    }
                }
            }
            {
                Boolean relativeLocationShouldBeCopiedAndSet = strategy.shouldBeCopiedAndSet(locator, this.isSetRelativeLocation());
                if (relativeLocationShouldBeCopiedAndSet == Boolean.TRUE) {
                    GridMetrePresentationType.RelativeLocation sourceRelativeLocation;
                    sourceRelativeLocation = this.getRelativeLocation();
                    GridMetrePresentationType.RelativeLocation copyRelativeLocation = ((GridMetrePresentationType.RelativeLocation) strategy.copy(LocatorUtils.property(locator, "relativeLocation", sourceRelativeLocation), sourceRelativeLocation, this.isSetRelativeLocation()));
                    copy.setRelativeLocation(copyRelativeLocation);
                } else {
                    if (relativeLocationShouldBeCopiedAndSet == Boolean.FALSE) {
                        copy.relativeLocation = null;
                    }
                }
            }
        }
        return draftCopy;
    }

    public Object createNewInstance() {
        return new GridMetrePresentationType();
    }

    public void mergeFrom(Object left, Object right) {
        final MergeStrategy2 strategy = JAXBMergeStrategy.INSTANCE;
        mergeFrom(null, null, left, right, strategy);
    }

    public void mergeFrom(ObjectLocator leftLocator, ObjectLocator rightLocator, Object left, Object right, MergeStrategy2 strategy) {
        if (right instanceof GridMetrePresentationType) {
            final GridMetrePresentationType target = this;
            final GridMetrePresentationType leftObject = ((GridMetrePresentationType) left);
            final GridMetrePresentationType rightObject = ((GridMetrePresentationType) right);
            {
                Boolean zoneColumnShouldBeMergedAndSet = strategy.shouldBeMergedAndSet(leftLocator, rightLocator, leftObject.isSetZoneColumn(), rightObject.isSetZoneColumn());
                if (zoneColumnShouldBeMergedAndSet == Boolean.TRUE) {
                    Integer lhsZoneColumn;
                    lhsZoneColumn = leftObject.getZoneColumn();
                    Integer rhsZoneColumn;
                    rhsZoneColumn = rightObject.getZoneColumn();
                    Integer mergedZoneColumn = ((Integer) strategy.merge(LocatorUtils.property(leftLocator, "zoneColumn", lhsZoneColumn), LocatorUtils.property(rightLocator, "zoneColumn", rhsZoneColumn), lhsZoneColumn, rhsZoneColumn, leftObject.isSetZoneColumn(), rightObject.isSetZoneColumn()));
                    target.setZoneColumn(mergedZoneColumn);
                } else {
                    if (zoneColumnShouldBeMergedAndSet == Boolean.FALSE) {
                        target.zoneColumn = null;
                    }
                }
            }
            {
                Boolean zoneRowShouldBeMergedAndSet = strategy.shouldBeMergedAndSet(leftLocator, rightLocator, leftObject.isSetZoneRow(), rightObject.isSetZoneRow());
                if (zoneRowShouldBeMergedAndSet == Boolean.TRUE) {
                    String lhsZoneRow;
                    lhsZoneRow = leftObject.getZoneRow();
                    String rhsZoneRow;
                    rhsZoneRow = rightObject.getZoneRow();
                    String mergedZoneRow = ((String) strategy.merge(LocatorUtils.property(leftLocator, "zoneRow", lhsZoneRow), LocatorUtils.property(rightLocator, "zoneRow", rhsZoneRow), lhsZoneRow, rhsZoneRow, leftObject.isSetZoneRow(), rightObject.isSetZoneRow()));
                    target.setZoneRow(mergedZoneRow);
                } else {
                    if (zoneRowShouldBeMergedAndSet == Boolean.FALSE) {
                        target.zoneRow = null;
                    }
                }
            }
            {
                Boolean squareColumnShouldBeMergedAndSet = strategy.shouldBeMergedAndSet(leftLocator, rightLocator, leftObject.isSetSquareColumn(), rightObject.isSetSquareColumn());
                if (squareColumnShouldBeMergedAndSet == Boolean.TRUE) {
                    String lhsSquareColumn;
                    lhsSquareColumn = leftObject.getSquareColumn();
                    String rhsSquareColumn;
                    rhsSquareColumn = rightObject.getSquareColumn();
                    String mergedSquareColumn = ((String) strategy.merge(LocatorUtils.property(leftLocator, "squareColumn", lhsSquareColumn), LocatorUtils.property(rightLocator, "squareColumn", rhsSquareColumn), lhsSquareColumn, rhsSquareColumn, leftObject.isSetSquareColumn(), rightObject.isSetSquareColumn()));
                    target.setSquareColumn(mergedSquareColumn);
                } else {
                    if (squareColumnShouldBeMergedAndSet == Boolean.FALSE) {
                        target.squareColumn = null;
                    }
                }
            }
            {
                Boolean squareRowShouldBeMergedAndSet = strategy.shouldBeMergedAndSet(leftLocator, rightLocator, leftObject.isSetSquareRow(), rightObject.isSetSquareRow());
                if (squareRowShouldBeMergedAndSet == Boolean.TRUE) {
                    String lhsSquareRow;
                    lhsSquareRow = leftObject.getSquareRow();
                    String rhsSquareRow;
                    rhsSquareRow = rightObject.getSquareRow();
                    String mergedSquareRow = ((String) strategy.merge(LocatorUtils.property(leftLocator, "squareRow", lhsSquareRow), LocatorUtils.property(rightLocator, "squareRow", rhsSquareRow), lhsSquareRow, rhsSquareRow, leftObject.isSetSquareRow(), rightObject.isSetSquareRow()));
                    target.setSquareRow(mergedSquareRow);
                } else {
                    if (squareRowShouldBeMergedAndSet == Boolean.FALSE) {
                        target.squareRow = null;
                    }
                }
            }
            {
                Boolean relativeLocationShouldBeMergedAndSet = strategy.shouldBeMergedAndSet(leftLocator, rightLocator, leftObject.isSetRelativeLocation(), rightObject.isSetRelativeLocation());
                if (relativeLocationShouldBeMergedAndSet == Boolean.TRUE) {
                    GridMetrePresentationType.RelativeLocation lhsRelativeLocation;
                    lhsRelativeLocation = leftObject.getRelativeLocation();
                    GridMetrePresentationType.RelativeLocation rhsRelativeLocation;
                    rhsRelativeLocation = rightObject.getRelativeLocation();
                    GridMetrePresentationType.RelativeLocation mergedRelativeLocation = ((GridMetrePresentationType.RelativeLocation) strategy.merge(LocatorUtils.property(leftLocator, "relativeLocation", lhsRelativeLocation), LocatorUtils.property(rightLocator, "relativeLocation", rhsRelativeLocation), lhsRelativeLocation, rhsRelativeLocation, leftObject.isSetRelativeLocation(), rightObject.isSetRelativeLocation()));
                    target.setRelativeLocation(mergedRelativeLocation);
                } else {
                    if (relativeLocationShouldBeMergedAndSet == Boolean.FALSE) {
                        target.relativeLocation = null;
                    }
                }
            }
        }
    }


    /**
     * <p>Java class for anonymous complex type.
     * 
     * <p>The following schema fragment specifies the expected content contained within this class.
     * 
     * <pre>
     * &lt;complexType&gt;
     *   &lt;complexContent&gt;
     *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
     *       &lt;choice&gt;
     *         &lt;element name="decakilometre"&gt;
     *           &lt;complexType&gt;
     *             &lt;complexContent&gt;
     *               &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
     *                 &lt;sequence&gt;
     *                   &lt;element name="easting" type="{http://metadata.ces.mil/mdr/ns/GSIP/tspi/2.0/core}DecaType"/&gt;
     *                   &lt;element name="northing" type="{http://metadata.ces.mil/mdr/ns/GSIP/tspi/2.0/core}DecaType"/&gt;
     *                 &lt;/sequence&gt;
     *               &lt;/restriction&gt;
     *             &lt;/complexContent&gt;
     *           &lt;/complexType&gt;
     *         &lt;/element&gt;
     *         &lt;element name="kilometre"&gt;
     *           &lt;complexType&gt;
     *             &lt;complexContent&gt;
     *               &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
     *                 &lt;sequence&gt;
     *                   &lt;element name="easting" type="{http://metadata.ces.mil/mdr/ns/GSIP/tspi/2.0/core}HectoType"/&gt;
     *                   &lt;element name="northing" type="{http://metadata.ces.mil/mdr/ns/GSIP/tspi/2.0/core}HectoType"/&gt;
     *                 &lt;/sequence&gt;
     *               &lt;/restriction&gt;
     *             &lt;/complexContent&gt;
     *           &lt;/complexType&gt;
     *         &lt;/element&gt;
     *         &lt;element name="hectometre"&gt;
     *           &lt;complexType&gt;
     *             &lt;complexContent&gt;
     *               &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
     *                 &lt;sequence&gt;
     *                   &lt;element name="easting" type="{http://metadata.ces.mil/mdr/ns/GSIP/tspi/2.0/core}KiloType"/&gt;
     *                   &lt;element name="northing" type="{http://metadata.ces.mil/mdr/ns/GSIP/tspi/2.0/core}KiloType"/&gt;
     *                 &lt;/sequence&gt;
     *               &lt;/restriction&gt;
     *             &lt;/complexContent&gt;
     *           &lt;/complexType&gt;
     *         &lt;/element&gt;
     *         &lt;element name="decametre"&gt;
     *           &lt;complexType&gt;
     *             &lt;complexContent&gt;
     *               &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
     *                 &lt;sequence&gt;
     *                   &lt;element name="easting" type="{http://metadata.ces.mil/mdr/ns/GSIP/tspi/2.0/core}DecakiloType"/&gt;
     *                   &lt;element name="northing" type="{http://metadata.ces.mil/mdr/ns/GSIP/tspi/2.0/core}DecakiloType"/&gt;
     *                 &lt;/sequence&gt;
     *               &lt;/restriction&gt;
     *             &lt;/complexContent&gt;
     *           &lt;/complexType&gt;
     *         &lt;/element&gt;
     *         &lt;element name="metre"&gt;
     *           &lt;complexType&gt;
     *             &lt;complexContent&gt;
     *               &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
     *                 &lt;sequence&gt;
     *                   &lt;element name="easting" type="{http://metadata.ces.mil/mdr/ns/GSIP/tspi/2.0/core}HectokiloType"/&gt;
     *                   &lt;element name="northing" type="{http://metadata.ces.mil/mdr/ns/GSIP/tspi/2.0/core}HectokiloType"/&gt;
     *                 &lt;/sequence&gt;
     *               &lt;/restriction&gt;
     *             &lt;/complexContent&gt;
     *           &lt;/complexType&gt;
     *         &lt;/element&gt;
     *       &lt;/choice&gt;
     *     &lt;/restriction&gt;
     *   &lt;/complexContent&gt;
     * &lt;/complexType&gt;
     * </pre>
     * 
     * 
     */
    @XmlAccessorType(XmlAccessType.FIELD)
    @XmlType(name = "", propOrder = {
        "decakilometre",
        "kilometre",
        "hectometre",
        "decametre",
        "metre"
    })
    public static class RelativeLocation implements Serializable, Cloneable, CopyTo2, Equals2, HashCode2, MergeFrom2, ToString2
    {

        private final static long serialVersionUID = 1L;
        @Valid
        protected GridMetrePresentationType.RelativeLocation.Decakilometre decakilometre;
        @Valid
        protected GridMetrePresentationType.RelativeLocation.Kilometre kilometre;
        @Valid
        protected GridMetrePresentationType.RelativeLocation.Hectometre hectometre;
        @Valid
        protected GridMetrePresentationType.RelativeLocation.Decametre decametre;
        @Valid
        protected GridMetrePresentationType.RelativeLocation.Metre metre;

        /**
         * Gets the value of the decakilometre property.
         * 
         * @return
         *     possible object is
         *     {@link GridMetrePresentationType.RelativeLocation.Decakilometre }
         *     
         */
        public GridMetrePresentationType.RelativeLocation.Decakilometre getDecakilometre() {
            return decakilometre;
        }

        /**
         * Sets the value of the decakilometre property.
         * 
         * @param value
         *     allowed object is
         *     {@link GridMetrePresentationType.RelativeLocation.Decakilometre }
         *     
         */
        public void setDecakilometre(GridMetrePresentationType.RelativeLocation.Decakilometre value) {
            this.decakilometre = value;
        }

        public boolean isSetDecakilometre() {
            return (this.decakilometre!= null);
        }

        /**
         * Gets the value of the kilometre property.
         * 
         * @return
         *     possible object is
         *     {@link GridMetrePresentationType.RelativeLocation.Kilometre }
         *     
         */
        public GridMetrePresentationType.RelativeLocation.Kilometre getKilometre() {
            return kilometre;
        }

        /**
         * Sets the value of the kilometre property.
         * 
         * @param value
         *     allowed object is
         *     {@link GridMetrePresentationType.RelativeLocation.Kilometre }
         *     
         */
        public void setKilometre(GridMetrePresentationType.RelativeLocation.Kilometre value) {
            this.kilometre = value;
        }

        public boolean isSetKilometre() {
            return (this.kilometre!= null);
        }

        /**
         * Gets the value of the hectometre property.
         * 
         * @return
         *     possible object is
         *     {@link GridMetrePresentationType.RelativeLocation.Hectometre }
         *     
         */
        public GridMetrePresentationType.RelativeLocation.Hectometre getHectometre() {
            return hectometre;
        }

        /**
         * Sets the value of the hectometre property.
         * 
         * @param value
         *     allowed object is
         *     {@link GridMetrePresentationType.RelativeLocation.Hectometre }
         *     
         */
        public void setHectometre(GridMetrePresentationType.RelativeLocation.Hectometre value) {
            this.hectometre = value;
        }

        public boolean isSetHectometre() {
            return (this.hectometre!= null);
        }

        /**
         * Gets the value of the decametre property.
         * 
         * @return
         *     possible object is
         *     {@link GridMetrePresentationType.RelativeLocation.Decametre }
         *     
         */
        public GridMetrePresentationType.RelativeLocation.Decametre getDecametre() {
            return decametre;
        }

        /**
         * Sets the value of the decametre property.
         * 
         * @param value
         *     allowed object is
         *     {@link GridMetrePresentationType.RelativeLocation.Decametre }
         *     
         */
        public void setDecametre(GridMetrePresentationType.RelativeLocation.Decametre value) {
            this.decametre = value;
        }

        public boolean isSetDecametre() {
            return (this.decametre!= null);
        }

        /**
         * Gets the value of the metre property.
         * 
         * @return
         *     possible object is
         *     {@link GridMetrePresentationType.RelativeLocation.Metre }
         *     
         */
        public GridMetrePresentationType.RelativeLocation.Metre getMetre() {
            return metre;
        }

        /**
         * Sets the value of the metre property.
         * 
         * @param value
         *     allowed object is
         *     {@link GridMetrePresentationType.RelativeLocation.Metre }
         *     
         */
        public void setMetre(GridMetrePresentationType.RelativeLocation.Metre value) {
            this.metre = value;
        }

        public boolean isSetMetre() {
            return (this.metre!= null);
        }

        public String toString() {
            final ToStringStrategy2 strategy = JAXBToStringStrategy.INSTANCE;
            final StringBuilder buffer = new StringBuilder();
            append(null, buffer, strategy);
            return buffer.toString();
        }

        public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy2 strategy) {
            strategy.appendStart(locator, this, buffer);
            appendFields(locator, buffer, strategy);
            strategy.appendEnd(locator, this, buffer);
            return buffer;
        }

        public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy2 strategy) {
            {
                GridMetrePresentationType.RelativeLocation.Decakilometre theDecakilometre;
                theDecakilometre = this.getDecakilometre();
                strategy.appendField(locator, this, "decakilometre", buffer, theDecakilometre, this.isSetDecakilometre());
            }
            {
                GridMetrePresentationType.RelativeLocation.Kilometre theKilometre;
                theKilometre = this.getKilometre();
                strategy.appendField(locator, this, "kilometre", buffer, theKilometre, this.isSetKilometre());
            }
            {
                GridMetrePresentationType.RelativeLocation.Hectometre theHectometre;
                theHectometre = this.getHectometre();
                strategy.appendField(locator, this, "hectometre", buffer, theHectometre, this.isSetHectometre());
            }
            {
                GridMetrePresentationType.RelativeLocation.Decametre theDecametre;
                theDecametre = this.getDecametre();
                strategy.appendField(locator, this, "decametre", buffer, theDecametre, this.isSetDecametre());
            }
            {
                GridMetrePresentationType.RelativeLocation.Metre theMetre;
                theMetre = this.getMetre();
                strategy.appendField(locator, this, "metre", buffer, theMetre, this.isSetMetre());
            }
            return buffer;
        }

        public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy2 strategy) {
            if ((object == null)||(this.getClass()!= object.getClass())) {
                return false;
            }
            if (this == object) {
                return true;
            }
            final GridMetrePresentationType.RelativeLocation that = ((GridMetrePresentationType.RelativeLocation) object);
            {
                GridMetrePresentationType.RelativeLocation.Decakilometre lhsDecakilometre;
                lhsDecakilometre = this.getDecakilometre();
                GridMetrePresentationType.RelativeLocation.Decakilometre rhsDecakilometre;
                rhsDecakilometre = that.getDecakilometre();
                if (!strategy.equals(LocatorUtils.property(thisLocator, "decakilometre", lhsDecakilometre), LocatorUtils.property(thatLocator, "decakilometre", rhsDecakilometre), lhsDecakilometre, rhsDecakilometre, this.isSetDecakilometre(), that.isSetDecakilometre())) {
                    return false;
                }
            }
            {
                GridMetrePresentationType.RelativeLocation.Kilometre lhsKilometre;
                lhsKilometre = this.getKilometre();
                GridMetrePresentationType.RelativeLocation.Kilometre rhsKilometre;
                rhsKilometre = that.getKilometre();
                if (!strategy.equals(LocatorUtils.property(thisLocator, "kilometre", lhsKilometre), LocatorUtils.property(thatLocator, "kilometre", rhsKilometre), lhsKilometre, rhsKilometre, this.isSetKilometre(), that.isSetKilometre())) {
                    return false;
                }
            }
            {
                GridMetrePresentationType.RelativeLocation.Hectometre lhsHectometre;
                lhsHectometre = this.getHectometre();
                GridMetrePresentationType.RelativeLocation.Hectometre rhsHectometre;
                rhsHectometre = that.getHectometre();
                if (!strategy.equals(LocatorUtils.property(thisLocator, "hectometre", lhsHectometre), LocatorUtils.property(thatLocator, "hectometre", rhsHectometre), lhsHectometre, rhsHectometre, this.isSetHectometre(), that.isSetHectometre())) {
                    return false;
                }
            }
            {
                GridMetrePresentationType.RelativeLocation.Decametre lhsDecametre;
                lhsDecametre = this.getDecametre();
                GridMetrePresentationType.RelativeLocation.Decametre rhsDecametre;
                rhsDecametre = that.getDecametre();
                if (!strategy.equals(LocatorUtils.property(thisLocator, "decametre", lhsDecametre), LocatorUtils.property(thatLocator, "decametre", rhsDecametre), lhsDecametre, rhsDecametre, this.isSetDecametre(), that.isSetDecametre())) {
                    return false;
                }
            }
            {
                GridMetrePresentationType.RelativeLocation.Metre lhsMetre;
                lhsMetre = this.getMetre();
                GridMetrePresentationType.RelativeLocation.Metre rhsMetre;
                rhsMetre = that.getMetre();
                if (!strategy.equals(LocatorUtils.property(thisLocator, "metre", lhsMetre), LocatorUtils.property(thatLocator, "metre", rhsMetre), lhsMetre, rhsMetre, this.isSetMetre(), that.isSetMetre())) {
                    return false;
                }
            }
            return true;
        }

        public boolean equals(Object object) {
            final EqualsStrategy2 strategy = JAXBEqualsStrategy.INSTANCE;
            return equals(null, null, object, strategy);
        }

        public int hashCode(ObjectLocator locator, HashCodeStrategy2 strategy) {
            int currentHashCode = 1;
            {
                GridMetrePresentationType.RelativeLocation.Decakilometre theDecakilometre;
                theDecakilometre = this.getDecakilometre();
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "decakilometre", theDecakilometre), currentHashCode, theDecakilometre, this.isSetDecakilometre());
            }
            {
                GridMetrePresentationType.RelativeLocation.Kilometre theKilometre;
                theKilometre = this.getKilometre();
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "kilometre", theKilometre), currentHashCode, theKilometre, this.isSetKilometre());
            }
            {
                GridMetrePresentationType.RelativeLocation.Hectometre theHectometre;
                theHectometre = this.getHectometre();
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "hectometre", theHectometre), currentHashCode, theHectometre, this.isSetHectometre());
            }
            {
                GridMetrePresentationType.RelativeLocation.Decametre theDecametre;
                theDecametre = this.getDecametre();
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "decametre", theDecametre), currentHashCode, theDecametre, this.isSetDecametre());
            }
            {
                GridMetrePresentationType.RelativeLocation.Metre theMetre;
                theMetre = this.getMetre();
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "metre", theMetre), currentHashCode, theMetre, this.isSetMetre());
            }
            return currentHashCode;
        }

        public int hashCode() {
            final HashCodeStrategy2 strategy = JAXBHashCodeStrategy.INSTANCE;
            return this.hashCode(null, strategy);
        }

        public Object clone() {
            return copyTo(createNewInstance());
        }

        public Object copyTo(Object target) {
            final CopyStrategy2 strategy = JAXBCopyStrategy.INSTANCE;
            return copyTo(null, target, strategy);
        }

        public Object copyTo(ObjectLocator locator, Object target, CopyStrategy2 strategy) {
            final Object draftCopy = ((target == null)?createNewInstance():target);
            if (draftCopy instanceof GridMetrePresentationType.RelativeLocation) {
                final GridMetrePresentationType.RelativeLocation copy = ((GridMetrePresentationType.RelativeLocation) draftCopy);
                {
                    Boolean decakilometreShouldBeCopiedAndSet = strategy.shouldBeCopiedAndSet(locator, this.isSetDecakilometre());
                    if (decakilometreShouldBeCopiedAndSet == Boolean.TRUE) {
                        GridMetrePresentationType.RelativeLocation.Decakilometre sourceDecakilometre;
                        sourceDecakilometre = this.getDecakilometre();
                        GridMetrePresentationType.RelativeLocation.Decakilometre copyDecakilometre = ((GridMetrePresentationType.RelativeLocation.Decakilometre) strategy.copy(LocatorUtils.property(locator, "decakilometre", sourceDecakilometre), sourceDecakilometre, this.isSetDecakilometre()));
                        copy.setDecakilometre(copyDecakilometre);
                    } else {
                        if (decakilometreShouldBeCopiedAndSet == Boolean.FALSE) {
                            copy.decakilometre = null;
                        }
                    }
                }
                {
                    Boolean kilometreShouldBeCopiedAndSet = strategy.shouldBeCopiedAndSet(locator, this.isSetKilometre());
                    if (kilometreShouldBeCopiedAndSet == Boolean.TRUE) {
                        GridMetrePresentationType.RelativeLocation.Kilometre sourceKilometre;
                        sourceKilometre = this.getKilometre();
                        GridMetrePresentationType.RelativeLocation.Kilometre copyKilometre = ((GridMetrePresentationType.RelativeLocation.Kilometre) strategy.copy(LocatorUtils.property(locator, "kilometre", sourceKilometre), sourceKilometre, this.isSetKilometre()));
                        copy.setKilometre(copyKilometre);
                    } else {
                        if (kilometreShouldBeCopiedAndSet == Boolean.FALSE) {
                            copy.kilometre = null;
                        }
                    }
                }
                {
                    Boolean hectometreShouldBeCopiedAndSet = strategy.shouldBeCopiedAndSet(locator, this.isSetHectometre());
                    if (hectometreShouldBeCopiedAndSet == Boolean.TRUE) {
                        GridMetrePresentationType.RelativeLocation.Hectometre sourceHectometre;
                        sourceHectometre = this.getHectometre();
                        GridMetrePresentationType.RelativeLocation.Hectometre copyHectometre = ((GridMetrePresentationType.RelativeLocation.Hectometre) strategy.copy(LocatorUtils.property(locator, "hectometre", sourceHectometre), sourceHectometre, this.isSetHectometre()));
                        copy.setHectometre(copyHectometre);
                    } else {
                        if (hectometreShouldBeCopiedAndSet == Boolean.FALSE) {
                            copy.hectometre = null;
                        }
                    }
                }
                {
                    Boolean decametreShouldBeCopiedAndSet = strategy.shouldBeCopiedAndSet(locator, this.isSetDecametre());
                    if (decametreShouldBeCopiedAndSet == Boolean.TRUE) {
                        GridMetrePresentationType.RelativeLocation.Decametre sourceDecametre;
                        sourceDecametre = this.getDecametre();
                        GridMetrePresentationType.RelativeLocation.Decametre copyDecametre = ((GridMetrePresentationType.RelativeLocation.Decametre) strategy.copy(LocatorUtils.property(locator, "decametre", sourceDecametre), sourceDecametre, this.isSetDecametre()));
                        copy.setDecametre(copyDecametre);
                    } else {
                        if (decametreShouldBeCopiedAndSet == Boolean.FALSE) {
                            copy.decametre = null;
                        }
                    }
                }
                {
                    Boolean metreShouldBeCopiedAndSet = strategy.shouldBeCopiedAndSet(locator, this.isSetMetre());
                    if (metreShouldBeCopiedAndSet == Boolean.TRUE) {
                        GridMetrePresentationType.RelativeLocation.Metre sourceMetre;
                        sourceMetre = this.getMetre();
                        GridMetrePresentationType.RelativeLocation.Metre copyMetre = ((GridMetrePresentationType.RelativeLocation.Metre) strategy.copy(LocatorUtils.property(locator, "metre", sourceMetre), sourceMetre, this.isSetMetre()));
                        copy.setMetre(copyMetre);
                    } else {
                        if (metreShouldBeCopiedAndSet == Boolean.FALSE) {
                            copy.metre = null;
                        }
                    }
                }
            }
            return draftCopy;
        }

        public Object createNewInstance() {
            return new GridMetrePresentationType.RelativeLocation();
        }

        public void mergeFrom(Object left, Object right) {
            final MergeStrategy2 strategy = JAXBMergeStrategy.INSTANCE;
            mergeFrom(null, null, left, right, strategy);
        }

        public void mergeFrom(ObjectLocator leftLocator, ObjectLocator rightLocator, Object left, Object right, MergeStrategy2 strategy) {
            if (right instanceof GridMetrePresentationType.RelativeLocation) {
                final GridMetrePresentationType.RelativeLocation target = this;
                final GridMetrePresentationType.RelativeLocation leftObject = ((GridMetrePresentationType.RelativeLocation) left);
                final GridMetrePresentationType.RelativeLocation rightObject = ((GridMetrePresentationType.RelativeLocation) right);
                {
                    Boolean decakilometreShouldBeMergedAndSet = strategy.shouldBeMergedAndSet(leftLocator, rightLocator, leftObject.isSetDecakilometre(), rightObject.isSetDecakilometre());
                    if (decakilometreShouldBeMergedAndSet == Boolean.TRUE) {
                        GridMetrePresentationType.RelativeLocation.Decakilometre lhsDecakilometre;
                        lhsDecakilometre = leftObject.getDecakilometre();
                        GridMetrePresentationType.RelativeLocation.Decakilometre rhsDecakilometre;
                        rhsDecakilometre = rightObject.getDecakilometre();
                        GridMetrePresentationType.RelativeLocation.Decakilometre mergedDecakilometre = ((GridMetrePresentationType.RelativeLocation.Decakilometre) strategy.merge(LocatorUtils.property(leftLocator, "decakilometre", lhsDecakilometre), LocatorUtils.property(rightLocator, "decakilometre", rhsDecakilometre), lhsDecakilometre, rhsDecakilometre, leftObject.isSetDecakilometre(), rightObject.isSetDecakilometre()));
                        target.setDecakilometre(mergedDecakilometre);
                    } else {
                        if (decakilometreShouldBeMergedAndSet == Boolean.FALSE) {
                            target.decakilometre = null;
                        }
                    }
                }
                {
                    Boolean kilometreShouldBeMergedAndSet = strategy.shouldBeMergedAndSet(leftLocator, rightLocator, leftObject.isSetKilometre(), rightObject.isSetKilometre());
                    if (kilometreShouldBeMergedAndSet == Boolean.TRUE) {
                        GridMetrePresentationType.RelativeLocation.Kilometre lhsKilometre;
                        lhsKilometre = leftObject.getKilometre();
                        GridMetrePresentationType.RelativeLocation.Kilometre rhsKilometre;
                        rhsKilometre = rightObject.getKilometre();
                        GridMetrePresentationType.RelativeLocation.Kilometre mergedKilometre = ((GridMetrePresentationType.RelativeLocation.Kilometre) strategy.merge(LocatorUtils.property(leftLocator, "kilometre", lhsKilometre), LocatorUtils.property(rightLocator, "kilometre", rhsKilometre), lhsKilometre, rhsKilometre, leftObject.isSetKilometre(), rightObject.isSetKilometre()));
                        target.setKilometre(mergedKilometre);
                    } else {
                        if (kilometreShouldBeMergedAndSet == Boolean.FALSE) {
                            target.kilometre = null;
                        }
                    }
                }
                {
                    Boolean hectometreShouldBeMergedAndSet = strategy.shouldBeMergedAndSet(leftLocator, rightLocator, leftObject.isSetHectometre(), rightObject.isSetHectometre());
                    if (hectometreShouldBeMergedAndSet == Boolean.TRUE) {
                        GridMetrePresentationType.RelativeLocation.Hectometre lhsHectometre;
                        lhsHectometre = leftObject.getHectometre();
                        GridMetrePresentationType.RelativeLocation.Hectometre rhsHectometre;
                        rhsHectometre = rightObject.getHectometre();
                        GridMetrePresentationType.RelativeLocation.Hectometre mergedHectometre = ((GridMetrePresentationType.RelativeLocation.Hectometre) strategy.merge(LocatorUtils.property(leftLocator, "hectometre", lhsHectometre), LocatorUtils.property(rightLocator, "hectometre", rhsHectometre), lhsHectometre, rhsHectometre, leftObject.isSetHectometre(), rightObject.isSetHectometre()));
                        target.setHectometre(mergedHectometre);
                    } else {
                        if (hectometreShouldBeMergedAndSet == Boolean.FALSE) {
                            target.hectometre = null;
                        }
                    }
                }
                {
                    Boolean decametreShouldBeMergedAndSet = strategy.shouldBeMergedAndSet(leftLocator, rightLocator, leftObject.isSetDecametre(), rightObject.isSetDecametre());
                    if (decametreShouldBeMergedAndSet == Boolean.TRUE) {
                        GridMetrePresentationType.RelativeLocation.Decametre lhsDecametre;
                        lhsDecametre = leftObject.getDecametre();
                        GridMetrePresentationType.RelativeLocation.Decametre rhsDecametre;
                        rhsDecametre = rightObject.getDecametre();
                        GridMetrePresentationType.RelativeLocation.Decametre mergedDecametre = ((GridMetrePresentationType.RelativeLocation.Decametre) strategy.merge(LocatorUtils.property(leftLocator, "decametre", lhsDecametre), LocatorUtils.property(rightLocator, "decametre", rhsDecametre), lhsDecametre, rhsDecametre, leftObject.isSetDecametre(), rightObject.isSetDecametre()));
                        target.setDecametre(mergedDecametre);
                    } else {
                        if (decametreShouldBeMergedAndSet == Boolean.FALSE) {
                            target.decametre = null;
                        }
                    }
                }
                {
                    Boolean metreShouldBeMergedAndSet = strategy.shouldBeMergedAndSet(leftLocator, rightLocator, leftObject.isSetMetre(), rightObject.isSetMetre());
                    if (metreShouldBeMergedAndSet == Boolean.TRUE) {
                        GridMetrePresentationType.RelativeLocation.Metre lhsMetre;
                        lhsMetre = leftObject.getMetre();
                        GridMetrePresentationType.RelativeLocation.Metre rhsMetre;
                        rhsMetre = rightObject.getMetre();
                        GridMetrePresentationType.RelativeLocation.Metre mergedMetre = ((GridMetrePresentationType.RelativeLocation.Metre) strategy.merge(LocatorUtils.property(leftLocator, "metre", lhsMetre), LocatorUtils.property(rightLocator, "metre", rhsMetre), lhsMetre, rhsMetre, leftObject.isSetMetre(), rightObject.isSetMetre()));
                        target.setMetre(mergedMetre);
                    } else {
                        if (metreShouldBeMergedAndSet == Boolean.FALSE) {
                            target.metre = null;
                        }
                    }
                }
            }
        }


        /**
         * <p>Java class for anonymous complex type.
         * 
         * <p>The following schema fragment specifies the expected content contained within this class.
         * 
         * <pre>
         * &lt;complexType&gt;
         *   &lt;complexContent&gt;
         *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
         *       &lt;sequence&gt;
         *         &lt;element name="easting" type="{http://metadata.ces.mil/mdr/ns/GSIP/tspi/2.0/core}DecaType"/&gt;
         *         &lt;element name="northing" type="{http://metadata.ces.mil/mdr/ns/GSIP/tspi/2.0/core}DecaType"/&gt;
         *       &lt;/sequence&gt;
         *     &lt;/restriction&gt;
         *   &lt;/complexContent&gt;
         * &lt;/complexType&gt;
         * </pre>
         * 
         * 
         */
        @XmlAccessorType(XmlAccessType.FIELD)
        @XmlType(name = "", propOrder = {
            "easting",
            "northing"
        })
        public static class Decakilometre implements Serializable, Cloneable, CopyTo2, Equals2, HashCode2, MergeFrom2, ToString2
        {

            private final static long serialVersionUID = 1L;
            @XmlSchemaType(name = "integer")
            @NotNull(message = "Decakilometre.easting {javax.validation.constraints.NotNull.message}")
            @DecimalMax("9")
            @DecimalMin("0")
            protected int easting;
            @XmlSchemaType(name = "integer")
            @NotNull(message = "Decakilometre.northing {javax.validation.constraints.NotNull.message}")
            @DecimalMax("9")
            @DecimalMin("0")
            protected int northing;

            /**
             * Gets the value of the easting property.
             * 
             */
            public int getEasting() {
                return easting;
            }

            /**
             * Sets the value of the easting property.
             * 
             */
            public void setEasting(int value) {
                this.easting = value;
            }

            public boolean isSetEasting() {
                return true;
            }

            /**
             * Gets the value of the northing property.
             * 
             */
            public int getNorthing() {
                return northing;
            }

            /**
             * Sets the value of the northing property.
             * 
             */
            public void setNorthing(int value) {
                this.northing = value;
            }

            public boolean isSetNorthing() {
                return true;
            }

            public String toString() {
                final ToStringStrategy2 strategy = JAXBToStringStrategy.INSTANCE;
                final StringBuilder buffer = new StringBuilder();
                append(null, buffer, strategy);
                return buffer.toString();
            }

            public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy2 strategy) {
                strategy.appendStart(locator, this, buffer);
                appendFields(locator, buffer, strategy);
                strategy.appendEnd(locator, this, buffer);
                return buffer;
            }

            public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy2 strategy) {
                {
                    int theEasting;
                    theEasting = this.getEasting();
                    strategy.appendField(locator, this, "easting", buffer, theEasting, true);
                }
                {
                    int theNorthing;
                    theNorthing = this.getNorthing();
                    strategy.appendField(locator, this, "northing", buffer, theNorthing, true);
                }
                return buffer;
            }

            public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy2 strategy) {
                if ((object == null)||(this.getClass()!= object.getClass())) {
                    return false;
                }
                if (this == object) {
                    return true;
                }
                final GridMetrePresentationType.RelativeLocation.Decakilometre that = ((GridMetrePresentationType.RelativeLocation.Decakilometre) object);
                {
                    int lhsEasting;
                    lhsEasting = this.getEasting();
                    int rhsEasting;
                    rhsEasting = that.getEasting();
                    if (!strategy.equals(LocatorUtils.property(thisLocator, "easting", lhsEasting), LocatorUtils.property(thatLocator, "easting", rhsEasting), lhsEasting, rhsEasting, true, true)) {
                        return false;
                    }
                }
                {
                    int lhsNorthing;
                    lhsNorthing = this.getNorthing();
                    int rhsNorthing;
                    rhsNorthing = that.getNorthing();
                    if (!strategy.equals(LocatorUtils.property(thisLocator, "northing", lhsNorthing), LocatorUtils.property(thatLocator, "northing", rhsNorthing), lhsNorthing, rhsNorthing, true, true)) {
                        return false;
                    }
                }
                return true;
            }

            public boolean equals(Object object) {
                final EqualsStrategy2 strategy = JAXBEqualsStrategy.INSTANCE;
                return equals(null, null, object, strategy);
            }

            public int hashCode(ObjectLocator locator, HashCodeStrategy2 strategy) {
                int currentHashCode = 1;
                {
                    int theEasting;
                    theEasting = this.getEasting();
                    currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "easting", theEasting), currentHashCode, theEasting, true);
                }
                {
                    int theNorthing;
                    theNorthing = this.getNorthing();
                    currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "northing", theNorthing), currentHashCode, theNorthing, true);
                }
                return currentHashCode;
            }

            public int hashCode() {
                final HashCodeStrategy2 strategy = JAXBHashCodeStrategy.INSTANCE;
                return this.hashCode(null, strategy);
            }

            public Object clone() {
                return copyTo(createNewInstance());
            }

            public Object copyTo(Object target) {
                final CopyStrategy2 strategy = JAXBCopyStrategy.INSTANCE;
                return copyTo(null, target, strategy);
            }

            public Object copyTo(ObjectLocator locator, Object target, CopyStrategy2 strategy) {
                final Object draftCopy = ((target == null)?createNewInstance():target);
                if (draftCopy instanceof GridMetrePresentationType.RelativeLocation.Decakilometre) {
                    final GridMetrePresentationType.RelativeLocation.Decakilometre copy = ((GridMetrePresentationType.RelativeLocation.Decakilometre) draftCopy);
                    {
                        Boolean eastingShouldBeCopiedAndSet = strategy.shouldBeCopiedAndSet(locator, true);
                        if (eastingShouldBeCopiedAndSet == Boolean.TRUE) {
                            int sourceEasting;
                            sourceEasting = this.getEasting();
                            int copyEasting = strategy.copy(LocatorUtils.property(locator, "easting", sourceEasting), sourceEasting, true);
                            copy.setEasting(copyEasting);
                        } else {
                            if (eastingShouldBeCopiedAndSet == Boolean.FALSE) {
                            }
                        }
                    }
                    {
                        Boolean northingShouldBeCopiedAndSet = strategy.shouldBeCopiedAndSet(locator, true);
                        if (northingShouldBeCopiedAndSet == Boolean.TRUE) {
                            int sourceNorthing;
                            sourceNorthing = this.getNorthing();
                            int copyNorthing = strategy.copy(LocatorUtils.property(locator, "northing", sourceNorthing), sourceNorthing, true);
                            copy.setNorthing(copyNorthing);
                        } else {
                            if (northingShouldBeCopiedAndSet == Boolean.FALSE) {
                            }
                        }
                    }
                }
                return draftCopy;
            }

            public Object createNewInstance() {
                return new GridMetrePresentationType.RelativeLocation.Decakilometre();
            }

            public void mergeFrom(Object left, Object right) {
                final MergeStrategy2 strategy = JAXBMergeStrategy.INSTANCE;
                mergeFrom(null, null, left, right, strategy);
            }

            public void mergeFrom(ObjectLocator leftLocator, ObjectLocator rightLocator, Object left, Object right, MergeStrategy2 strategy) {
                if (right instanceof GridMetrePresentationType.RelativeLocation.Decakilometre) {
                    final GridMetrePresentationType.RelativeLocation.Decakilometre target = this;
                    final GridMetrePresentationType.RelativeLocation.Decakilometre leftObject = ((GridMetrePresentationType.RelativeLocation.Decakilometre) left);
                    final GridMetrePresentationType.RelativeLocation.Decakilometre rightObject = ((GridMetrePresentationType.RelativeLocation.Decakilometre) right);
                    {
                        Boolean eastingShouldBeMergedAndSet = strategy.shouldBeMergedAndSet(leftLocator, rightLocator, true, true);
                        if (eastingShouldBeMergedAndSet == Boolean.TRUE) {
                            int lhsEasting;
                            lhsEasting = leftObject.getEasting();
                            int rhsEasting;
                            rhsEasting = rightObject.getEasting();
                            int mergedEasting = ((int) strategy.merge(LocatorUtils.property(leftLocator, "easting", lhsEasting), LocatorUtils.property(rightLocator, "easting", rhsEasting), lhsEasting, rhsEasting, true, true));
                            target.setEasting(mergedEasting);
                        } else {
                            if (eastingShouldBeMergedAndSet == Boolean.FALSE) {
                            }
                        }
                    }
                    {
                        Boolean northingShouldBeMergedAndSet = strategy.shouldBeMergedAndSet(leftLocator, rightLocator, true, true);
                        if (northingShouldBeMergedAndSet == Boolean.TRUE) {
                            int lhsNorthing;
                            lhsNorthing = leftObject.getNorthing();
                            int rhsNorthing;
                            rhsNorthing = rightObject.getNorthing();
                            int mergedNorthing = ((int) strategy.merge(LocatorUtils.property(leftLocator, "northing", lhsNorthing), LocatorUtils.property(rightLocator, "northing", rhsNorthing), lhsNorthing, rhsNorthing, true, true));
                            target.setNorthing(mergedNorthing);
                        } else {
                            if (northingShouldBeMergedAndSet == Boolean.FALSE) {
                            }
                        }
                    }
                }
            }

        }


        /**
         * <p>Java class for anonymous complex type.
         * 
         * <p>The following schema fragment specifies the expected content contained within this class.
         * 
         * <pre>
         * &lt;complexType&gt;
         *   &lt;complexContent&gt;
         *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
         *       &lt;sequence&gt;
         *         &lt;element name="easting" type="{http://metadata.ces.mil/mdr/ns/GSIP/tspi/2.0/core}DecakiloType"/&gt;
         *         &lt;element name="northing" type="{http://metadata.ces.mil/mdr/ns/GSIP/tspi/2.0/core}DecakiloType"/&gt;
         *       &lt;/sequence&gt;
         *     &lt;/restriction&gt;
         *   &lt;/complexContent&gt;
         * &lt;/complexType&gt;
         * </pre>
         * 
         * 
         */
        @XmlAccessorType(XmlAccessType.FIELD)
        @XmlType(name = "", propOrder = {
            "easting",
            "northing"
        })
        public static class Decametre implements Serializable, Cloneable, CopyTo2, Equals2, HashCode2, MergeFrom2, ToString2
        {

            private final static long serialVersionUID = 1L;
            @XmlSchemaType(name = "integer")
            @NotNull(message = "Decametre.easting {javax.validation.constraints.NotNull.message}")
            @DecimalMax("9999")
            @DecimalMin("0000")
            protected int easting;
            @XmlSchemaType(name = "integer")
            @NotNull(message = "Decametre.northing {javax.validation.constraints.NotNull.message}")
            @DecimalMax("9999")
            @DecimalMin("0000")
            protected int northing;

            /**
             * Gets the value of the easting property.
             * 
             */
            public int getEasting() {
                return easting;
            }

            /**
             * Sets the value of the easting property.
             * 
             */
            public void setEasting(int value) {
                this.easting = value;
            }

            public boolean isSetEasting() {
                return true;
            }

            /**
             * Gets the value of the northing property.
             * 
             */
            public int getNorthing() {
                return northing;
            }

            /**
             * Sets the value of the northing property.
             * 
             */
            public void setNorthing(int value) {
                this.northing = value;
            }

            public boolean isSetNorthing() {
                return true;
            }

            public String toString() {
                final ToStringStrategy2 strategy = JAXBToStringStrategy.INSTANCE;
                final StringBuilder buffer = new StringBuilder();
                append(null, buffer, strategy);
                return buffer.toString();
            }

            public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy2 strategy) {
                strategy.appendStart(locator, this, buffer);
                appendFields(locator, buffer, strategy);
                strategy.appendEnd(locator, this, buffer);
                return buffer;
            }

            public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy2 strategy) {
                {
                    int theEasting;
                    theEasting = this.getEasting();
                    strategy.appendField(locator, this, "easting", buffer, theEasting, true);
                }
                {
                    int theNorthing;
                    theNorthing = this.getNorthing();
                    strategy.appendField(locator, this, "northing", buffer, theNorthing, true);
                }
                return buffer;
            }

            public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy2 strategy) {
                if ((object == null)||(this.getClass()!= object.getClass())) {
                    return false;
                }
                if (this == object) {
                    return true;
                }
                final GridMetrePresentationType.RelativeLocation.Decametre that = ((GridMetrePresentationType.RelativeLocation.Decametre) object);
                {
                    int lhsEasting;
                    lhsEasting = this.getEasting();
                    int rhsEasting;
                    rhsEasting = that.getEasting();
                    if (!strategy.equals(LocatorUtils.property(thisLocator, "easting", lhsEasting), LocatorUtils.property(thatLocator, "easting", rhsEasting), lhsEasting, rhsEasting, true, true)) {
                        return false;
                    }
                }
                {
                    int lhsNorthing;
                    lhsNorthing = this.getNorthing();
                    int rhsNorthing;
                    rhsNorthing = that.getNorthing();
                    if (!strategy.equals(LocatorUtils.property(thisLocator, "northing", lhsNorthing), LocatorUtils.property(thatLocator, "northing", rhsNorthing), lhsNorthing, rhsNorthing, true, true)) {
                        return false;
                    }
                }
                return true;
            }

            public boolean equals(Object object) {
                final EqualsStrategy2 strategy = JAXBEqualsStrategy.INSTANCE;
                return equals(null, null, object, strategy);
            }

            public int hashCode(ObjectLocator locator, HashCodeStrategy2 strategy) {
                int currentHashCode = 1;
                {
                    int theEasting;
                    theEasting = this.getEasting();
                    currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "easting", theEasting), currentHashCode, theEasting, true);
                }
                {
                    int theNorthing;
                    theNorthing = this.getNorthing();
                    currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "northing", theNorthing), currentHashCode, theNorthing, true);
                }
                return currentHashCode;
            }

            public int hashCode() {
                final HashCodeStrategy2 strategy = JAXBHashCodeStrategy.INSTANCE;
                return this.hashCode(null, strategy);
            }

            public Object clone() {
                return copyTo(createNewInstance());
            }

            public Object copyTo(Object target) {
                final CopyStrategy2 strategy = JAXBCopyStrategy.INSTANCE;
                return copyTo(null, target, strategy);
            }

            public Object copyTo(ObjectLocator locator, Object target, CopyStrategy2 strategy) {
                final Object draftCopy = ((target == null)?createNewInstance():target);
                if (draftCopy instanceof GridMetrePresentationType.RelativeLocation.Decametre) {
                    final GridMetrePresentationType.RelativeLocation.Decametre copy = ((GridMetrePresentationType.RelativeLocation.Decametre) draftCopy);
                    {
                        Boolean eastingShouldBeCopiedAndSet = strategy.shouldBeCopiedAndSet(locator, true);
                        if (eastingShouldBeCopiedAndSet == Boolean.TRUE) {
                            int sourceEasting;
                            sourceEasting = this.getEasting();
                            int copyEasting = strategy.copy(LocatorUtils.property(locator, "easting", sourceEasting), sourceEasting, true);
                            copy.setEasting(copyEasting);
                        } else {
                            if (eastingShouldBeCopiedAndSet == Boolean.FALSE) {
                            }
                        }
                    }
                    {
                        Boolean northingShouldBeCopiedAndSet = strategy.shouldBeCopiedAndSet(locator, true);
                        if (northingShouldBeCopiedAndSet == Boolean.TRUE) {
                            int sourceNorthing;
                            sourceNorthing = this.getNorthing();
                            int copyNorthing = strategy.copy(LocatorUtils.property(locator, "northing", sourceNorthing), sourceNorthing, true);
                            copy.setNorthing(copyNorthing);
                        } else {
                            if (northingShouldBeCopiedAndSet == Boolean.FALSE) {
                            }
                        }
                    }
                }
                return draftCopy;
            }

            public Object createNewInstance() {
                return new GridMetrePresentationType.RelativeLocation.Decametre();
            }

            public void mergeFrom(Object left, Object right) {
                final MergeStrategy2 strategy = JAXBMergeStrategy.INSTANCE;
                mergeFrom(null, null, left, right, strategy);
            }

            public void mergeFrom(ObjectLocator leftLocator, ObjectLocator rightLocator, Object left, Object right, MergeStrategy2 strategy) {
                if (right instanceof GridMetrePresentationType.RelativeLocation.Decametre) {
                    final GridMetrePresentationType.RelativeLocation.Decametre target = this;
                    final GridMetrePresentationType.RelativeLocation.Decametre leftObject = ((GridMetrePresentationType.RelativeLocation.Decametre) left);
                    final GridMetrePresentationType.RelativeLocation.Decametre rightObject = ((GridMetrePresentationType.RelativeLocation.Decametre) right);
                    {
                        Boolean eastingShouldBeMergedAndSet = strategy.shouldBeMergedAndSet(leftLocator, rightLocator, true, true);
                        if (eastingShouldBeMergedAndSet == Boolean.TRUE) {
                            int lhsEasting;
                            lhsEasting = leftObject.getEasting();
                            int rhsEasting;
                            rhsEasting = rightObject.getEasting();
                            int mergedEasting = ((int) strategy.merge(LocatorUtils.property(leftLocator, "easting", lhsEasting), LocatorUtils.property(rightLocator, "easting", rhsEasting), lhsEasting, rhsEasting, true, true));
                            target.setEasting(mergedEasting);
                        } else {
                            if (eastingShouldBeMergedAndSet == Boolean.FALSE) {
                            }
                        }
                    }
                    {
                        Boolean northingShouldBeMergedAndSet = strategy.shouldBeMergedAndSet(leftLocator, rightLocator, true, true);
                        if (northingShouldBeMergedAndSet == Boolean.TRUE) {
                            int lhsNorthing;
                            lhsNorthing = leftObject.getNorthing();
                            int rhsNorthing;
                            rhsNorthing = rightObject.getNorthing();
                            int mergedNorthing = ((int) strategy.merge(LocatorUtils.property(leftLocator, "northing", lhsNorthing), LocatorUtils.property(rightLocator, "northing", rhsNorthing), lhsNorthing, rhsNorthing, true, true));
                            target.setNorthing(mergedNorthing);
                        } else {
                            if (northingShouldBeMergedAndSet == Boolean.FALSE) {
                            }
                        }
                    }
                }
            }

        }


        /**
         * <p>Java class for anonymous complex type.
         * 
         * <p>The following schema fragment specifies the expected content contained within this class.
         * 
         * <pre>
         * &lt;complexType&gt;
         *   &lt;complexContent&gt;
         *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
         *       &lt;sequence&gt;
         *         &lt;element name="easting" type="{http://metadata.ces.mil/mdr/ns/GSIP/tspi/2.0/core}KiloType"/&gt;
         *         &lt;element name="northing" type="{http://metadata.ces.mil/mdr/ns/GSIP/tspi/2.0/core}KiloType"/&gt;
         *       &lt;/sequence&gt;
         *     &lt;/restriction&gt;
         *   &lt;/complexContent&gt;
         * &lt;/complexType&gt;
         * </pre>
         * 
         * 
         */
        @XmlAccessorType(XmlAccessType.FIELD)
        @XmlType(name = "", propOrder = {
            "easting",
            "northing"
        })
        public static class Hectometre implements Serializable, Cloneable, CopyTo2, Equals2, HashCode2, MergeFrom2, ToString2
        {

            private final static long serialVersionUID = 1L;
            @XmlSchemaType(name = "integer")
            @NotNull(message = "Hectometre.easting {javax.validation.constraints.NotNull.message}")
            @DecimalMax("999")
            @DecimalMin("000")
            protected int easting;
            @XmlSchemaType(name = "integer")
            @NotNull(message = "Hectometre.northing {javax.validation.constraints.NotNull.message}")
            @DecimalMax("999")
            @DecimalMin("000")
            protected int northing;

            /**
             * Gets the value of the easting property.
             * 
             */
            public int getEasting() {
                return easting;
            }

            /**
             * Sets the value of the easting property.
             * 
             */
            public void setEasting(int value) {
                this.easting = value;
            }

            public boolean isSetEasting() {
                return true;
            }

            /**
             * Gets the value of the northing property.
             * 
             */
            public int getNorthing() {
                return northing;
            }

            /**
             * Sets the value of the northing property.
             * 
             */
            public void setNorthing(int value) {
                this.northing = value;
            }

            public boolean isSetNorthing() {
                return true;
            }

            public String toString() {
                final ToStringStrategy2 strategy = JAXBToStringStrategy.INSTANCE;
                final StringBuilder buffer = new StringBuilder();
                append(null, buffer, strategy);
                return buffer.toString();
            }

            public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy2 strategy) {
                strategy.appendStart(locator, this, buffer);
                appendFields(locator, buffer, strategy);
                strategy.appendEnd(locator, this, buffer);
                return buffer;
            }

            public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy2 strategy) {
                {
                    int theEasting;
                    theEasting = this.getEasting();
                    strategy.appendField(locator, this, "easting", buffer, theEasting, true);
                }
                {
                    int theNorthing;
                    theNorthing = this.getNorthing();
                    strategy.appendField(locator, this, "northing", buffer, theNorthing, true);
                }
                return buffer;
            }

            public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy2 strategy) {
                if ((object == null)||(this.getClass()!= object.getClass())) {
                    return false;
                }
                if (this == object) {
                    return true;
                }
                final GridMetrePresentationType.RelativeLocation.Hectometre that = ((GridMetrePresentationType.RelativeLocation.Hectometre) object);
                {
                    int lhsEasting;
                    lhsEasting = this.getEasting();
                    int rhsEasting;
                    rhsEasting = that.getEasting();
                    if (!strategy.equals(LocatorUtils.property(thisLocator, "easting", lhsEasting), LocatorUtils.property(thatLocator, "easting", rhsEasting), lhsEasting, rhsEasting, true, true)) {
                        return false;
                    }
                }
                {
                    int lhsNorthing;
                    lhsNorthing = this.getNorthing();
                    int rhsNorthing;
                    rhsNorthing = that.getNorthing();
                    if (!strategy.equals(LocatorUtils.property(thisLocator, "northing", lhsNorthing), LocatorUtils.property(thatLocator, "northing", rhsNorthing), lhsNorthing, rhsNorthing, true, true)) {
                        return false;
                    }
                }
                return true;
            }

            public boolean equals(Object object) {
                final EqualsStrategy2 strategy = JAXBEqualsStrategy.INSTANCE;
                return equals(null, null, object, strategy);
            }

            public int hashCode(ObjectLocator locator, HashCodeStrategy2 strategy) {
                int currentHashCode = 1;
                {
                    int theEasting;
                    theEasting = this.getEasting();
                    currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "easting", theEasting), currentHashCode, theEasting, true);
                }
                {
                    int theNorthing;
                    theNorthing = this.getNorthing();
                    currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "northing", theNorthing), currentHashCode, theNorthing, true);
                }
                return currentHashCode;
            }

            public int hashCode() {
                final HashCodeStrategy2 strategy = JAXBHashCodeStrategy.INSTANCE;
                return this.hashCode(null, strategy);
            }

            public Object clone() {
                return copyTo(createNewInstance());
            }

            public Object copyTo(Object target) {
                final CopyStrategy2 strategy = JAXBCopyStrategy.INSTANCE;
                return copyTo(null, target, strategy);
            }

            public Object copyTo(ObjectLocator locator, Object target, CopyStrategy2 strategy) {
                final Object draftCopy = ((target == null)?createNewInstance():target);
                if (draftCopy instanceof GridMetrePresentationType.RelativeLocation.Hectometre) {
                    final GridMetrePresentationType.RelativeLocation.Hectometre copy = ((GridMetrePresentationType.RelativeLocation.Hectometre) draftCopy);
                    {
                        Boolean eastingShouldBeCopiedAndSet = strategy.shouldBeCopiedAndSet(locator, true);
                        if (eastingShouldBeCopiedAndSet == Boolean.TRUE) {
                            int sourceEasting;
                            sourceEasting = this.getEasting();
                            int copyEasting = strategy.copy(LocatorUtils.property(locator, "easting", sourceEasting), sourceEasting, true);
                            copy.setEasting(copyEasting);
                        } else {
                            if (eastingShouldBeCopiedAndSet == Boolean.FALSE) {
                            }
                        }
                    }
                    {
                        Boolean northingShouldBeCopiedAndSet = strategy.shouldBeCopiedAndSet(locator, true);
                        if (northingShouldBeCopiedAndSet == Boolean.TRUE) {
                            int sourceNorthing;
                            sourceNorthing = this.getNorthing();
                            int copyNorthing = strategy.copy(LocatorUtils.property(locator, "northing", sourceNorthing), sourceNorthing, true);
                            copy.setNorthing(copyNorthing);
                        } else {
                            if (northingShouldBeCopiedAndSet == Boolean.FALSE) {
                            }
                        }
                    }
                }
                return draftCopy;
            }

            public Object createNewInstance() {
                return new GridMetrePresentationType.RelativeLocation.Hectometre();
            }

            public void mergeFrom(Object left, Object right) {
                final MergeStrategy2 strategy = JAXBMergeStrategy.INSTANCE;
                mergeFrom(null, null, left, right, strategy);
            }

            public void mergeFrom(ObjectLocator leftLocator, ObjectLocator rightLocator, Object left, Object right, MergeStrategy2 strategy) {
                if (right instanceof GridMetrePresentationType.RelativeLocation.Hectometre) {
                    final GridMetrePresentationType.RelativeLocation.Hectometre target = this;
                    final GridMetrePresentationType.RelativeLocation.Hectometre leftObject = ((GridMetrePresentationType.RelativeLocation.Hectometre) left);
                    final GridMetrePresentationType.RelativeLocation.Hectometre rightObject = ((GridMetrePresentationType.RelativeLocation.Hectometre) right);
                    {
                        Boolean eastingShouldBeMergedAndSet = strategy.shouldBeMergedAndSet(leftLocator, rightLocator, true, true);
                        if (eastingShouldBeMergedAndSet == Boolean.TRUE) {
                            int lhsEasting;
                            lhsEasting = leftObject.getEasting();
                            int rhsEasting;
                            rhsEasting = rightObject.getEasting();
                            int mergedEasting = ((int) strategy.merge(LocatorUtils.property(leftLocator, "easting", lhsEasting), LocatorUtils.property(rightLocator, "easting", rhsEasting), lhsEasting, rhsEasting, true, true));
                            target.setEasting(mergedEasting);
                        } else {
                            if (eastingShouldBeMergedAndSet == Boolean.FALSE) {
                            }
                        }
                    }
                    {
                        Boolean northingShouldBeMergedAndSet = strategy.shouldBeMergedAndSet(leftLocator, rightLocator, true, true);
                        if (northingShouldBeMergedAndSet == Boolean.TRUE) {
                            int lhsNorthing;
                            lhsNorthing = leftObject.getNorthing();
                            int rhsNorthing;
                            rhsNorthing = rightObject.getNorthing();
                            int mergedNorthing = ((int) strategy.merge(LocatorUtils.property(leftLocator, "northing", lhsNorthing), LocatorUtils.property(rightLocator, "northing", rhsNorthing), lhsNorthing, rhsNorthing, true, true));
                            target.setNorthing(mergedNorthing);
                        } else {
                            if (northingShouldBeMergedAndSet == Boolean.FALSE) {
                            }
                        }
                    }
                }
            }

        }


        /**
         * <p>Java class for anonymous complex type.
         * 
         * <p>The following schema fragment specifies the expected content contained within this class.
         * 
         * <pre>
         * &lt;complexType&gt;
         *   &lt;complexContent&gt;
         *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
         *       &lt;sequence&gt;
         *         &lt;element name="easting" type="{http://metadata.ces.mil/mdr/ns/GSIP/tspi/2.0/core}HectoType"/&gt;
         *         &lt;element name="northing" type="{http://metadata.ces.mil/mdr/ns/GSIP/tspi/2.0/core}HectoType"/&gt;
         *       &lt;/sequence&gt;
         *     &lt;/restriction&gt;
         *   &lt;/complexContent&gt;
         * &lt;/complexType&gt;
         * </pre>
         * 
         * 
         */
        @XmlAccessorType(XmlAccessType.FIELD)
        @XmlType(name = "", propOrder = {
            "easting",
            "northing"
        })
        public static class Kilometre implements Serializable, Cloneable, CopyTo2, Equals2, HashCode2, MergeFrom2, ToString2
        {

            private final static long serialVersionUID = 1L;
            @XmlSchemaType(name = "integer")
            @NotNull(message = "Kilometre.easting {javax.validation.constraints.NotNull.message}")
            @DecimalMax("99")
            @DecimalMin("00")
            protected int easting;
            @XmlSchemaType(name = "integer")
            @NotNull(message = "Kilometre.northing {javax.validation.constraints.NotNull.message}")
            @DecimalMax("99")
            @DecimalMin("00")
            protected int northing;

            /**
             * Gets the value of the easting property.
             * 
             */
            public int getEasting() {
                return easting;
            }

            /**
             * Sets the value of the easting property.
             * 
             */
            public void setEasting(int value) {
                this.easting = value;
            }

            public boolean isSetEasting() {
                return true;
            }

            /**
             * Gets the value of the northing property.
             * 
             */
            public int getNorthing() {
                return northing;
            }

            /**
             * Sets the value of the northing property.
             * 
             */
            public void setNorthing(int value) {
                this.northing = value;
            }

            public boolean isSetNorthing() {
                return true;
            }

            public String toString() {
                final ToStringStrategy2 strategy = JAXBToStringStrategy.INSTANCE;
                final StringBuilder buffer = new StringBuilder();
                append(null, buffer, strategy);
                return buffer.toString();
            }

            public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy2 strategy) {
                strategy.appendStart(locator, this, buffer);
                appendFields(locator, buffer, strategy);
                strategy.appendEnd(locator, this, buffer);
                return buffer;
            }

            public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy2 strategy) {
                {
                    int theEasting;
                    theEasting = this.getEasting();
                    strategy.appendField(locator, this, "easting", buffer, theEasting, true);
                }
                {
                    int theNorthing;
                    theNorthing = this.getNorthing();
                    strategy.appendField(locator, this, "northing", buffer, theNorthing, true);
                }
                return buffer;
            }

            public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy2 strategy) {
                if ((object == null)||(this.getClass()!= object.getClass())) {
                    return false;
                }
                if (this == object) {
                    return true;
                }
                final GridMetrePresentationType.RelativeLocation.Kilometre that = ((GridMetrePresentationType.RelativeLocation.Kilometre) object);
                {
                    int lhsEasting;
                    lhsEasting = this.getEasting();
                    int rhsEasting;
                    rhsEasting = that.getEasting();
                    if (!strategy.equals(LocatorUtils.property(thisLocator, "easting", lhsEasting), LocatorUtils.property(thatLocator, "easting", rhsEasting), lhsEasting, rhsEasting, true, true)) {
                        return false;
                    }
                }
                {
                    int lhsNorthing;
                    lhsNorthing = this.getNorthing();
                    int rhsNorthing;
                    rhsNorthing = that.getNorthing();
                    if (!strategy.equals(LocatorUtils.property(thisLocator, "northing", lhsNorthing), LocatorUtils.property(thatLocator, "northing", rhsNorthing), lhsNorthing, rhsNorthing, true, true)) {
                        return false;
                    }
                }
                return true;
            }

            public boolean equals(Object object) {
                final EqualsStrategy2 strategy = JAXBEqualsStrategy.INSTANCE;
                return equals(null, null, object, strategy);
            }

            public int hashCode(ObjectLocator locator, HashCodeStrategy2 strategy) {
                int currentHashCode = 1;
                {
                    int theEasting;
                    theEasting = this.getEasting();
                    currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "easting", theEasting), currentHashCode, theEasting, true);
                }
                {
                    int theNorthing;
                    theNorthing = this.getNorthing();
                    currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "northing", theNorthing), currentHashCode, theNorthing, true);
                }
                return currentHashCode;
            }

            public int hashCode() {
                final HashCodeStrategy2 strategy = JAXBHashCodeStrategy.INSTANCE;
                return this.hashCode(null, strategy);
            }

            public Object clone() {
                return copyTo(createNewInstance());
            }

            public Object copyTo(Object target) {
                final CopyStrategy2 strategy = JAXBCopyStrategy.INSTANCE;
                return copyTo(null, target, strategy);
            }

            public Object copyTo(ObjectLocator locator, Object target, CopyStrategy2 strategy) {
                final Object draftCopy = ((target == null)?createNewInstance():target);
                if (draftCopy instanceof GridMetrePresentationType.RelativeLocation.Kilometre) {
                    final GridMetrePresentationType.RelativeLocation.Kilometre copy = ((GridMetrePresentationType.RelativeLocation.Kilometre) draftCopy);
                    {
                        Boolean eastingShouldBeCopiedAndSet = strategy.shouldBeCopiedAndSet(locator, true);
                        if (eastingShouldBeCopiedAndSet == Boolean.TRUE) {
                            int sourceEasting;
                            sourceEasting = this.getEasting();
                            int copyEasting = strategy.copy(LocatorUtils.property(locator, "easting", sourceEasting), sourceEasting, true);
                            copy.setEasting(copyEasting);
                        } else {
                            if (eastingShouldBeCopiedAndSet == Boolean.FALSE) {
                            }
                        }
                    }
                    {
                        Boolean northingShouldBeCopiedAndSet = strategy.shouldBeCopiedAndSet(locator, true);
                        if (northingShouldBeCopiedAndSet == Boolean.TRUE) {
                            int sourceNorthing;
                            sourceNorthing = this.getNorthing();
                            int copyNorthing = strategy.copy(LocatorUtils.property(locator, "northing", sourceNorthing), sourceNorthing, true);
                            copy.setNorthing(copyNorthing);
                        } else {
                            if (northingShouldBeCopiedAndSet == Boolean.FALSE) {
                            }
                        }
                    }
                }
                return draftCopy;
            }

            public Object createNewInstance() {
                return new GridMetrePresentationType.RelativeLocation.Kilometre();
            }

            public void mergeFrom(Object left, Object right) {
                final MergeStrategy2 strategy = JAXBMergeStrategy.INSTANCE;
                mergeFrom(null, null, left, right, strategy);
            }

            public void mergeFrom(ObjectLocator leftLocator, ObjectLocator rightLocator, Object left, Object right, MergeStrategy2 strategy) {
                if (right instanceof GridMetrePresentationType.RelativeLocation.Kilometre) {
                    final GridMetrePresentationType.RelativeLocation.Kilometre target = this;
                    final GridMetrePresentationType.RelativeLocation.Kilometre leftObject = ((GridMetrePresentationType.RelativeLocation.Kilometre) left);
                    final GridMetrePresentationType.RelativeLocation.Kilometre rightObject = ((GridMetrePresentationType.RelativeLocation.Kilometre) right);
                    {
                        Boolean eastingShouldBeMergedAndSet = strategy.shouldBeMergedAndSet(leftLocator, rightLocator, true, true);
                        if (eastingShouldBeMergedAndSet == Boolean.TRUE) {
                            int lhsEasting;
                            lhsEasting = leftObject.getEasting();
                            int rhsEasting;
                            rhsEasting = rightObject.getEasting();
                            int mergedEasting = ((int) strategy.merge(LocatorUtils.property(leftLocator, "easting", lhsEasting), LocatorUtils.property(rightLocator, "easting", rhsEasting), lhsEasting, rhsEasting, true, true));
                            target.setEasting(mergedEasting);
                        } else {
                            if (eastingShouldBeMergedAndSet == Boolean.FALSE) {
                            }
                        }
                    }
                    {
                        Boolean northingShouldBeMergedAndSet = strategy.shouldBeMergedAndSet(leftLocator, rightLocator, true, true);
                        if (northingShouldBeMergedAndSet == Boolean.TRUE) {
                            int lhsNorthing;
                            lhsNorthing = leftObject.getNorthing();
                            int rhsNorthing;
                            rhsNorthing = rightObject.getNorthing();
                            int mergedNorthing = ((int) strategy.merge(LocatorUtils.property(leftLocator, "northing", lhsNorthing), LocatorUtils.property(rightLocator, "northing", rhsNorthing), lhsNorthing, rhsNorthing, true, true));
                            target.setNorthing(mergedNorthing);
                        } else {
                            if (northingShouldBeMergedAndSet == Boolean.FALSE) {
                            }
                        }
                    }
                }
            }

        }


        /**
         * <p>Java class for anonymous complex type.
         * 
         * <p>The following schema fragment specifies the expected content contained within this class.
         * 
         * <pre>
         * &lt;complexType&gt;
         *   &lt;complexContent&gt;
         *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
         *       &lt;sequence&gt;
         *         &lt;element name="easting" type="{http://metadata.ces.mil/mdr/ns/GSIP/tspi/2.0/core}HectokiloType"/&gt;
         *         &lt;element name="northing" type="{http://metadata.ces.mil/mdr/ns/GSIP/tspi/2.0/core}HectokiloType"/&gt;
         *       &lt;/sequence&gt;
         *     &lt;/restriction&gt;
         *   &lt;/complexContent&gt;
         * &lt;/complexType&gt;
         * </pre>
         * 
         * 
         */
        @XmlAccessorType(XmlAccessType.FIELD)
        @XmlType(name = "", propOrder = {
            "easting",
            "northing"
        })
        public static class Metre implements Serializable, Cloneable, CopyTo2, Equals2, HashCode2, MergeFrom2, ToString2
        {

            private final static long serialVersionUID = 1L;
            @XmlSchemaType(name = "integer")
            @NotNull(message = "Metre.easting {javax.validation.constraints.NotNull.message}")
            @DecimalMax("99999")
            @DecimalMin("00000")
            protected int easting;
            @XmlSchemaType(name = "integer")
            @NotNull(message = "Metre.northing {javax.validation.constraints.NotNull.message}")
            @DecimalMax("99999")
            @DecimalMin("00000")
            protected int northing;

            /**
             * Gets the value of the easting property.
             * 
             */
            public int getEasting() {
                return easting;
            }

            /**
             * Sets the value of the easting property.
             * 
             */
            public void setEasting(int value) {
                this.easting = value;
            }

            public boolean isSetEasting() {
                return true;
            }

            /**
             * Gets the value of the northing property.
             * 
             */
            public int getNorthing() {
                return northing;
            }

            /**
             * Sets the value of the northing property.
             * 
             */
            public void setNorthing(int value) {
                this.northing = value;
            }

            public boolean isSetNorthing() {
                return true;
            }

            public String toString() {
                final ToStringStrategy2 strategy = JAXBToStringStrategy.INSTANCE;
                final StringBuilder buffer = new StringBuilder();
                append(null, buffer, strategy);
                return buffer.toString();
            }

            public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy2 strategy) {
                strategy.appendStart(locator, this, buffer);
                appendFields(locator, buffer, strategy);
                strategy.appendEnd(locator, this, buffer);
                return buffer;
            }

            public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy2 strategy) {
                {
                    int theEasting;
                    theEasting = this.getEasting();
                    strategy.appendField(locator, this, "easting", buffer, theEasting, true);
                }
                {
                    int theNorthing;
                    theNorthing = this.getNorthing();
                    strategy.appendField(locator, this, "northing", buffer, theNorthing, true);
                }
                return buffer;
            }

            public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy2 strategy) {
                if ((object == null)||(this.getClass()!= object.getClass())) {
                    return false;
                }
                if (this == object) {
                    return true;
                }
                final GridMetrePresentationType.RelativeLocation.Metre that = ((GridMetrePresentationType.RelativeLocation.Metre) object);
                {
                    int lhsEasting;
                    lhsEasting = this.getEasting();
                    int rhsEasting;
                    rhsEasting = that.getEasting();
                    if (!strategy.equals(LocatorUtils.property(thisLocator, "easting", lhsEasting), LocatorUtils.property(thatLocator, "easting", rhsEasting), lhsEasting, rhsEasting, true, true)) {
                        return false;
                    }
                }
                {
                    int lhsNorthing;
                    lhsNorthing = this.getNorthing();
                    int rhsNorthing;
                    rhsNorthing = that.getNorthing();
                    if (!strategy.equals(LocatorUtils.property(thisLocator, "northing", lhsNorthing), LocatorUtils.property(thatLocator, "northing", rhsNorthing), lhsNorthing, rhsNorthing, true, true)) {
                        return false;
                    }
                }
                return true;
            }

            public boolean equals(Object object) {
                final EqualsStrategy2 strategy = JAXBEqualsStrategy.INSTANCE;
                return equals(null, null, object, strategy);
            }

            public int hashCode(ObjectLocator locator, HashCodeStrategy2 strategy) {
                int currentHashCode = 1;
                {
                    int theEasting;
                    theEasting = this.getEasting();
                    currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "easting", theEasting), currentHashCode, theEasting, true);
                }
                {
                    int theNorthing;
                    theNorthing = this.getNorthing();
                    currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "northing", theNorthing), currentHashCode, theNorthing, true);
                }
                return currentHashCode;
            }

            public int hashCode() {
                final HashCodeStrategy2 strategy = JAXBHashCodeStrategy.INSTANCE;
                return this.hashCode(null, strategy);
            }

            public Object clone() {
                return copyTo(createNewInstance());
            }

            public Object copyTo(Object target) {
                final CopyStrategy2 strategy = JAXBCopyStrategy.INSTANCE;
                return copyTo(null, target, strategy);
            }

            public Object copyTo(ObjectLocator locator, Object target, CopyStrategy2 strategy) {
                final Object draftCopy = ((target == null)?createNewInstance():target);
                if (draftCopy instanceof GridMetrePresentationType.RelativeLocation.Metre) {
                    final GridMetrePresentationType.RelativeLocation.Metre copy = ((GridMetrePresentationType.RelativeLocation.Metre) draftCopy);
                    {
                        Boolean eastingShouldBeCopiedAndSet = strategy.shouldBeCopiedAndSet(locator, true);
                        if (eastingShouldBeCopiedAndSet == Boolean.TRUE) {
                            int sourceEasting;
                            sourceEasting = this.getEasting();
                            int copyEasting = strategy.copy(LocatorUtils.property(locator, "easting", sourceEasting), sourceEasting, true);
                            copy.setEasting(copyEasting);
                        } else {
                            if (eastingShouldBeCopiedAndSet == Boolean.FALSE) {
                            }
                        }
                    }
                    {
                        Boolean northingShouldBeCopiedAndSet = strategy.shouldBeCopiedAndSet(locator, true);
                        if (northingShouldBeCopiedAndSet == Boolean.TRUE) {
                            int sourceNorthing;
                            sourceNorthing = this.getNorthing();
                            int copyNorthing = strategy.copy(LocatorUtils.property(locator, "northing", sourceNorthing), sourceNorthing, true);
                            copy.setNorthing(copyNorthing);
                        } else {
                            if (northingShouldBeCopiedAndSet == Boolean.FALSE) {
                            }
                        }
                    }
                }
                return draftCopy;
            }

            public Object createNewInstance() {
                return new GridMetrePresentationType.RelativeLocation.Metre();
            }

            public void mergeFrom(Object left, Object right) {
                final MergeStrategy2 strategy = JAXBMergeStrategy.INSTANCE;
                mergeFrom(null, null, left, right, strategy);
            }

            public void mergeFrom(ObjectLocator leftLocator, ObjectLocator rightLocator, Object left, Object right, MergeStrategy2 strategy) {
                if (right instanceof GridMetrePresentationType.RelativeLocation.Metre) {
                    final GridMetrePresentationType.RelativeLocation.Metre target = this;
                    final GridMetrePresentationType.RelativeLocation.Metre leftObject = ((GridMetrePresentationType.RelativeLocation.Metre) left);
                    final GridMetrePresentationType.RelativeLocation.Metre rightObject = ((GridMetrePresentationType.RelativeLocation.Metre) right);
                    {
                        Boolean eastingShouldBeMergedAndSet = strategy.shouldBeMergedAndSet(leftLocator, rightLocator, true, true);
                        if (eastingShouldBeMergedAndSet == Boolean.TRUE) {
                            int lhsEasting;
                            lhsEasting = leftObject.getEasting();
                            int rhsEasting;
                            rhsEasting = rightObject.getEasting();
                            int mergedEasting = ((int) strategy.merge(LocatorUtils.property(leftLocator, "easting", lhsEasting), LocatorUtils.property(rightLocator, "easting", rhsEasting), lhsEasting, rhsEasting, true, true));
                            target.setEasting(mergedEasting);
                        } else {
                            if (eastingShouldBeMergedAndSet == Boolean.FALSE) {
                            }
                        }
                    }
                    {
                        Boolean northingShouldBeMergedAndSet = strategy.shouldBeMergedAndSet(leftLocator, rightLocator, true, true);
                        if (northingShouldBeMergedAndSet == Boolean.TRUE) {
                            int lhsNorthing;
                            lhsNorthing = leftObject.getNorthing();
                            int rhsNorthing;
                            rhsNorthing = rightObject.getNorthing();
                            int mergedNorthing = ((int) strategy.merge(LocatorUtils.property(leftLocator, "northing", lhsNorthing), LocatorUtils.property(rightLocator, "northing", rhsNorthing), lhsNorthing, rhsNorthing, true, true));
                            target.setNorthing(mergedNorthing);
                        } else {
                            if (northingShouldBeMergedAndSet == Boolean.FALSE) {
                            }
                        }
                    }
                }
            }

        }

    }

}
