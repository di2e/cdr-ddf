//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.11 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2016.07.27 at 04:06:37 PM EDT 
//


package mil.ces.metadata.mdr.ns.gsip.tspi._2_0.core;

import java.io.Serializable;
import javax.validation.Valid;
import javax.validation.constraints.DecimalMax;
import javax.validation.constraints.DecimalMin;
import javax.validation.constraints.NotNull;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlSchemaType;
import javax.xml.bind.annotation.XmlType;
import org.jvnet.jaxb2_commons.lang.CopyStrategy2;
import org.jvnet.jaxb2_commons.lang.CopyTo2;
import org.jvnet.jaxb2_commons.lang.Equals2;
import org.jvnet.jaxb2_commons.lang.EqualsStrategy2;
import org.jvnet.jaxb2_commons.lang.HashCode2;
import org.jvnet.jaxb2_commons.lang.HashCodeStrategy2;
import org.jvnet.jaxb2_commons.lang.JAXBCopyStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBEqualsStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBHashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBMergeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBToStringStrategy;
import org.jvnet.jaxb2_commons.lang.MergeFrom2;
import org.jvnet.jaxb2_commons.lang.MergeStrategy2;
import org.jvnet.jaxb2_commons.lang.ToString2;
import org.jvnet.jaxb2_commons.lang.ToStringStrategy2;
import org.jvnet.jaxb2_commons.locator.ObjectLocator;
import org.jvnet.jaxb2_commons.locator.util.LocatorUtils;


/**
 * Sexagesimal Presentation Type: A datatype representing a sexagesimal position presentation based on 60 arc seconds comprising an arc minute and 60 arc minutes comprising an arc degree that is widely employed as a basis for position reporting. [desc] The presentation consists of two component strings, one each for the geodetic latitude and longitude coordinates, which are identical excepting differences in the maximum value of latitude (90 arc degrees) and longitude (180 arc degrees) and the allowed value of hemisphere (North and South, versus East and West).
 * 
 * <p>Java class for SexagesimalPresentationType complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="SexagesimalPresentationType"&gt;
 *   &lt;complexContent&gt;
 *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
 *       &lt;sequence&gt;
 *         &lt;element name="geoDegree"&gt;
 *           &lt;complexType&gt;
 *             &lt;complexContent&gt;
 *               &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
 *                 &lt;sequence&gt;
 *                   &lt;element name="latitude" type="{http://metadata.ces.mil/mdr/ns/GSIP/tspi/2.0/core}GeoLatitudeDegreeType"/&gt;
 *                   &lt;element name="longitude" type="{http://metadata.ces.mil/mdr/ns/GSIP/tspi/2.0/core}GeoLongitudeDegreeType"/&gt;
 *                 &lt;/sequence&gt;
 *               &lt;/restriction&gt;
 *             &lt;/complexContent&gt;
 *           &lt;/complexType&gt;
 *         &lt;/element&gt;
 *         &lt;element name="geoDegreeFraction" minOccurs="0"&gt;
 *           &lt;complexType&gt;
 *             &lt;complexContent&gt;
 *               &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
 *                 &lt;choice&gt;
 *                   &lt;element name="decidegree"&gt;
 *                     &lt;complexType&gt;
 *                       &lt;complexContent&gt;
 *                         &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
 *                           &lt;sequence&gt;
 *                             &lt;element name="latitude" type="{http://metadata.ces.mil/mdr/ns/GSIP/tspi/2.0/core}DecaType"/&gt;
 *                             &lt;element name="longitude" type="{http://metadata.ces.mil/mdr/ns/GSIP/tspi/2.0/core}DecaType"/&gt;
 *                           &lt;/sequence&gt;
 *                         &lt;/restriction&gt;
 *                       &lt;/complexContent&gt;
 *                     &lt;/complexType&gt;
 *                   &lt;/element&gt;
 *                   &lt;element name="centidegree"&gt;
 *                     &lt;complexType&gt;
 *                       &lt;complexContent&gt;
 *                         &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
 *                           &lt;sequence&gt;
 *                             &lt;element name="latitude" type="{http://metadata.ces.mil/mdr/ns/GSIP/tspi/2.0/core}HectoType"/&gt;
 *                             &lt;element name="longitude" type="{http://metadata.ces.mil/mdr/ns/GSIP/tspi/2.0/core}HectoType"/&gt;
 *                           &lt;/sequence&gt;
 *                         &lt;/restriction&gt;
 *                       &lt;/complexContent&gt;
 *                     &lt;/complexType&gt;
 *                   &lt;/element&gt;
 *                   &lt;element name="millidegree"&gt;
 *                     &lt;complexType&gt;
 *                       &lt;complexContent&gt;
 *                         &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
 *                           &lt;sequence&gt;
 *                             &lt;element name="latitude" type="{http://metadata.ces.mil/mdr/ns/GSIP/tspi/2.0/core}KiloType"/&gt;
 *                             &lt;element name="longitude" type="{http://metadata.ces.mil/mdr/ns/GSIP/tspi/2.0/core}KiloType"/&gt;
 *                           &lt;/sequence&gt;
 *                         &lt;/restriction&gt;
 *                       &lt;/complexContent&gt;
 *                     &lt;/complexType&gt;
 *                   &lt;/element&gt;
 *                   &lt;element name="decimillidegree"&gt;
 *                     &lt;complexType&gt;
 *                       &lt;complexContent&gt;
 *                         &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
 *                           &lt;sequence&gt;
 *                             &lt;element name="latitude" type="{http://metadata.ces.mil/mdr/ns/GSIP/tspi/2.0/core}DecakiloType"/&gt;
 *                             &lt;element name="longitude" type="{http://metadata.ces.mil/mdr/ns/GSIP/tspi/2.0/core}DecakiloType"/&gt;
 *                           &lt;/sequence&gt;
 *                         &lt;/restriction&gt;
 *                       &lt;/complexContent&gt;
 *                     &lt;/complexType&gt;
 *                   &lt;/element&gt;
 *                   &lt;element name="centimillidegree"&gt;
 *                     &lt;complexType&gt;
 *                       &lt;complexContent&gt;
 *                         &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
 *                           &lt;sequence&gt;
 *                             &lt;element name="latitude" type="{http://metadata.ces.mil/mdr/ns/GSIP/tspi/2.0/core}HectokiloType"/&gt;
 *                             &lt;element name="longitude" type="{http://metadata.ces.mil/mdr/ns/GSIP/tspi/2.0/core}HectokiloType"/&gt;
 *                           &lt;/sequence&gt;
 *                         &lt;/restriction&gt;
 *                       &lt;/complexContent&gt;
 *                     &lt;/complexType&gt;
 *                   &lt;/element&gt;
 *                   &lt;element name="microdegree"&gt;
 *                     &lt;complexType&gt;
 *                       &lt;complexContent&gt;
 *                         &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
 *                           &lt;sequence&gt;
 *                             &lt;element name="latitude" type="{http://metadata.ces.mil/mdr/ns/GSIP/tspi/2.0/core}MegaType"/&gt;
 *                             &lt;element name="longitude" type="{http://metadata.ces.mil/mdr/ns/GSIP/tspi/2.0/core}MegaType"/&gt;
 *                           &lt;/sequence&gt;
 *                         &lt;/restriction&gt;
 *                       &lt;/complexContent&gt;
 *                     &lt;/complexType&gt;
 *                   &lt;/element&gt;
 *                 &lt;/choice&gt;
 *               &lt;/restriction&gt;
 *             &lt;/complexContent&gt;
 *           &lt;/complexType&gt;
 *         &lt;/element&gt;
 *         &lt;element name="geoMinute" minOccurs="0"&gt;
 *           &lt;complexType&gt;
 *             &lt;complexContent&gt;
 *               &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
 *                 &lt;sequence&gt;
 *                   &lt;element name="latitude" type="{http://metadata.ces.mil/mdr/ns/GSIP/tspi/2.0/core}SexagesimalType"/&gt;
 *                   &lt;element name="longitude" type="{http://metadata.ces.mil/mdr/ns/GSIP/tspi/2.0/core}SexagesimalType"/&gt;
 *                 &lt;/sequence&gt;
 *               &lt;/restriction&gt;
 *             &lt;/complexContent&gt;
 *           &lt;/complexType&gt;
 *         &lt;/element&gt;
 *         &lt;element name="geoMinuteFraction" minOccurs="0"&gt;
 *           &lt;complexType&gt;
 *             &lt;complexContent&gt;
 *               &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
 *                 &lt;choice&gt;
 *                   &lt;element name="deciminute"&gt;
 *                     &lt;complexType&gt;
 *                       &lt;complexContent&gt;
 *                         &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
 *                           &lt;sequence&gt;
 *                             &lt;element name="latitude" type="{http://metadata.ces.mil/mdr/ns/GSIP/tspi/2.0/core}DecaType"/&gt;
 *                             &lt;element name="longitude" type="{http://metadata.ces.mil/mdr/ns/GSIP/tspi/2.0/core}DecaType"/&gt;
 *                           &lt;/sequence&gt;
 *                         &lt;/restriction&gt;
 *                       &lt;/complexContent&gt;
 *                     &lt;/complexType&gt;
 *                   &lt;/element&gt;
 *                   &lt;element name="centiminute"&gt;
 *                     &lt;complexType&gt;
 *                       &lt;complexContent&gt;
 *                         &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
 *                           &lt;sequence&gt;
 *                             &lt;element name="latitude" type="{http://metadata.ces.mil/mdr/ns/GSIP/tspi/2.0/core}HectoType"/&gt;
 *                             &lt;element name="longitude" type="{http://metadata.ces.mil/mdr/ns/GSIP/tspi/2.0/core}HectoType"/&gt;
 *                           &lt;/sequence&gt;
 *                         &lt;/restriction&gt;
 *                       &lt;/complexContent&gt;
 *                     &lt;/complexType&gt;
 *                   &lt;/element&gt;
 *                   &lt;element name="milliminute"&gt;
 *                     &lt;complexType&gt;
 *                       &lt;complexContent&gt;
 *                         &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
 *                           &lt;sequence&gt;
 *                             &lt;element name="latitude" type="{http://metadata.ces.mil/mdr/ns/GSIP/tspi/2.0/core}KiloType"/&gt;
 *                             &lt;element name="longitude" type="{http://metadata.ces.mil/mdr/ns/GSIP/tspi/2.0/core}KiloType"/&gt;
 *                           &lt;/sequence&gt;
 *                         &lt;/restriction&gt;
 *                       &lt;/complexContent&gt;
 *                     &lt;/complexType&gt;
 *                   &lt;/element&gt;
 *                   &lt;element name="decimilliminute"&gt;
 *                     &lt;complexType&gt;
 *                       &lt;complexContent&gt;
 *                         &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
 *                           &lt;sequence&gt;
 *                             &lt;element name="latitude" type="{http://metadata.ces.mil/mdr/ns/GSIP/tspi/2.0/core}DecakiloType"/&gt;
 *                             &lt;element name="longitude" type="{http://metadata.ces.mil/mdr/ns/GSIP/tspi/2.0/core}DecakiloType"/&gt;
 *                           &lt;/sequence&gt;
 *                         &lt;/restriction&gt;
 *                       &lt;/complexContent&gt;
 *                     &lt;/complexType&gt;
 *                   &lt;/element&gt;
 *                 &lt;/choice&gt;
 *               &lt;/restriction&gt;
 *             &lt;/complexContent&gt;
 *           &lt;/complexType&gt;
 *         &lt;/element&gt;
 *         &lt;element name="geoSecond" minOccurs="0"&gt;
 *           &lt;complexType&gt;
 *             &lt;complexContent&gt;
 *               &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
 *                 &lt;sequence&gt;
 *                   &lt;element name="latitude" type="{http://metadata.ces.mil/mdr/ns/GSIP/tspi/2.0/core}SexagesimalType"/&gt;
 *                   &lt;element name="longitude" type="{http://metadata.ces.mil/mdr/ns/GSIP/tspi/2.0/core}SexagesimalType"/&gt;
 *                 &lt;/sequence&gt;
 *               &lt;/restriction&gt;
 *             &lt;/complexContent&gt;
 *           &lt;/complexType&gt;
 *         &lt;/element&gt;
 *         &lt;element name="geoSecondFraction" minOccurs="0"&gt;
 *           &lt;complexType&gt;
 *             &lt;complexContent&gt;
 *               &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
 *                 &lt;choice&gt;
 *                   &lt;element name="decisecond"&gt;
 *                     &lt;complexType&gt;
 *                       &lt;complexContent&gt;
 *                         &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
 *                           &lt;sequence&gt;
 *                             &lt;element name="latitude" type="{http://metadata.ces.mil/mdr/ns/GSIP/tspi/2.0/core}DecaType"/&gt;
 *                             &lt;element name="longitude" type="{http://metadata.ces.mil/mdr/ns/GSIP/tspi/2.0/core}DecaType"/&gt;
 *                           &lt;/sequence&gt;
 *                         &lt;/restriction&gt;
 *                       &lt;/complexContent&gt;
 *                     &lt;/complexType&gt;
 *                   &lt;/element&gt;
 *                   &lt;element name="centisecond"&gt;
 *                     &lt;complexType&gt;
 *                       &lt;complexContent&gt;
 *                         &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
 *                           &lt;sequence&gt;
 *                             &lt;element name="latitude" type="{http://metadata.ces.mil/mdr/ns/GSIP/tspi/2.0/core}HectoType"/&gt;
 *                             &lt;element name="longitude" type="{http://metadata.ces.mil/mdr/ns/GSIP/tspi/2.0/core}HectoType"/&gt;
 *                           &lt;/sequence&gt;
 *                         &lt;/restriction&gt;
 *                       &lt;/complexContent&gt;
 *                     &lt;/complexType&gt;
 *                   &lt;/element&gt;
 *                   &lt;element name="millisecond"&gt;
 *                     &lt;complexType&gt;
 *                       &lt;complexContent&gt;
 *                         &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
 *                           &lt;sequence&gt;
 *                             &lt;element name="latitude" type="{http://metadata.ces.mil/mdr/ns/GSIP/tspi/2.0/core}KiloType"/&gt;
 *                             &lt;element name="longitude" type="{http://metadata.ces.mil/mdr/ns/GSIP/tspi/2.0/core}KiloType"/&gt;
 *                           &lt;/sequence&gt;
 *                         &lt;/restriction&gt;
 *                       &lt;/complexContent&gt;
 *                     &lt;/complexType&gt;
 *                   &lt;/element&gt;
 *                 &lt;/choice&gt;
 *               &lt;/restriction&gt;
 *             &lt;/complexContent&gt;
 *           &lt;/complexType&gt;
 *         &lt;/element&gt;
 *         &lt;element name="geoLatHemisphere" type="{http://metadata.ces.mil/mdr/ns/GSIP/tspi/2.0/core}LatitudeHemisphereType"/&gt;
 *         &lt;element name="geoLongHemisphere" type="{http://metadata.ces.mil/mdr/ns/GSIP/tspi/2.0/core}LongitudeHemisphereType"/&gt;
 *         &lt;element name="radixPointMark" type="{http://metadata.ces.mil/mdr/ns/GSIP/tspi/2.0/core}RadixPointMarkType" minOccurs="0"/&gt;
 *       &lt;/sequence&gt;
 *     &lt;/restriction&gt;
 *   &lt;/complexContent&gt;
 * &lt;/complexType&gt;
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "SexagesimalPresentationType", propOrder = {
    "geoDegree",
    "geoDegreeFraction",
    "geoMinute",
    "geoMinuteFraction",
    "geoSecond",
    "geoSecondFraction",
    "geoLatHemisphere",
    "geoLongHemisphere",
    "radixPointMark"
})
public class SexagesimalPresentationType implements Serializable, Cloneable, CopyTo2, Equals2, HashCode2, MergeFrom2, ToString2
{

    private final static long serialVersionUID = 1L;
    @XmlElement(required = true)
    @NotNull(message = "SexagesimalPresentationType.geoDegree {javax.validation.constraints.NotNull.message}")
    @Valid
    protected SexagesimalPresentationType.GeoDegree geoDegree;
    @Valid
    protected SexagesimalPresentationType.GeoDegreeFraction geoDegreeFraction;
    @Valid
    protected SexagesimalPresentationType.GeoMinute geoMinute;
    @Valid
    protected SexagesimalPresentationType.GeoMinuteFraction geoMinuteFraction;
    @Valid
    protected SexagesimalPresentationType.GeoSecond geoSecond;
    @Valid
    protected SexagesimalPresentationType.GeoSecondFraction geoSecondFraction;
    @XmlElement(required = true)
    @XmlSchemaType(name = "string")
    @NotNull(message = "SexagesimalPresentationType.geoLatHemisphere {javax.validation.constraints.NotNull.message}")
    protected LatitudeHemisphereType geoLatHemisphere;
    @XmlElement(required = true)
    @XmlSchemaType(name = "string")
    @NotNull(message = "SexagesimalPresentationType.geoLongHemisphere {javax.validation.constraints.NotNull.message}")
    protected LongitudeHemisphereType geoLongHemisphere;
    @XmlElement(defaultValue = ".")
    @XmlSchemaType(name = "string")
    protected RadixPointMarkType radixPointMark;

    /**
     * Gets the value of the geoDegree property.
     * 
     * @return
     *     possible object is
     *     {@link SexagesimalPresentationType.GeoDegree }
     *     
     */
    public SexagesimalPresentationType.GeoDegree getGeoDegree() {
        return geoDegree;
    }

    /**
     * Sets the value of the geoDegree property.
     * 
     * @param value
     *     allowed object is
     *     {@link SexagesimalPresentationType.GeoDegree }
     *     
     */
    public void setGeoDegree(SexagesimalPresentationType.GeoDegree value) {
        this.geoDegree = value;
    }

    public boolean isSetGeoDegree() {
        return (this.geoDegree!= null);
    }

    /**
     * Gets the value of the geoDegreeFraction property.
     * 
     * @return
     *     possible object is
     *     {@link SexagesimalPresentationType.GeoDegreeFraction }
     *     
     */
    public SexagesimalPresentationType.GeoDegreeFraction getGeoDegreeFraction() {
        return geoDegreeFraction;
    }

    /**
     * Sets the value of the geoDegreeFraction property.
     * 
     * @param value
     *     allowed object is
     *     {@link SexagesimalPresentationType.GeoDegreeFraction }
     *     
     */
    public void setGeoDegreeFraction(SexagesimalPresentationType.GeoDegreeFraction value) {
        this.geoDegreeFraction = value;
    }

    public boolean isSetGeoDegreeFraction() {
        return (this.geoDegreeFraction!= null);
    }

    /**
     * Gets the value of the geoMinute property.
     * 
     * @return
     *     possible object is
     *     {@link SexagesimalPresentationType.GeoMinute }
     *     
     */
    public SexagesimalPresentationType.GeoMinute getGeoMinute() {
        return geoMinute;
    }

    /**
     * Sets the value of the geoMinute property.
     * 
     * @param value
     *     allowed object is
     *     {@link SexagesimalPresentationType.GeoMinute }
     *     
     */
    public void setGeoMinute(SexagesimalPresentationType.GeoMinute value) {
        this.geoMinute = value;
    }

    public boolean isSetGeoMinute() {
        return (this.geoMinute!= null);
    }

    /**
     * Gets the value of the geoMinuteFraction property.
     * 
     * @return
     *     possible object is
     *     {@link SexagesimalPresentationType.GeoMinuteFraction }
     *     
     */
    public SexagesimalPresentationType.GeoMinuteFraction getGeoMinuteFraction() {
        return geoMinuteFraction;
    }

    /**
     * Sets the value of the geoMinuteFraction property.
     * 
     * @param value
     *     allowed object is
     *     {@link SexagesimalPresentationType.GeoMinuteFraction }
     *     
     */
    public void setGeoMinuteFraction(SexagesimalPresentationType.GeoMinuteFraction value) {
        this.geoMinuteFraction = value;
    }

    public boolean isSetGeoMinuteFraction() {
        return (this.geoMinuteFraction!= null);
    }

    /**
     * Gets the value of the geoSecond property.
     * 
     * @return
     *     possible object is
     *     {@link SexagesimalPresentationType.GeoSecond }
     *     
     */
    public SexagesimalPresentationType.GeoSecond getGeoSecond() {
        return geoSecond;
    }

    /**
     * Sets the value of the geoSecond property.
     * 
     * @param value
     *     allowed object is
     *     {@link SexagesimalPresentationType.GeoSecond }
     *     
     */
    public void setGeoSecond(SexagesimalPresentationType.GeoSecond value) {
        this.geoSecond = value;
    }

    public boolean isSetGeoSecond() {
        return (this.geoSecond!= null);
    }

    /**
     * Gets the value of the geoSecondFraction property.
     * 
     * @return
     *     possible object is
     *     {@link SexagesimalPresentationType.GeoSecondFraction }
     *     
     */
    public SexagesimalPresentationType.GeoSecondFraction getGeoSecondFraction() {
        return geoSecondFraction;
    }

    /**
     * Sets the value of the geoSecondFraction property.
     * 
     * @param value
     *     allowed object is
     *     {@link SexagesimalPresentationType.GeoSecondFraction }
     *     
     */
    public void setGeoSecondFraction(SexagesimalPresentationType.GeoSecondFraction value) {
        this.geoSecondFraction = value;
    }

    public boolean isSetGeoSecondFraction() {
        return (this.geoSecondFraction!= null);
    }

    /**
     * Gets the value of the geoLatHemisphere property.
     * 
     * @return
     *     possible object is
     *     {@link LatitudeHemisphereType }
     *     
     */
    public LatitudeHemisphereType getGeoLatHemisphere() {
        return geoLatHemisphere;
    }

    /**
     * Sets the value of the geoLatHemisphere property.
     * 
     * @param value
     *     allowed object is
     *     {@link LatitudeHemisphereType }
     *     
     */
    public void setGeoLatHemisphere(LatitudeHemisphereType value) {
        this.geoLatHemisphere = value;
    }

    public boolean isSetGeoLatHemisphere() {
        return (this.geoLatHemisphere!= null);
    }

    /**
     * Gets the value of the geoLongHemisphere property.
     * 
     * @return
     *     possible object is
     *     {@link LongitudeHemisphereType }
     *     
     */
    public LongitudeHemisphereType getGeoLongHemisphere() {
        return geoLongHemisphere;
    }

    /**
     * Sets the value of the geoLongHemisphere property.
     * 
     * @param value
     *     allowed object is
     *     {@link LongitudeHemisphereType }
     *     
     */
    public void setGeoLongHemisphere(LongitudeHemisphereType value) {
        this.geoLongHemisphere = value;
    }

    public boolean isSetGeoLongHemisphere() {
        return (this.geoLongHemisphere!= null);
    }

    /**
     * Gets the value of the radixPointMark property.
     * 
     * @return
     *     possible object is
     *     {@link RadixPointMarkType }
     *     
     */
    public RadixPointMarkType getRadixPointMark() {
        return radixPointMark;
    }

    /**
     * Sets the value of the radixPointMark property.
     * 
     * @param value
     *     allowed object is
     *     {@link RadixPointMarkType }
     *     
     */
    public void setRadixPointMark(RadixPointMarkType value) {
        this.radixPointMark = value;
    }

    public boolean isSetRadixPointMark() {
        return (this.radixPointMark!= null);
    }

    public String toString() {
        final ToStringStrategy2 strategy = JAXBToStringStrategy.INSTANCE;
        final StringBuilder buffer = new StringBuilder();
        append(null, buffer, strategy);
        return buffer.toString();
    }

    public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy2 strategy) {
        strategy.appendStart(locator, this, buffer);
        appendFields(locator, buffer, strategy);
        strategy.appendEnd(locator, this, buffer);
        return buffer;
    }

    public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy2 strategy) {
        {
            SexagesimalPresentationType.GeoDegree theGeoDegree;
            theGeoDegree = this.getGeoDegree();
            strategy.appendField(locator, this, "geoDegree", buffer, theGeoDegree, this.isSetGeoDegree());
        }
        {
            SexagesimalPresentationType.GeoDegreeFraction theGeoDegreeFraction;
            theGeoDegreeFraction = this.getGeoDegreeFraction();
            strategy.appendField(locator, this, "geoDegreeFraction", buffer, theGeoDegreeFraction, this.isSetGeoDegreeFraction());
        }
        {
            SexagesimalPresentationType.GeoMinute theGeoMinute;
            theGeoMinute = this.getGeoMinute();
            strategy.appendField(locator, this, "geoMinute", buffer, theGeoMinute, this.isSetGeoMinute());
        }
        {
            SexagesimalPresentationType.GeoMinuteFraction theGeoMinuteFraction;
            theGeoMinuteFraction = this.getGeoMinuteFraction();
            strategy.appendField(locator, this, "geoMinuteFraction", buffer, theGeoMinuteFraction, this.isSetGeoMinuteFraction());
        }
        {
            SexagesimalPresentationType.GeoSecond theGeoSecond;
            theGeoSecond = this.getGeoSecond();
            strategy.appendField(locator, this, "geoSecond", buffer, theGeoSecond, this.isSetGeoSecond());
        }
        {
            SexagesimalPresentationType.GeoSecondFraction theGeoSecondFraction;
            theGeoSecondFraction = this.getGeoSecondFraction();
            strategy.appendField(locator, this, "geoSecondFraction", buffer, theGeoSecondFraction, this.isSetGeoSecondFraction());
        }
        {
            LatitudeHemisphereType theGeoLatHemisphere;
            theGeoLatHemisphere = this.getGeoLatHemisphere();
            strategy.appendField(locator, this, "geoLatHemisphere", buffer, theGeoLatHemisphere, this.isSetGeoLatHemisphere());
        }
        {
            LongitudeHemisphereType theGeoLongHemisphere;
            theGeoLongHemisphere = this.getGeoLongHemisphere();
            strategy.appendField(locator, this, "geoLongHemisphere", buffer, theGeoLongHemisphere, this.isSetGeoLongHemisphere());
        }
        {
            RadixPointMarkType theRadixPointMark;
            theRadixPointMark = this.getRadixPointMark();
            strategy.appendField(locator, this, "radixPointMark", buffer, theRadixPointMark, this.isSetRadixPointMark());
        }
        return buffer;
    }

    public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy2 strategy) {
        if ((object == null)||(this.getClass()!= object.getClass())) {
            return false;
        }
        if (this == object) {
            return true;
        }
        final SexagesimalPresentationType that = ((SexagesimalPresentationType) object);
        {
            SexagesimalPresentationType.GeoDegree lhsGeoDegree;
            lhsGeoDegree = this.getGeoDegree();
            SexagesimalPresentationType.GeoDegree rhsGeoDegree;
            rhsGeoDegree = that.getGeoDegree();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "geoDegree", lhsGeoDegree), LocatorUtils.property(thatLocator, "geoDegree", rhsGeoDegree), lhsGeoDegree, rhsGeoDegree, this.isSetGeoDegree(), that.isSetGeoDegree())) {
                return false;
            }
        }
        {
            SexagesimalPresentationType.GeoDegreeFraction lhsGeoDegreeFraction;
            lhsGeoDegreeFraction = this.getGeoDegreeFraction();
            SexagesimalPresentationType.GeoDegreeFraction rhsGeoDegreeFraction;
            rhsGeoDegreeFraction = that.getGeoDegreeFraction();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "geoDegreeFraction", lhsGeoDegreeFraction), LocatorUtils.property(thatLocator, "geoDegreeFraction", rhsGeoDegreeFraction), lhsGeoDegreeFraction, rhsGeoDegreeFraction, this.isSetGeoDegreeFraction(), that.isSetGeoDegreeFraction())) {
                return false;
            }
        }
        {
            SexagesimalPresentationType.GeoMinute lhsGeoMinute;
            lhsGeoMinute = this.getGeoMinute();
            SexagesimalPresentationType.GeoMinute rhsGeoMinute;
            rhsGeoMinute = that.getGeoMinute();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "geoMinute", lhsGeoMinute), LocatorUtils.property(thatLocator, "geoMinute", rhsGeoMinute), lhsGeoMinute, rhsGeoMinute, this.isSetGeoMinute(), that.isSetGeoMinute())) {
                return false;
            }
        }
        {
            SexagesimalPresentationType.GeoMinuteFraction lhsGeoMinuteFraction;
            lhsGeoMinuteFraction = this.getGeoMinuteFraction();
            SexagesimalPresentationType.GeoMinuteFraction rhsGeoMinuteFraction;
            rhsGeoMinuteFraction = that.getGeoMinuteFraction();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "geoMinuteFraction", lhsGeoMinuteFraction), LocatorUtils.property(thatLocator, "geoMinuteFraction", rhsGeoMinuteFraction), lhsGeoMinuteFraction, rhsGeoMinuteFraction, this.isSetGeoMinuteFraction(), that.isSetGeoMinuteFraction())) {
                return false;
            }
        }
        {
            SexagesimalPresentationType.GeoSecond lhsGeoSecond;
            lhsGeoSecond = this.getGeoSecond();
            SexagesimalPresentationType.GeoSecond rhsGeoSecond;
            rhsGeoSecond = that.getGeoSecond();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "geoSecond", lhsGeoSecond), LocatorUtils.property(thatLocator, "geoSecond", rhsGeoSecond), lhsGeoSecond, rhsGeoSecond, this.isSetGeoSecond(), that.isSetGeoSecond())) {
                return false;
            }
        }
        {
            SexagesimalPresentationType.GeoSecondFraction lhsGeoSecondFraction;
            lhsGeoSecondFraction = this.getGeoSecondFraction();
            SexagesimalPresentationType.GeoSecondFraction rhsGeoSecondFraction;
            rhsGeoSecondFraction = that.getGeoSecondFraction();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "geoSecondFraction", lhsGeoSecondFraction), LocatorUtils.property(thatLocator, "geoSecondFraction", rhsGeoSecondFraction), lhsGeoSecondFraction, rhsGeoSecondFraction, this.isSetGeoSecondFraction(), that.isSetGeoSecondFraction())) {
                return false;
            }
        }
        {
            LatitudeHemisphereType lhsGeoLatHemisphere;
            lhsGeoLatHemisphere = this.getGeoLatHemisphere();
            LatitudeHemisphereType rhsGeoLatHemisphere;
            rhsGeoLatHemisphere = that.getGeoLatHemisphere();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "geoLatHemisphere", lhsGeoLatHemisphere), LocatorUtils.property(thatLocator, "geoLatHemisphere", rhsGeoLatHemisphere), lhsGeoLatHemisphere, rhsGeoLatHemisphere, this.isSetGeoLatHemisphere(), that.isSetGeoLatHemisphere())) {
                return false;
            }
        }
        {
            LongitudeHemisphereType lhsGeoLongHemisphere;
            lhsGeoLongHemisphere = this.getGeoLongHemisphere();
            LongitudeHemisphereType rhsGeoLongHemisphere;
            rhsGeoLongHemisphere = that.getGeoLongHemisphere();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "geoLongHemisphere", lhsGeoLongHemisphere), LocatorUtils.property(thatLocator, "geoLongHemisphere", rhsGeoLongHemisphere), lhsGeoLongHemisphere, rhsGeoLongHemisphere, this.isSetGeoLongHemisphere(), that.isSetGeoLongHemisphere())) {
                return false;
            }
        }
        {
            RadixPointMarkType lhsRadixPointMark;
            lhsRadixPointMark = this.getRadixPointMark();
            RadixPointMarkType rhsRadixPointMark;
            rhsRadixPointMark = that.getRadixPointMark();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "radixPointMark", lhsRadixPointMark), LocatorUtils.property(thatLocator, "radixPointMark", rhsRadixPointMark), lhsRadixPointMark, rhsRadixPointMark, this.isSetRadixPointMark(), that.isSetRadixPointMark())) {
                return false;
            }
        }
        return true;
    }

    public boolean equals(Object object) {
        final EqualsStrategy2 strategy = JAXBEqualsStrategy.INSTANCE;
        return equals(null, null, object, strategy);
    }

    public int hashCode(ObjectLocator locator, HashCodeStrategy2 strategy) {
        int currentHashCode = 1;
        {
            SexagesimalPresentationType.GeoDegree theGeoDegree;
            theGeoDegree = this.getGeoDegree();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "geoDegree", theGeoDegree), currentHashCode, theGeoDegree, this.isSetGeoDegree());
        }
        {
            SexagesimalPresentationType.GeoDegreeFraction theGeoDegreeFraction;
            theGeoDegreeFraction = this.getGeoDegreeFraction();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "geoDegreeFraction", theGeoDegreeFraction), currentHashCode, theGeoDegreeFraction, this.isSetGeoDegreeFraction());
        }
        {
            SexagesimalPresentationType.GeoMinute theGeoMinute;
            theGeoMinute = this.getGeoMinute();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "geoMinute", theGeoMinute), currentHashCode, theGeoMinute, this.isSetGeoMinute());
        }
        {
            SexagesimalPresentationType.GeoMinuteFraction theGeoMinuteFraction;
            theGeoMinuteFraction = this.getGeoMinuteFraction();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "geoMinuteFraction", theGeoMinuteFraction), currentHashCode, theGeoMinuteFraction, this.isSetGeoMinuteFraction());
        }
        {
            SexagesimalPresentationType.GeoSecond theGeoSecond;
            theGeoSecond = this.getGeoSecond();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "geoSecond", theGeoSecond), currentHashCode, theGeoSecond, this.isSetGeoSecond());
        }
        {
            SexagesimalPresentationType.GeoSecondFraction theGeoSecondFraction;
            theGeoSecondFraction = this.getGeoSecondFraction();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "geoSecondFraction", theGeoSecondFraction), currentHashCode, theGeoSecondFraction, this.isSetGeoSecondFraction());
        }
        {
            LatitudeHemisphereType theGeoLatHemisphere;
            theGeoLatHemisphere = this.getGeoLatHemisphere();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "geoLatHemisphere", theGeoLatHemisphere), currentHashCode, theGeoLatHemisphere, this.isSetGeoLatHemisphere());
        }
        {
            LongitudeHemisphereType theGeoLongHemisphere;
            theGeoLongHemisphere = this.getGeoLongHemisphere();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "geoLongHemisphere", theGeoLongHemisphere), currentHashCode, theGeoLongHemisphere, this.isSetGeoLongHemisphere());
        }
        {
            RadixPointMarkType theRadixPointMark;
            theRadixPointMark = this.getRadixPointMark();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "radixPointMark", theRadixPointMark), currentHashCode, theRadixPointMark, this.isSetRadixPointMark());
        }
        return currentHashCode;
    }

    public int hashCode() {
        final HashCodeStrategy2 strategy = JAXBHashCodeStrategy.INSTANCE;
        return this.hashCode(null, strategy);
    }

    public Object clone() {
        return copyTo(createNewInstance());
    }

    public Object copyTo(Object target) {
        final CopyStrategy2 strategy = JAXBCopyStrategy.INSTANCE;
        return copyTo(null, target, strategy);
    }

    public Object copyTo(ObjectLocator locator, Object target, CopyStrategy2 strategy) {
        final Object draftCopy = ((target == null)?createNewInstance():target);
        if (draftCopy instanceof SexagesimalPresentationType) {
            final SexagesimalPresentationType copy = ((SexagesimalPresentationType) draftCopy);
            {
                Boolean geoDegreeShouldBeCopiedAndSet = strategy.shouldBeCopiedAndSet(locator, this.isSetGeoDegree());
                if (geoDegreeShouldBeCopiedAndSet == Boolean.TRUE) {
                    SexagesimalPresentationType.GeoDegree sourceGeoDegree;
                    sourceGeoDegree = this.getGeoDegree();
                    SexagesimalPresentationType.GeoDegree copyGeoDegree = ((SexagesimalPresentationType.GeoDegree) strategy.copy(LocatorUtils.property(locator, "geoDegree", sourceGeoDegree), sourceGeoDegree, this.isSetGeoDegree()));
                    copy.setGeoDegree(copyGeoDegree);
                } else {
                    if (geoDegreeShouldBeCopiedAndSet == Boolean.FALSE) {
                        copy.geoDegree = null;
                    }
                }
            }
            {
                Boolean geoDegreeFractionShouldBeCopiedAndSet = strategy.shouldBeCopiedAndSet(locator, this.isSetGeoDegreeFraction());
                if (geoDegreeFractionShouldBeCopiedAndSet == Boolean.TRUE) {
                    SexagesimalPresentationType.GeoDegreeFraction sourceGeoDegreeFraction;
                    sourceGeoDegreeFraction = this.getGeoDegreeFraction();
                    SexagesimalPresentationType.GeoDegreeFraction copyGeoDegreeFraction = ((SexagesimalPresentationType.GeoDegreeFraction) strategy.copy(LocatorUtils.property(locator, "geoDegreeFraction", sourceGeoDegreeFraction), sourceGeoDegreeFraction, this.isSetGeoDegreeFraction()));
                    copy.setGeoDegreeFraction(copyGeoDegreeFraction);
                } else {
                    if (geoDegreeFractionShouldBeCopiedAndSet == Boolean.FALSE) {
                        copy.geoDegreeFraction = null;
                    }
                }
            }
            {
                Boolean geoMinuteShouldBeCopiedAndSet = strategy.shouldBeCopiedAndSet(locator, this.isSetGeoMinute());
                if (geoMinuteShouldBeCopiedAndSet == Boolean.TRUE) {
                    SexagesimalPresentationType.GeoMinute sourceGeoMinute;
                    sourceGeoMinute = this.getGeoMinute();
                    SexagesimalPresentationType.GeoMinute copyGeoMinute = ((SexagesimalPresentationType.GeoMinute) strategy.copy(LocatorUtils.property(locator, "geoMinute", sourceGeoMinute), sourceGeoMinute, this.isSetGeoMinute()));
                    copy.setGeoMinute(copyGeoMinute);
                } else {
                    if (geoMinuteShouldBeCopiedAndSet == Boolean.FALSE) {
                        copy.geoMinute = null;
                    }
                }
            }
            {
                Boolean geoMinuteFractionShouldBeCopiedAndSet = strategy.shouldBeCopiedAndSet(locator, this.isSetGeoMinuteFraction());
                if (geoMinuteFractionShouldBeCopiedAndSet == Boolean.TRUE) {
                    SexagesimalPresentationType.GeoMinuteFraction sourceGeoMinuteFraction;
                    sourceGeoMinuteFraction = this.getGeoMinuteFraction();
                    SexagesimalPresentationType.GeoMinuteFraction copyGeoMinuteFraction = ((SexagesimalPresentationType.GeoMinuteFraction) strategy.copy(LocatorUtils.property(locator, "geoMinuteFraction", sourceGeoMinuteFraction), sourceGeoMinuteFraction, this.isSetGeoMinuteFraction()));
                    copy.setGeoMinuteFraction(copyGeoMinuteFraction);
                } else {
                    if (geoMinuteFractionShouldBeCopiedAndSet == Boolean.FALSE) {
                        copy.geoMinuteFraction = null;
                    }
                }
            }
            {
                Boolean geoSecondShouldBeCopiedAndSet = strategy.shouldBeCopiedAndSet(locator, this.isSetGeoSecond());
                if (geoSecondShouldBeCopiedAndSet == Boolean.TRUE) {
                    SexagesimalPresentationType.GeoSecond sourceGeoSecond;
                    sourceGeoSecond = this.getGeoSecond();
                    SexagesimalPresentationType.GeoSecond copyGeoSecond = ((SexagesimalPresentationType.GeoSecond) strategy.copy(LocatorUtils.property(locator, "geoSecond", sourceGeoSecond), sourceGeoSecond, this.isSetGeoSecond()));
                    copy.setGeoSecond(copyGeoSecond);
                } else {
                    if (geoSecondShouldBeCopiedAndSet == Boolean.FALSE) {
                        copy.geoSecond = null;
                    }
                }
            }
            {
                Boolean geoSecondFractionShouldBeCopiedAndSet = strategy.shouldBeCopiedAndSet(locator, this.isSetGeoSecondFraction());
                if (geoSecondFractionShouldBeCopiedAndSet == Boolean.TRUE) {
                    SexagesimalPresentationType.GeoSecondFraction sourceGeoSecondFraction;
                    sourceGeoSecondFraction = this.getGeoSecondFraction();
                    SexagesimalPresentationType.GeoSecondFraction copyGeoSecondFraction = ((SexagesimalPresentationType.GeoSecondFraction) strategy.copy(LocatorUtils.property(locator, "geoSecondFraction", sourceGeoSecondFraction), sourceGeoSecondFraction, this.isSetGeoSecondFraction()));
                    copy.setGeoSecondFraction(copyGeoSecondFraction);
                } else {
                    if (geoSecondFractionShouldBeCopiedAndSet == Boolean.FALSE) {
                        copy.geoSecondFraction = null;
                    }
                }
            }
            {
                Boolean geoLatHemisphereShouldBeCopiedAndSet = strategy.shouldBeCopiedAndSet(locator, this.isSetGeoLatHemisphere());
                if (geoLatHemisphereShouldBeCopiedAndSet == Boolean.TRUE) {
                    LatitudeHemisphereType sourceGeoLatHemisphere;
                    sourceGeoLatHemisphere = this.getGeoLatHemisphere();
                    LatitudeHemisphereType copyGeoLatHemisphere = ((LatitudeHemisphereType) strategy.copy(LocatorUtils.property(locator, "geoLatHemisphere", sourceGeoLatHemisphere), sourceGeoLatHemisphere, this.isSetGeoLatHemisphere()));
                    copy.setGeoLatHemisphere(copyGeoLatHemisphere);
                } else {
                    if (geoLatHemisphereShouldBeCopiedAndSet == Boolean.FALSE) {
                        copy.geoLatHemisphere = null;
                    }
                }
            }
            {
                Boolean geoLongHemisphereShouldBeCopiedAndSet = strategy.shouldBeCopiedAndSet(locator, this.isSetGeoLongHemisphere());
                if (geoLongHemisphereShouldBeCopiedAndSet == Boolean.TRUE) {
                    LongitudeHemisphereType sourceGeoLongHemisphere;
                    sourceGeoLongHemisphere = this.getGeoLongHemisphere();
                    LongitudeHemisphereType copyGeoLongHemisphere = ((LongitudeHemisphereType) strategy.copy(LocatorUtils.property(locator, "geoLongHemisphere", sourceGeoLongHemisphere), sourceGeoLongHemisphere, this.isSetGeoLongHemisphere()));
                    copy.setGeoLongHemisphere(copyGeoLongHemisphere);
                } else {
                    if (geoLongHemisphereShouldBeCopiedAndSet == Boolean.FALSE) {
                        copy.geoLongHemisphere = null;
                    }
                }
            }
            {
                Boolean radixPointMarkShouldBeCopiedAndSet = strategy.shouldBeCopiedAndSet(locator, this.isSetRadixPointMark());
                if (radixPointMarkShouldBeCopiedAndSet == Boolean.TRUE) {
                    RadixPointMarkType sourceRadixPointMark;
                    sourceRadixPointMark = this.getRadixPointMark();
                    RadixPointMarkType copyRadixPointMark = ((RadixPointMarkType) strategy.copy(LocatorUtils.property(locator, "radixPointMark", sourceRadixPointMark), sourceRadixPointMark, this.isSetRadixPointMark()));
                    copy.setRadixPointMark(copyRadixPointMark);
                } else {
                    if (radixPointMarkShouldBeCopiedAndSet == Boolean.FALSE) {
                        copy.radixPointMark = null;
                    }
                }
            }
        }
        return draftCopy;
    }

    public Object createNewInstance() {
        return new SexagesimalPresentationType();
    }

    public void mergeFrom(Object left, Object right) {
        final MergeStrategy2 strategy = JAXBMergeStrategy.INSTANCE;
        mergeFrom(null, null, left, right, strategy);
    }

    public void mergeFrom(ObjectLocator leftLocator, ObjectLocator rightLocator, Object left, Object right, MergeStrategy2 strategy) {
        if (right instanceof SexagesimalPresentationType) {
            final SexagesimalPresentationType target = this;
            final SexagesimalPresentationType leftObject = ((SexagesimalPresentationType) left);
            final SexagesimalPresentationType rightObject = ((SexagesimalPresentationType) right);
            {
                Boolean geoDegreeShouldBeMergedAndSet = strategy.shouldBeMergedAndSet(leftLocator, rightLocator, leftObject.isSetGeoDegree(), rightObject.isSetGeoDegree());
                if (geoDegreeShouldBeMergedAndSet == Boolean.TRUE) {
                    SexagesimalPresentationType.GeoDegree lhsGeoDegree;
                    lhsGeoDegree = leftObject.getGeoDegree();
                    SexagesimalPresentationType.GeoDegree rhsGeoDegree;
                    rhsGeoDegree = rightObject.getGeoDegree();
                    SexagesimalPresentationType.GeoDegree mergedGeoDegree = ((SexagesimalPresentationType.GeoDegree) strategy.merge(LocatorUtils.property(leftLocator, "geoDegree", lhsGeoDegree), LocatorUtils.property(rightLocator, "geoDegree", rhsGeoDegree), lhsGeoDegree, rhsGeoDegree, leftObject.isSetGeoDegree(), rightObject.isSetGeoDegree()));
                    target.setGeoDegree(mergedGeoDegree);
                } else {
                    if (geoDegreeShouldBeMergedAndSet == Boolean.FALSE) {
                        target.geoDegree = null;
                    }
                }
            }
            {
                Boolean geoDegreeFractionShouldBeMergedAndSet = strategy.shouldBeMergedAndSet(leftLocator, rightLocator, leftObject.isSetGeoDegreeFraction(), rightObject.isSetGeoDegreeFraction());
                if (geoDegreeFractionShouldBeMergedAndSet == Boolean.TRUE) {
                    SexagesimalPresentationType.GeoDegreeFraction lhsGeoDegreeFraction;
                    lhsGeoDegreeFraction = leftObject.getGeoDegreeFraction();
                    SexagesimalPresentationType.GeoDegreeFraction rhsGeoDegreeFraction;
                    rhsGeoDegreeFraction = rightObject.getGeoDegreeFraction();
                    SexagesimalPresentationType.GeoDegreeFraction mergedGeoDegreeFraction = ((SexagesimalPresentationType.GeoDegreeFraction) strategy.merge(LocatorUtils.property(leftLocator, "geoDegreeFraction", lhsGeoDegreeFraction), LocatorUtils.property(rightLocator, "geoDegreeFraction", rhsGeoDegreeFraction), lhsGeoDegreeFraction, rhsGeoDegreeFraction, leftObject.isSetGeoDegreeFraction(), rightObject.isSetGeoDegreeFraction()));
                    target.setGeoDegreeFraction(mergedGeoDegreeFraction);
                } else {
                    if (geoDegreeFractionShouldBeMergedAndSet == Boolean.FALSE) {
                        target.geoDegreeFraction = null;
                    }
                }
            }
            {
                Boolean geoMinuteShouldBeMergedAndSet = strategy.shouldBeMergedAndSet(leftLocator, rightLocator, leftObject.isSetGeoMinute(), rightObject.isSetGeoMinute());
                if (geoMinuteShouldBeMergedAndSet == Boolean.TRUE) {
                    SexagesimalPresentationType.GeoMinute lhsGeoMinute;
                    lhsGeoMinute = leftObject.getGeoMinute();
                    SexagesimalPresentationType.GeoMinute rhsGeoMinute;
                    rhsGeoMinute = rightObject.getGeoMinute();
                    SexagesimalPresentationType.GeoMinute mergedGeoMinute = ((SexagesimalPresentationType.GeoMinute) strategy.merge(LocatorUtils.property(leftLocator, "geoMinute", lhsGeoMinute), LocatorUtils.property(rightLocator, "geoMinute", rhsGeoMinute), lhsGeoMinute, rhsGeoMinute, leftObject.isSetGeoMinute(), rightObject.isSetGeoMinute()));
                    target.setGeoMinute(mergedGeoMinute);
                } else {
                    if (geoMinuteShouldBeMergedAndSet == Boolean.FALSE) {
                        target.geoMinute = null;
                    }
                }
            }
            {
                Boolean geoMinuteFractionShouldBeMergedAndSet = strategy.shouldBeMergedAndSet(leftLocator, rightLocator, leftObject.isSetGeoMinuteFraction(), rightObject.isSetGeoMinuteFraction());
                if (geoMinuteFractionShouldBeMergedAndSet == Boolean.TRUE) {
                    SexagesimalPresentationType.GeoMinuteFraction lhsGeoMinuteFraction;
                    lhsGeoMinuteFraction = leftObject.getGeoMinuteFraction();
                    SexagesimalPresentationType.GeoMinuteFraction rhsGeoMinuteFraction;
                    rhsGeoMinuteFraction = rightObject.getGeoMinuteFraction();
                    SexagesimalPresentationType.GeoMinuteFraction mergedGeoMinuteFraction = ((SexagesimalPresentationType.GeoMinuteFraction) strategy.merge(LocatorUtils.property(leftLocator, "geoMinuteFraction", lhsGeoMinuteFraction), LocatorUtils.property(rightLocator, "geoMinuteFraction", rhsGeoMinuteFraction), lhsGeoMinuteFraction, rhsGeoMinuteFraction, leftObject.isSetGeoMinuteFraction(), rightObject.isSetGeoMinuteFraction()));
                    target.setGeoMinuteFraction(mergedGeoMinuteFraction);
                } else {
                    if (geoMinuteFractionShouldBeMergedAndSet == Boolean.FALSE) {
                        target.geoMinuteFraction = null;
                    }
                }
            }
            {
                Boolean geoSecondShouldBeMergedAndSet = strategy.shouldBeMergedAndSet(leftLocator, rightLocator, leftObject.isSetGeoSecond(), rightObject.isSetGeoSecond());
                if (geoSecondShouldBeMergedAndSet == Boolean.TRUE) {
                    SexagesimalPresentationType.GeoSecond lhsGeoSecond;
                    lhsGeoSecond = leftObject.getGeoSecond();
                    SexagesimalPresentationType.GeoSecond rhsGeoSecond;
                    rhsGeoSecond = rightObject.getGeoSecond();
                    SexagesimalPresentationType.GeoSecond mergedGeoSecond = ((SexagesimalPresentationType.GeoSecond) strategy.merge(LocatorUtils.property(leftLocator, "geoSecond", lhsGeoSecond), LocatorUtils.property(rightLocator, "geoSecond", rhsGeoSecond), lhsGeoSecond, rhsGeoSecond, leftObject.isSetGeoSecond(), rightObject.isSetGeoSecond()));
                    target.setGeoSecond(mergedGeoSecond);
                } else {
                    if (geoSecondShouldBeMergedAndSet == Boolean.FALSE) {
                        target.geoSecond = null;
                    }
                }
            }
            {
                Boolean geoSecondFractionShouldBeMergedAndSet = strategy.shouldBeMergedAndSet(leftLocator, rightLocator, leftObject.isSetGeoSecondFraction(), rightObject.isSetGeoSecondFraction());
                if (geoSecondFractionShouldBeMergedAndSet == Boolean.TRUE) {
                    SexagesimalPresentationType.GeoSecondFraction lhsGeoSecondFraction;
                    lhsGeoSecondFraction = leftObject.getGeoSecondFraction();
                    SexagesimalPresentationType.GeoSecondFraction rhsGeoSecondFraction;
                    rhsGeoSecondFraction = rightObject.getGeoSecondFraction();
                    SexagesimalPresentationType.GeoSecondFraction mergedGeoSecondFraction = ((SexagesimalPresentationType.GeoSecondFraction) strategy.merge(LocatorUtils.property(leftLocator, "geoSecondFraction", lhsGeoSecondFraction), LocatorUtils.property(rightLocator, "geoSecondFraction", rhsGeoSecondFraction), lhsGeoSecondFraction, rhsGeoSecondFraction, leftObject.isSetGeoSecondFraction(), rightObject.isSetGeoSecondFraction()));
                    target.setGeoSecondFraction(mergedGeoSecondFraction);
                } else {
                    if (geoSecondFractionShouldBeMergedAndSet == Boolean.FALSE) {
                        target.geoSecondFraction = null;
                    }
                }
            }
            {
                Boolean geoLatHemisphereShouldBeMergedAndSet = strategy.shouldBeMergedAndSet(leftLocator, rightLocator, leftObject.isSetGeoLatHemisphere(), rightObject.isSetGeoLatHemisphere());
                if (geoLatHemisphereShouldBeMergedAndSet == Boolean.TRUE) {
                    LatitudeHemisphereType lhsGeoLatHemisphere;
                    lhsGeoLatHemisphere = leftObject.getGeoLatHemisphere();
                    LatitudeHemisphereType rhsGeoLatHemisphere;
                    rhsGeoLatHemisphere = rightObject.getGeoLatHemisphere();
                    LatitudeHemisphereType mergedGeoLatHemisphere = ((LatitudeHemisphereType) strategy.merge(LocatorUtils.property(leftLocator, "geoLatHemisphere", lhsGeoLatHemisphere), LocatorUtils.property(rightLocator, "geoLatHemisphere", rhsGeoLatHemisphere), lhsGeoLatHemisphere, rhsGeoLatHemisphere, leftObject.isSetGeoLatHemisphere(), rightObject.isSetGeoLatHemisphere()));
                    target.setGeoLatHemisphere(mergedGeoLatHemisphere);
                } else {
                    if (geoLatHemisphereShouldBeMergedAndSet == Boolean.FALSE) {
                        target.geoLatHemisphere = null;
                    }
                }
            }
            {
                Boolean geoLongHemisphereShouldBeMergedAndSet = strategy.shouldBeMergedAndSet(leftLocator, rightLocator, leftObject.isSetGeoLongHemisphere(), rightObject.isSetGeoLongHemisphere());
                if (geoLongHemisphereShouldBeMergedAndSet == Boolean.TRUE) {
                    LongitudeHemisphereType lhsGeoLongHemisphere;
                    lhsGeoLongHemisphere = leftObject.getGeoLongHemisphere();
                    LongitudeHemisphereType rhsGeoLongHemisphere;
                    rhsGeoLongHemisphere = rightObject.getGeoLongHemisphere();
                    LongitudeHemisphereType mergedGeoLongHemisphere = ((LongitudeHemisphereType) strategy.merge(LocatorUtils.property(leftLocator, "geoLongHemisphere", lhsGeoLongHemisphere), LocatorUtils.property(rightLocator, "geoLongHemisphere", rhsGeoLongHemisphere), lhsGeoLongHemisphere, rhsGeoLongHemisphere, leftObject.isSetGeoLongHemisphere(), rightObject.isSetGeoLongHemisphere()));
                    target.setGeoLongHemisphere(mergedGeoLongHemisphere);
                } else {
                    if (geoLongHemisphereShouldBeMergedAndSet == Boolean.FALSE) {
                        target.geoLongHemisphere = null;
                    }
                }
            }
            {
                Boolean radixPointMarkShouldBeMergedAndSet = strategy.shouldBeMergedAndSet(leftLocator, rightLocator, leftObject.isSetRadixPointMark(), rightObject.isSetRadixPointMark());
                if (radixPointMarkShouldBeMergedAndSet == Boolean.TRUE) {
                    RadixPointMarkType lhsRadixPointMark;
                    lhsRadixPointMark = leftObject.getRadixPointMark();
                    RadixPointMarkType rhsRadixPointMark;
                    rhsRadixPointMark = rightObject.getRadixPointMark();
                    RadixPointMarkType mergedRadixPointMark = ((RadixPointMarkType) strategy.merge(LocatorUtils.property(leftLocator, "radixPointMark", lhsRadixPointMark), LocatorUtils.property(rightLocator, "radixPointMark", rhsRadixPointMark), lhsRadixPointMark, rhsRadixPointMark, leftObject.isSetRadixPointMark(), rightObject.isSetRadixPointMark()));
                    target.setRadixPointMark(mergedRadixPointMark);
                } else {
                    if (radixPointMarkShouldBeMergedAndSet == Boolean.FALSE) {
                        target.radixPointMark = null;
                    }
                }
            }
        }
    }


    /**
     * <p>Java class for anonymous complex type.
     * 
     * <p>The following schema fragment specifies the expected content contained within this class.
     * 
     * <pre>
     * &lt;complexType&gt;
     *   &lt;complexContent&gt;
     *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
     *       &lt;sequence&gt;
     *         &lt;element name="latitude" type="{http://metadata.ces.mil/mdr/ns/GSIP/tspi/2.0/core}GeoLatitudeDegreeType"/&gt;
     *         &lt;element name="longitude" type="{http://metadata.ces.mil/mdr/ns/GSIP/tspi/2.0/core}GeoLongitudeDegreeType"/&gt;
     *       &lt;/sequence&gt;
     *     &lt;/restriction&gt;
     *   &lt;/complexContent&gt;
     * &lt;/complexType&gt;
     * </pre>
     * 
     * 
     */
    @XmlAccessorType(XmlAccessType.FIELD)
    @XmlType(name = "", propOrder = {
        "latitude",
        "longitude"
    })
    public static class GeoDegree implements Serializable, Cloneable, CopyTo2, Equals2, HashCode2, MergeFrom2, ToString2
    {

        private final static long serialVersionUID = 1L;
        @XmlSchemaType(name = "integer")
        @NotNull(message = "GeoDegree.latitude {javax.validation.constraints.NotNull.message}")
        @DecimalMax("90")
        @DecimalMin("0")
        protected int latitude;
        @XmlSchemaType(name = "integer")
        @NotNull(message = "GeoDegree.longitude {javax.validation.constraints.NotNull.message}")
        @DecimalMax("180")
        @DecimalMin("0")
        protected int longitude;

        /**
         * Gets the value of the latitude property.
         * 
         */
        public int getLatitude() {
            return latitude;
        }

        /**
         * Sets the value of the latitude property.
         * 
         */
        public void setLatitude(int value) {
            this.latitude = value;
        }

        public boolean isSetLatitude() {
            return true;
        }

        /**
         * Gets the value of the longitude property.
         * 
         */
        public int getLongitude() {
            return longitude;
        }

        /**
         * Sets the value of the longitude property.
         * 
         */
        public void setLongitude(int value) {
            this.longitude = value;
        }

        public boolean isSetLongitude() {
            return true;
        }

        public String toString() {
            final ToStringStrategy2 strategy = JAXBToStringStrategy.INSTANCE;
            final StringBuilder buffer = new StringBuilder();
            append(null, buffer, strategy);
            return buffer.toString();
        }

        public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy2 strategy) {
            strategy.appendStart(locator, this, buffer);
            appendFields(locator, buffer, strategy);
            strategy.appendEnd(locator, this, buffer);
            return buffer;
        }

        public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy2 strategy) {
            {
                int theLatitude;
                theLatitude = this.getLatitude();
                strategy.appendField(locator, this, "latitude", buffer, theLatitude, true);
            }
            {
                int theLongitude;
                theLongitude = this.getLongitude();
                strategy.appendField(locator, this, "longitude", buffer, theLongitude, true);
            }
            return buffer;
        }

        public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy2 strategy) {
            if ((object == null)||(this.getClass()!= object.getClass())) {
                return false;
            }
            if (this == object) {
                return true;
            }
            final SexagesimalPresentationType.GeoDegree that = ((SexagesimalPresentationType.GeoDegree) object);
            {
                int lhsLatitude;
                lhsLatitude = this.getLatitude();
                int rhsLatitude;
                rhsLatitude = that.getLatitude();
                if (!strategy.equals(LocatorUtils.property(thisLocator, "latitude", lhsLatitude), LocatorUtils.property(thatLocator, "latitude", rhsLatitude), lhsLatitude, rhsLatitude, true, true)) {
                    return false;
                }
            }
            {
                int lhsLongitude;
                lhsLongitude = this.getLongitude();
                int rhsLongitude;
                rhsLongitude = that.getLongitude();
                if (!strategy.equals(LocatorUtils.property(thisLocator, "longitude", lhsLongitude), LocatorUtils.property(thatLocator, "longitude", rhsLongitude), lhsLongitude, rhsLongitude, true, true)) {
                    return false;
                }
            }
            return true;
        }

        public boolean equals(Object object) {
            final EqualsStrategy2 strategy = JAXBEqualsStrategy.INSTANCE;
            return equals(null, null, object, strategy);
        }

        public int hashCode(ObjectLocator locator, HashCodeStrategy2 strategy) {
            int currentHashCode = 1;
            {
                int theLatitude;
                theLatitude = this.getLatitude();
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "latitude", theLatitude), currentHashCode, theLatitude, true);
            }
            {
                int theLongitude;
                theLongitude = this.getLongitude();
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "longitude", theLongitude), currentHashCode, theLongitude, true);
            }
            return currentHashCode;
        }

        public int hashCode() {
            final HashCodeStrategy2 strategy = JAXBHashCodeStrategy.INSTANCE;
            return this.hashCode(null, strategy);
        }

        public Object clone() {
            return copyTo(createNewInstance());
        }

        public Object copyTo(Object target) {
            final CopyStrategy2 strategy = JAXBCopyStrategy.INSTANCE;
            return copyTo(null, target, strategy);
        }

        public Object copyTo(ObjectLocator locator, Object target, CopyStrategy2 strategy) {
            final Object draftCopy = ((target == null)?createNewInstance():target);
            if (draftCopy instanceof SexagesimalPresentationType.GeoDegree) {
                final SexagesimalPresentationType.GeoDegree copy = ((SexagesimalPresentationType.GeoDegree) draftCopy);
                {
                    Boolean latitudeShouldBeCopiedAndSet = strategy.shouldBeCopiedAndSet(locator, true);
                    if (latitudeShouldBeCopiedAndSet == Boolean.TRUE) {
                        int sourceLatitude;
                        sourceLatitude = this.getLatitude();
                        int copyLatitude = strategy.copy(LocatorUtils.property(locator, "latitude", sourceLatitude), sourceLatitude, true);
                        copy.setLatitude(copyLatitude);
                    } else {
                        if (latitudeShouldBeCopiedAndSet == Boolean.FALSE) {
                        }
                    }
                }
                {
                    Boolean longitudeShouldBeCopiedAndSet = strategy.shouldBeCopiedAndSet(locator, true);
                    if (longitudeShouldBeCopiedAndSet == Boolean.TRUE) {
                        int sourceLongitude;
                        sourceLongitude = this.getLongitude();
                        int copyLongitude = strategy.copy(LocatorUtils.property(locator, "longitude", sourceLongitude), sourceLongitude, true);
                        copy.setLongitude(copyLongitude);
                    } else {
                        if (longitudeShouldBeCopiedAndSet == Boolean.FALSE) {
                        }
                    }
                }
            }
            return draftCopy;
        }

        public Object createNewInstance() {
            return new SexagesimalPresentationType.GeoDegree();
        }

        public void mergeFrom(Object left, Object right) {
            final MergeStrategy2 strategy = JAXBMergeStrategy.INSTANCE;
            mergeFrom(null, null, left, right, strategy);
        }

        public void mergeFrom(ObjectLocator leftLocator, ObjectLocator rightLocator, Object left, Object right, MergeStrategy2 strategy) {
            if (right instanceof SexagesimalPresentationType.GeoDegree) {
                final SexagesimalPresentationType.GeoDegree target = this;
                final SexagesimalPresentationType.GeoDegree leftObject = ((SexagesimalPresentationType.GeoDegree) left);
                final SexagesimalPresentationType.GeoDegree rightObject = ((SexagesimalPresentationType.GeoDegree) right);
                {
                    Boolean latitudeShouldBeMergedAndSet = strategy.shouldBeMergedAndSet(leftLocator, rightLocator, true, true);
                    if (latitudeShouldBeMergedAndSet == Boolean.TRUE) {
                        int lhsLatitude;
                        lhsLatitude = leftObject.getLatitude();
                        int rhsLatitude;
                        rhsLatitude = rightObject.getLatitude();
                        int mergedLatitude = ((int) strategy.merge(LocatorUtils.property(leftLocator, "latitude", lhsLatitude), LocatorUtils.property(rightLocator, "latitude", rhsLatitude), lhsLatitude, rhsLatitude, true, true));
                        target.setLatitude(mergedLatitude);
                    } else {
                        if (latitudeShouldBeMergedAndSet == Boolean.FALSE) {
                        }
                    }
                }
                {
                    Boolean longitudeShouldBeMergedAndSet = strategy.shouldBeMergedAndSet(leftLocator, rightLocator, true, true);
                    if (longitudeShouldBeMergedAndSet == Boolean.TRUE) {
                        int lhsLongitude;
                        lhsLongitude = leftObject.getLongitude();
                        int rhsLongitude;
                        rhsLongitude = rightObject.getLongitude();
                        int mergedLongitude = ((int) strategy.merge(LocatorUtils.property(leftLocator, "longitude", lhsLongitude), LocatorUtils.property(rightLocator, "longitude", rhsLongitude), lhsLongitude, rhsLongitude, true, true));
                        target.setLongitude(mergedLongitude);
                    } else {
                        if (longitudeShouldBeMergedAndSet == Boolean.FALSE) {
                        }
                    }
                }
            }
        }

    }


    /**
     * <p>Java class for anonymous complex type.
     * 
     * <p>The following schema fragment specifies the expected content contained within this class.
     * 
     * <pre>
     * &lt;complexType&gt;
     *   &lt;complexContent&gt;
     *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
     *       &lt;choice&gt;
     *         &lt;element name="decidegree"&gt;
     *           &lt;complexType&gt;
     *             &lt;complexContent&gt;
     *               &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
     *                 &lt;sequence&gt;
     *                   &lt;element name="latitude" type="{http://metadata.ces.mil/mdr/ns/GSIP/tspi/2.0/core}DecaType"/&gt;
     *                   &lt;element name="longitude" type="{http://metadata.ces.mil/mdr/ns/GSIP/tspi/2.0/core}DecaType"/&gt;
     *                 &lt;/sequence&gt;
     *               &lt;/restriction&gt;
     *             &lt;/complexContent&gt;
     *           &lt;/complexType&gt;
     *         &lt;/element&gt;
     *         &lt;element name="centidegree"&gt;
     *           &lt;complexType&gt;
     *             &lt;complexContent&gt;
     *               &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
     *                 &lt;sequence&gt;
     *                   &lt;element name="latitude" type="{http://metadata.ces.mil/mdr/ns/GSIP/tspi/2.0/core}HectoType"/&gt;
     *                   &lt;element name="longitude" type="{http://metadata.ces.mil/mdr/ns/GSIP/tspi/2.0/core}HectoType"/&gt;
     *                 &lt;/sequence&gt;
     *               &lt;/restriction&gt;
     *             &lt;/complexContent&gt;
     *           &lt;/complexType&gt;
     *         &lt;/element&gt;
     *         &lt;element name="millidegree"&gt;
     *           &lt;complexType&gt;
     *             &lt;complexContent&gt;
     *               &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
     *                 &lt;sequence&gt;
     *                   &lt;element name="latitude" type="{http://metadata.ces.mil/mdr/ns/GSIP/tspi/2.0/core}KiloType"/&gt;
     *                   &lt;element name="longitude" type="{http://metadata.ces.mil/mdr/ns/GSIP/tspi/2.0/core}KiloType"/&gt;
     *                 &lt;/sequence&gt;
     *               &lt;/restriction&gt;
     *             &lt;/complexContent&gt;
     *           &lt;/complexType&gt;
     *         &lt;/element&gt;
     *         &lt;element name="decimillidegree"&gt;
     *           &lt;complexType&gt;
     *             &lt;complexContent&gt;
     *               &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
     *                 &lt;sequence&gt;
     *                   &lt;element name="latitude" type="{http://metadata.ces.mil/mdr/ns/GSIP/tspi/2.0/core}DecakiloType"/&gt;
     *                   &lt;element name="longitude" type="{http://metadata.ces.mil/mdr/ns/GSIP/tspi/2.0/core}DecakiloType"/&gt;
     *                 &lt;/sequence&gt;
     *               &lt;/restriction&gt;
     *             &lt;/complexContent&gt;
     *           &lt;/complexType&gt;
     *         &lt;/element&gt;
     *         &lt;element name="centimillidegree"&gt;
     *           &lt;complexType&gt;
     *             &lt;complexContent&gt;
     *               &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
     *                 &lt;sequence&gt;
     *                   &lt;element name="latitude" type="{http://metadata.ces.mil/mdr/ns/GSIP/tspi/2.0/core}HectokiloType"/&gt;
     *                   &lt;element name="longitude" type="{http://metadata.ces.mil/mdr/ns/GSIP/tspi/2.0/core}HectokiloType"/&gt;
     *                 &lt;/sequence&gt;
     *               &lt;/restriction&gt;
     *             &lt;/complexContent&gt;
     *           &lt;/complexType&gt;
     *         &lt;/element&gt;
     *         &lt;element name="microdegree"&gt;
     *           &lt;complexType&gt;
     *             &lt;complexContent&gt;
     *               &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
     *                 &lt;sequence&gt;
     *                   &lt;element name="latitude" type="{http://metadata.ces.mil/mdr/ns/GSIP/tspi/2.0/core}MegaType"/&gt;
     *                   &lt;element name="longitude" type="{http://metadata.ces.mil/mdr/ns/GSIP/tspi/2.0/core}MegaType"/&gt;
     *                 &lt;/sequence&gt;
     *               &lt;/restriction&gt;
     *             &lt;/complexContent&gt;
     *           &lt;/complexType&gt;
     *         &lt;/element&gt;
     *       &lt;/choice&gt;
     *     &lt;/restriction&gt;
     *   &lt;/complexContent&gt;
     * &lt;/complexType&gt;
     * </pre>
     * 
     * 
     */
    @XmlAccessorType(XmlAccessType.FIELD)
    @XmlType(name = "", propOrder = {
        "decidegree",
        "centidegree",
        "millidegree",
        "decimillidegree",
        "centimillidegree",
        "microdegree"
    })
    public static class GeoDegreeFraction implements Serializable, Cloneable, CopyTo2, Equals2, HashCode2, MergeFrom2, ToString2
    {

        private final static long serialVersionUID = 1L;
        @Valid
        protected SexagesimalPresentationType.GeoDegreeFraction.Decidegree decidegree;
        @Valid
        protected SexagesimalPresentationType.GeoDegreeFraction.Centidegree centidegree;
        @Valid
        protected SexagesimalPresentationType.GeoDegreeFraction.Millidegree millidegree;
        @Valid
        protected SexagesimalPresentationType.GeoDegreeFraction.Decimillidegree decimillidegree;
        @Valid
        protected SexagesimalPresentationType.GeoDegreeFraction.Centimillidegree centimillidegree;
        @Valid
        protected SexagesimalPresentationType.GeoDegreeFraction.Microdegree microdegree;

        /**
         * Gets the value of the decidegree property.
         * 
         * @return
         *     possible object is
         *     {@link SexagesimalPresentationType.GeoDegreeFraction.Decidegree }
         *     
         */
        public SexagesimalPresentationType.GeoDegreeFraction.Decidegree getDecidegree() {
            return decidegree;
        }

        /**
         * Sets the value of the decidegree property.
         * 
         * @param value
         *     allowed object is
         *     {@link SexagesimalPresentationType.GeoDegreeFraction.Decidegree }
         *     
         */
        public void setDecidegree(SexagesimalPresentationType.GeoDegreeFraction.Decidegree value) {
            this.decidegree = value;
        }

        public boolean isSetDecidegree() {
            return (this.decidegree!= null);
        }

        /**
         * Gets the value of the centidegree property.
         * 
         * @return
         *     possible object is
         *     {@link SexagesimalPresentationType.GeoDegreeFraction.Centidegree }
         *     
         */
        public SexagesimalPresentationType.GeoDegreeFraction.Centidegree getCentidegree() {
            return centidegree;
        }

        /**
         * Sets the value of the centidegree property.
         * 
         * @param value
         *     allowed object is
         *     {@link SexagesimalPresentationType.GeoDegreeFraction.Centidegree }
         *     
         */
        public void setCentidegree(SexagesimalPresentationType.GeoDegreeFraction.Centidegree value) {
            this.centidegree = value;
        }

        public boolean isSetCentidegree() {
            return (this.centidegree!= null);
        }

        /**
         * Gets the value of the millidegree property.
         * 
         * @return
         *     possible object is
         *     {@link SexagesimalPresentationType.GeoDegreeFraction.Millidegree }
         *     
         */
        public SexagesimalPresentationType.GeoDegreeFraction.Millidegree getMillidegree() {
            return millidegree;
        }

        /**
         * Sets the value of the millidegree property.
         * 
         * @param value
         *     allowed object is
         *     {@link SexagesimalPresentationType.GeoDegreeFraction.Millidegree }
         *     
         */
        public void setMillidegree(SexagesimalPresentationType.GeoDegreeFraction.Millidegree value) {
            this.millidegree = value;
        }

        public boolean isSetMillidegree() {
            return (this.millidegree!= null);
        }

        /**
         * Gets the value of the decimillidegree property.
         * 
         * @return
         *     possible object is
         *     {@link SexagesimalPresentationType.GeoDegreeFraction.Decimillidegree }
         *     
         */
        public SexagesimalPresentationType.GeoDegreeFraction.Decimillidegree getDecimillidegree() {
            return decimillidegree;
        }

        /**
         * Sets the value of the decimillidegree property.
         * 
         * @param value
         *     allowed object is
         *     {@link SexagesimalPresentationType.GeoDegreeFraction.Decimillidegree }
         *     
         */
        public void setDecimillidegree(SexagesimalPresentationType.GeoDegreeFraction.Decimillidegree value) {
            this.decimillidegree = value;
        }

        public boolean isSetDecimillidegree() {
            return (this.decimillidegree!= null);
        }

        /**
         * Gets the value of the centimillidegree property.
         * 
         * @return
         *     possible object is
         *     {@link SexagesimalPresentationType.GeoDegreeFraction.Centimillidegree }
         *     
         */
        public SexagesimalPresentationType.GeoDegreeFraction.Centimillidegree getCentimillidegree() {
            return centimillidegree;
        }

        /**
         * Sets the value of the centimillidegree property.
         * 
         * @param value
         *     allowed object is
         *     {@link SexagesimalPresentationType.GeoDegreeFraction.Centimillidegree }
         *     
         */
        public void setCentimillidegree(SexagesimalPresentationType.GeoDegreeFraction.Centimillidegree value) {
            this.centimillidegree = value;
        }

        public boolean isSetCentimillidegree() {
            return (this.centimillidegree!= null);
        }

        /**
         * Gets the value of the microdegree property.
         * 
         * @return
         *     possible object is
         *     {@link SexagesimalPresentationType.GeoDegreeFraction.Microdegree }
         *     
         */
        public SexagesimalPresentationType.GeoDegreeFraction.Microdegree getMicrodegree() {
            return microdegree;
        }

        /**
         * Sets the value of the microdegree property.
         * 
         * @param value
         *     allowed object is
         *     {@link SexagesimalPresentationType.GeoDegreeFraction.Microdegree }
         *     
         */
        public void setMicrodegree(SexagesimalPresentationType.GeoDegreeFraction.Microdegree value) {
            this.microdegree = value;
        }

        public boolean isSetMicrodegree() {
            return (this.microdegree!= null);
        }

        public String toString() {
            final ToStringStrategy2 strategy = JAXBToStringStrategy.INSTANCE;
            final StringBuilder buffer = new StringBuilder();
            append(null, buffer, strategy);
            return buffer.toString();
        }

        public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy2 strategy) {
            strategy.appendStart(locator, this, buffer);
            appendFields(locator, buffer, strategy);
            strategy.appendEnd(locator, this, buffer);
            return buffer;
        }

        public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy2 strategy) {
            {
                SexagesimalPresentationType.GeoDegreeFraction.Decidegree theDecidegree;
                theDecidegree = this.getDecidegree();
                strategy.appendField(locator, this, "decidegree", buffer, theDecidegree, this.isSetDecidegree());
            }
            {
                SexagesimalPresentationType.GeoDegreeFraction.Centidegree theCentidegree;
                theCentidegree = this.getCentidegree();
                strategy.appendField(locator, this, "centidegree", buffer, theCentidegree, this.isSetCentidegree());
            }
            {
                SexagesimalPresentationType.GeoDegreeFraction.Millidegree theMillidegree;
                theMillidegree = this.getMillidegree();
                strategy.appendField(locator, this, "millidegree", buffer, theMillidegree, this.isSetMillidegree());
            }
            {
                SexagesimalPresentationType.GeoDegreeFraction.Decimillidegree theDecimillidegree;
                theDecimillidegree = this.getDecimillidegree();
                strategy.appendField(locator, this, "decimillidegree", buffer, theDecimillidegree, this.isSetDecimillidegree());
            }
            {
                SexagesimalPresentationType.GeoDegreeFraction.Centimillidegree theCentimillidegree;
                theCentimillidegree = this.getCentimillidegree();
                strategy.appendField(locator, this, "centimillidegree", buffer, theCentimillidegree, this.isSetCentimillidegree());
            }
            {
                SexagesimalPresentationType.GeoDegreeFraction.Microdegree theMicrodegree;
                theMicrodegree = this.getMicrodegree();
                strategy.appendField(locator, this, "microdegree", buffer, theMicrodegree, this.isSetMicrodegree());
            }
            return buffer;
        }

        public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy2 strategy) {
            if ((object == null)||(this.getClass()!= object.getClass())) {
                return false;
            }
            if (this == object) {
                return true;
            }
            final SexagesimalPresentationType.GeoDegreeFraction that = ((SexagesimalPresentationType.GeoDegreeFraction) object);
            {
                SexagesimalPresentationType.GeoDegreeFraction.Decidegree lhsDecidegree;
                lhsDecidegree = this.getDecidegree();
                SexagesimalPresentationType.GeoDegreeFraction.Decidegree rhsDecidegree;
                rhsDecidegree = that.getDecidegree();
                if (!strategy.equals(LocatorUtils.property(thisLocator, "decidegree", lhsDecidegree), LocatorUtils.property(thatLocator, "decidegree", rhsDecidegree), lhsDecidegree, rhsDecidegree, this.isSetDecidegree(), that.isSetDecidegree())) {
                    return false;
                }
            }
            {
                SexagesimalPresentationType.GeoDegreeFraction.Centidegree lhsCentidegree;
                lhsCentidegree = this.getCentidegree();
                SexagesimalPresentationType.GeoDegreeFraction.Centidegree rhsCentidegree;
                rhsCentidegree = that.getCentidegree();
                if (!strategy.equals(LocatorUtils.property(thisLocator, "centidegree", lhsCentidegree), LocatorUtils.property(thatLocator, "centidegree", rhsCentidegree), lhsCentidegree, rhsCentidegree, this.isSetCentidegree(), that.isSetCentidegree())) {
                    return false;
                }
            }
            {
                SexagesimalPresentationType.GeoDegreeFraction.Millidegree lhsMillidegree;
                lhsMillidegree = this.getMillidegree();
                SexagesimalPresentationType.GeoDegreeFraction.Millidegree rhsMillidegree;
                rhsMillidegree = that.getMillidegree();
                if (!strategy.equals(LocatorUtils.property(thisLocator, "millidegree", lhsMillidegree), LocatorUtils.property(thatLocator, "millidegree", rhsMillidegree), lhsMillidegree, rhsMillidegree, this.isSetMillidegree(), that.isSetMillidegree())) {
                    return false;
                }
            }
            {
                SexagesimalPresentationType.GeoDegreeFraction.Decimillidegree lhsDecimillidegree;
                lhsDecimillidegree = this.getDecimillidegree();
                SexagesimalPresentationType.GeoDegreeFraction.Decimillidegree rhsDecimillidegree;
                rhsDecimillidegree = that.getDecimillidegree();
                if (!strategy.equals(LocatorUtils.property(thisLocator, "decimillidegree", lhsDecimillidegree), LocatorUtils.property(thatLocator, "decimillidegree", rhsDecimillidegree), lhsDecimillidegree, rhsDecimillidegree, this.isSetDecimillidegree(), that.isSetDecimillidegree())) {
                    return false;
                }
            }
            {
                SexagesimalPresentationType.GeoDegreeFraction.Centimillidegree lhsCentimillidegree;
                lhsCentimillidegree = this.getCentimillidegree();
                SexagesimalPresentationType.GeoDegreeFraction.Centimillidegree rhsCentimillidegree;
                rhsCentimillidegree = that.getCentimillidegree();
                if (!strategy.equals(LocatorUtils.property(thisLocator, "centimillidegree", lhsCentimillidegree), LocatorUtils.property(thatLocator, "centimillidegree", rhsCentimillidegree), lhsCentimillidegree, rhsCentimillidegree, this.isSetCentimillidegree(), that.isSetCentimillidegree())) {
                    return false;
                }
            }
            {
                SexagesimalPresentationType.GeoDegreeFraction.Microdegree lhsMicrodegree;
                lhsMicrodegree = this.getMicrodegree();
                SexagesimalPresentationType.GeoDegreeFraction.Microdegree rhsMicrodegree;
                rhsMicrodegree = that.getMicrodegree();
                if (!strategy.equals(LocatorUtils.property(thisLocator, "microdegree", lhsMicrodegree), LocatorUtils.property(thatLocator, "microdegree", rhsMicrodegree), lhsMicrodegree, rhsMicrodegree, this.isSetMicrodegree(), that.isSetMicrodegree())) {
                    return false;
                }
            }
            return true;
        }

        public boolean equals(Object object) {
            final EqualsStrategy2 strategy = JAXBEqualsStrategy.INSTANCE;
            return equals(null, null, object, strategy);
        }

        public int hashCode(ObjectLocator locator, HashCodeStrategy2 strategy) {
            int currentHashCode = 1;
            {
                SexagesimalPresentationType.GeoDegreeFraction.Decidegree theDecidegree;
                theDecidegree = this.getDecidegree();
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "decidegree", theDecidegree), currentHashCode, theDecidegree, this.isSetDecidegree());
            }
            {
                SexagesimalPresentationType.GeoDegreeFraction.Centidegree theCentidegree;
                theCentidegree = this.getCentidegree();
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "centidegree", theCentidegree), currentHashCode, theCentidegree, this.isSetCentidegree());
            }
            {
                SexagesimalPresentationType.GeoDegreeFraction.Millidegree theMillidegree;
                theMillidegree = this.getMillidegree();
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "millidegree", theMillidegree), currentHashCode, theMillidegree, this.isSetMillidegree());
            }
            {
                SexagesimalPresentationType.GeoDegreeFraction.Decimillidegree theDecimillidegree;
                theDecimillidegree = this.getDecimillidegree();
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "decimillidegree", theDecimillidegree), currentHashCode, theDecimillidegree, this.isSetDecimillidegree());
            }
            {
                SexagesimalPresentationType.GeoDegreeFraction.Centimillidegree theCentimillidegree;
                theCentimillidegree = this.getCentimillidegree();
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "centimillidegree", theCentimillidegree), currentHashCode, theCentimillidegree, this.isSetCentimillidegree());
            }
            {
                SexagesimalPresentationType.GeoDegreeFraction.Microdegree theMicrodegree;
                theMicrodegree = this.getMicrodegree();
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "microdegree", theMicrodegree), currentHashCode, theMicrodegree, this.isSetMicrodegree());
            }
            return currentHashCode;
        }

        public int hashCode() {
            final HashCodeStrategy2 strategy = JAXBHashCodeStrategy.INSTANCE;
            return this.hashCode(null, strategy);
        }

        public Object clone() {
            return copyTo(createNewInstance());
        }

        public Object copyTo(Object target) {
            final CopyStrategy2 strategy = JAXBCopyStrategy.INSTANCE;
            return copyTo(null, target, strategy);
        }

        public Object copyTo(ObjectLocator locator, Object target, CopyStrategy2 strategy) {
            final Object draftCopy = ((target == null)?createNewInstance():target);
            if (draftCopy instanceof SexagesimalPresentationType.GeoDegreeFraction) {
                final SexagesimalPresentationType.GeoDegreeFraction copy = ((SexagesimalPresentationType.GeoDegreeFraction) draftCopy);
                {
                    Boolean decidegreeShouldBeCopiedAndSet = strategy.shouldBeCopiedAndSet(locator, this.isSetDecidegree());
                    if (decidegreeShouldBeCopiedAndSet == Boolean.TRUE) {
                        SexagesimalPresentationType.GeoDegreeFraction.Decidegree sourceDecidegree;
                        sourceDecidegree = this.getDecidegree();
                        SexagesimalPresentationType.GeoDegreeFraction.Decidegree copyDecidegree = ((SexagesimalPresentationType.GeoDegreeFraction.Decidegree) strategy.copy(LocatorUtils.property(locator, "decidegree", sourceDecidegree), sourceDecidegree, this.isSetDecidegree()));
                        copy.setDecidegree(copyDecidegree);
                    } else {
                        if (decidegreeShouldBeCopiedAndSet == Boolean.FALSE) {
                            copy.decidegree = null;
                        }
                    }
                }
                {
                    Boolean centidegreeShouldBeCopiedAndSet = strategy.shouldBeCopiedAndSet(locator, this.isSetCentidegree());
                    if (centidegreeShouldBeCopiedAndSet == Boolean.TRUE) {
                        SexagesimalPresentationType.GeoDegreeFraction.Centidegree sourceCentidegree;
                        sourceCentidegree = this.getCentidegree();
                        SexagesimalPresentationType.GeoDegreeFraction.Centidegree copyCentidegree = ((SexagesimalPresentationType.GeoDegreeFraction.Centidegree) strategy.copy(LocatorUtils.property(locator, "centidegree", sourceCentidegree), sourceCentidegree, this.isSetCentidegree()));
                        copy.setCentidegree(copyCentidegree);
                    } else {
                        if (centidegreeShouldBeCopiedAndSet == Boolean.FALSE) {
                            copy.centidegree = null;
                        }
                    }
                }
                {
                    Boolean millidegreeShouldBeCopiedAndSet = strategy.shouldBeCopiedAndSet(locator, this.isSetMillidegree());
                    if (millidegreeShouldBeCopiedAndSet == Boolean.TRUE) {
                        SexagesimalPresentationType.GeoDegreeFraction.Millidegree sourceMillidegree;
                        sourceMillidegree = this.getMillidegree();
                        SexagesimalPresentationType.GeoDegreeFraction.Millidegree copyMillidegree = ((SexagesimalPresentationType.GeoDegreeFraction.Millidegree) strategy.copy(LocatorUtils.property(locator, "millidegree", sourceMillidegree), sourceMillidegree, this.isSetMillidegree()));
                        copy.setMillidegree(copyMillidegree);
                    } else {
                        if (millidegreeShouldBeCopiedAndSet == Boolean.FALSE) {
                            copy.millidegree = null;
                        }
                    }
                }
                {
                    Boolean decimillidegreeShouldBeCopiedAndSet = strategy.shouldBeCopiedAndSet(locator, this.isSetDecimillidegree());
                    if (decimillidegreeShouldBeCopiedAndSet == Boolean.TRUE) {
                        SexagesimalPresentationType.GeoDegreeFraction.Decimillidegree sourceDecimillidegree;
                        sourceDecimillidegree = this.getDecimillidegree();
                        SexagesimalPresentationType.GeoDegreeFraction.Decimillidegree copyDecimillidegree = ((SexagesimalPresentationType.GeoDegreeFraction.Decimillidegree) strategy.copy(LocatorUtils.property(locator, "decimillidegree", sourceDecimillidegree), sourceDecimillidegree, this.isSetDecimillidegree()));
                        copy.setDecimillidegree(copyDecimillidegree);
                    } else {
                        if (decimillidegreeShouldBeCopiedAndSet == Boolean.FALSE) {
                            copy.decimillidegree = null;
                        }
                    }
                }
                {
                    Boolean centimillidegreeShouldBeCopiedAndSet = strategy.shouldBeCopiedAndSet(locator, this.isSetCentimillidegree());
                    if (centimillidegreeShouldBeCopiedAndSet == Boolean.TRUE) {
                        SexagesimalPresentationType.GeoDegreeFraction.Centimillidegree sourceCentimillidegree;
                        sourceCentimillidegree = this.getCentimillidegree();
                        SexagesimalPresentationType.GeoDegreeFraction.Centimillidegree copyCentimillidegree = ((SexagesimalPresentationType.GeoDegreeFraction.Centimillidegree) strategy.copy(LocatorUtils.property(locator, "centimillidegree", sourceCentimillidegree), sourceCentimillidegree, this.isSetCentimillidegree()));
                        copy.setCentimillidegree(copyCentimillidegree);
                    } else {
                        if (centimillidegreeShouldBeCopiedAndSet == Boolean.FALSE) {
                            copy.centimillidegree = null;
                        }
                    }
                }
                {
                    Boolean microdegreeShouldBeCopiedAndSet = strategy.shouldBeCopiedAndSet(locator, this.isSetMicrodegree());
                    if (microdegreeShouldBeCopiedAndSet == Boolean.TRUE) {
                        SexagesimalPresentationType.GeoDegreeFraction.Microdegree sourceMicrodegree;
                        sourceMicrodegree = this.getMicrodegree();
                        SexagesimalPresentationType.GeoDegreeFraction.Microdegree copyMicrodegree = ((SexagesimalPresentationType.GeoDegreeFraction.Microdegree) strategy.copy(LocatorUtils.property(locator, "microdegree", sourceMicrodegree), sourceMicrodegree, this.isSetMicrodegree()));
                        copy.setMicrodegree(copyMicrodegree);
                    } else {
                        if (microdegreeShouldBeCopiedAndSet == Boolean.FALSE) {
                            copy.microdegree = null;
                        }
                    }
                }
            }
            return draftCopy;
        }

        public Object createNewInstance() {
            return new SexagesimalPresentationType.GeoDegreeFraction();
        }

        public void mergeFrom(Object left, Object right) {
            final MergeStrategy2 strategy = JAXBMergeStrategy.INSTANCE;
            mergeFrom(null, null, left, right, strategy);
        }

        public void mergeFrom(ObjectLocator leftLocator, ObjectLocator rightLocator, Object left, Object right, MergeStrategy2 strategy) {
            if (right instanceof SexagesimalPresentationType.GeoDegreeFraction) {
                final SexagesimalPresentationType.GeoDegreeFraction target = this;
                final SexagesimalPresentationType.GeoDegreeFraction leftObject = ((SexagesimalPresentationType.GeoDegreeFraction) left);
                final SexagesimalPresentationType.GeoDegreeFraction rightObject = ((SexagesimalPresentationType.GeoDegreeFraction) right);
                {
                    Boolean decidegreeShouldBeMergedAndSet = strategy.shouldBeMergedAndSet(leftLocator, rightLocator, leftObject.isSetDecidegree(), rightObject.isSetDecidegree());
                    if (decidegreeShouldBeMergedAndSet == Boolean.TRUE) {
                        SexagesimalPresentationType.GeoDegreeFraction.Decidegree lhsDecidegree;
                        lhsDecidegree = leftObject.getDecidegree();
                        SexagesimalPresentationType.GeoDegreeFraction.Decidegree rhsDecidegree;
                        rhsDecidegree = rightObject.getDecidegree();
                        SexagesimalPresentationType.GeoDegreeFraction.Decidegree mergedDecidegree = ((SexagesimalPresentationType.GeoDegreeFraction.Decidegree) strategy.merge(LocatorUtils.property(leftLocator, "decidegree", lhsDecidegree), LocatorUtils.property(rightLocator, "decidegree", rhsDecidegree), lhsDecidegree, rhsDecidegree, leftObject.isSetDecidegree(), rightObject.isSetDecidegree()));
                        target.setDecidegree(mergedDecidegree);
                    } else {
                        if (decidegreeShouldBeMergedAndSet == Boolean.FALSE) {
                            target.decidegree = null;
                        }
                    }
                }
                {
                    Boolean centidegreeShouldBeMergedAndSet = strategy.shouldBeMergedAndSet(leftLocator, rightLocator, leftObject.isSetCentidegree(), rightObject.isSetCentidegree());
                    if (centidegreeShouldBeMergedAndSet == Boolean.TRUE) {
                        SexagesimalPresentationType.GeoDegreeFraction.Centidegree lhsCentidegree;
                        lhsCentidegree = leftObject.getCentidegree();
                        SexagesimalPresentationType.GeoDegreeFraction.Centidegree rhsCentidegree;
                        rhsCentidegree = rightObject.getCentidegree();
                        SexagesimalPresentationType.GeoDegreeFraction.Centidegree mergedCentidegree = ((SexagesimalPresentationType.GeoDegreeFraction.Centidegree) strategy.merge(LocatorUtils.property(leftLocator, "centidegree", lhsCentidegree), LocatorUtils.property(rightLocator, "centidegree", rhsCentidegree), lhsCentidegree, rhsCentidegree, leftObject.isSetCentidegree(), rightObject.isSetCentidegree()));
                        target.setCentidegree(mergedCentidegree);
                    } else {
                        if (centidegreeShouldBeMergedAndSet == Boolean.FALSE) {
                            target.centidegree = null;
                        }
                    }
                }
                {
                    Boolean millidegreeShouldBeMergedAndSet = strategy.shouldBeMergedAndSet(leftLocator, rightLocator, leftObject.isSetMillidegree(), rightObject.isSetMillidegree());
                    if (millidegreeShouldBeMergedAndSet == Boolean.TRUE) {
                        SexagesimalPresentationType.GeoDegreeFraction.Millidegree lhsMillidegree;
                        lhsMillidegree = leftObject.getMillidegree();
                        SexagesimalPresentationType.GeoDegreeFraction.Millidegree rhsMillidegree;
                        rhsMillidegree = rightObject.getMillidegree();
                        SexagesimalPresentationType.GeoDegreeFraction.Millidegree mergedMillidegree = ((SexagesimalPresentationType.GeoDegreeFraction.Millidegree) strategy.merge(LocatorUtils.property(leftLocator, "millidegree", lhsMillidegree), LocatorUtils.property(rightLocator, "millidegree", rhsMillidegree), lhsMillidegree, rhsMillidegree, leftObject.isSetMillidegree(), rightObject.isSetMillidegree()));
                        target.setMillidegree(mergedMillidegree);
                    } else {
                        if (millidegreeShouldBeMergedAndSet == Boolean.FALSE) {
                            target.millidegree = null;
                        }
                    }
                }
                {
                    Boolean decimillidegreeShouldBeMergedAndSet = strategy.shouldBeMergedAndSet(leftLocator, rightLocator, leftObject.isSetDecimillidegree(), rightObject.isSetDecimillidegree());
                    if (decimillidegreeShouldBeMergedAndSet == Boolean.TRUE) {
                        SexagesimalPresentationType.GeoDegreeFraction.Decimillidegree lhsDecimillidegree;
                        lhsDecimillidegree = leftObject.getDecimillidegree();
                        SexagesimalPresentationType.GeoDegreeFraction.Decimillidegree rhsDecimillidegree;
                        rhsDecimillidegree = rightObject.getDecimillidegree();
                        SexagesimalPresentationType.GeoDegreeFraction.Decimillidegree mergedDecimillidegree = ((SexagesimalPresentationType.GeoDegreeFraction.Decimillidegree) strategy.merge(LocatorUtils.property(leftLocator, "decimillidegree", lhsDecimillidegree), LocatorUtils.property(rightLocator, "decimillidegree", rhsDecimillidegree), lhsDecimillidegree, rhsDecimillidegree, leftObject.isSetDecimillidegree(), rightObject.isSetDecimillidegree()));
                        target.setDecimillidegree(mergedDecimillidegree);
                    } else {
                        if (decimillidegreeShouldBeMergedAndSet == Boolean.FALSE) {
                            target.decimillidegree = null;
                        }
                    }
                }
                {
                    Boolean centimillidegreeShouldBeMergedAndSet = strategy.shouldBeMergedAndSet(leftLocator, rightLocator, leftObject.isSetCentimillidegree(), rightObject.isSetCentimillidegree());
                    if (centimillidegreeShouldBeMergedAndSet == Boolean.TRUE) {
                        SexagesimalPresentationType.GeoDegreeFraction.Centimillidegree lhsCentimillidegree;
                        lhsCentimillidegree = leftObject.getCentimillidegree();
                        SexagesimalPresentationType.GeoDegreeFraction.Centimillidegree rhsCentimillidegree;
                        rhsCentimillidegree = rightObject.getCentimillidegree();
                        SexagesimalPresentationType.GeoDegreeFraction.Centimillidegree mergedCentimillidegree = ((SexagesimalPresentationType.GeoDegreeFraction.Centimillidegree) strategy.merge(LocatorUtils.property(leftLocator, "centimillidegree", lhsCentimillidegree), LocatorUtils.property(rightLocator, "centimillidegree", rhsCentimillidegree), lhsCentimillidegree, rhsCentimillidegree, leftObject.isSetCentimillidegree(), rightObject.isSetCentimillidegree()));
                        target.setCentimillidegree(mergedCentimillidegree);
                    } else {
                        if (centimillidegreeShouldBeMergedAndSet == Boolean.FALSE) {
                            target.centimillidegree = null;
                        }
                    }
                }
                {
                    Boolean microdegreeShouldBeMergedAndSet = strategy.shouldBeMergedAndSet(leftLocator, rightLocator, leftObject.isSetMicrodegree(), rightObject.isSetMicrodegree());
                    if (microdegreeShouldBeMergedAndSet == Boolean.TRUE) {
                        SexagesimalPresentationType.GeoDegreeFraction.Microdegree lhsMicrodegree;
                        lhsMicrodegree = leftObject.getMicrodegree();
                        SexagesimalPresentationType.GeoDegreeFraction.Microdegree rhsMicrodegree;
                        rhsMicrodegree = rightObject.getMicrodegree();
                        SexagesimalPresentationType.GeoDegreeFraction.Microdegree mergedMicrodegree = ((SexagesimalPresentationType.GeoDegreeFraction.Microdegree) strategy.merge(LocatorUtils.property(leftLocator, "microdegree", lhsMicrodegree), LocatorUtils.property(rightLocator, "microdegree", rhsMicrodegree), lhsMicrodegree, rhsMicrodegree, leftObject.isSetMicrodegree(), rightObject.isSetMicrodegree()));
                        target.setMicrodegree(mergedMicrodegree);
                    } else {
                        if (microdegreeShouldBeMergedAndSet == Boolean.FALSE) {
                            target.microdegree = null;
                        }
                    }
                }
            }
        }


        /**
         * <p>Java class for anonymous complex type.
         * 
         * <p>The following schema fragment specifies the expected content contained within this class.
         * 
         * <pre>
         * &lt;complexType&gt;
         *   &lt;complexContent&gt;
         *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
         *       &lt;sequence&gt;
         *         &lt;element name="latitude" type="{http://metadata.ces.mil/mdr/ns/GSIP/tspi/2.0/core}HectoType"/&gt;
         *         &lt;element name="longitude" type="{http://metadata.ces.mil/mdr/ns/GSIP/tspi/2.0/core}HectoType"/&gt;
         *       &lt;/sequence&gt;
         *     &lt;/restriction&gt;
         *   &lt;/complexContent&gt;
         * &lt;/complexType&gt;
         * </pre>
         * 
         * 
         */
        @XmlAccessorType(XmlAccessType.FIELD)
        @XmlType(name = "", propOrder = {
            "latitude",
            "longitude"
        })
        public static class Centidegree implements Serializable, Cloneable, CopyTo2, Equals2, HashCode2, MergeFrom2, ToString2
        {

            private final static long serialVersionUID = 1L;
            @XmlSchemaType(name = "integer")
            @NotNull(message = "Centidegree.latitude {javax.validation.constraints.NotNull.message}")
            @DecimalMax("99")
            @DecimalMin("00")
            protected int latitude;
            @XmlSchemaType(name = "integer")
            @NotNull(message = "Centidegree.longitude {javax.validation.constraints.NotNull.message}")
            @DecimalMax("99")
            @DecimalMin("00")
            protected int longitude;

            /**
             * Gets the value of the latitude property.
             * 
             */
            public int getLatitude() {
                return latitude;
            }

            /**
             * Sets the value of the latitude property.
             * 
             */
            public void setLatitude(int value) {
                this.latitude = value;
            }

            public boolean isSetLatitude() {
                return true;
            }

            /**
             * Gets the value of the longitude property.
             * 
             */
            public int getLongitude() {
                return longitude;
            }

            /**
             * Sets the value of the longitude property.
             * 
             */
            public void setLongitude(int value) {
                this.longitude = value;
            }

            public boolean isSetLongitude() {
                return true;
            }

            public String toString() {
                final ToStringStrategy2 strategy = JAXBToStringStrategy.INSTANCE;
                final StringBuilder buffer = new StringBuilder();
                append(null, buffer, strategy);
                return buffer.toString();
            }

            public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy2 strategy) {
                strategy.appendStart(locator, this, buffer);
                appendFields(locator, buffer, strategy);
                strategy.appendEnd(locator, this, buffer);
                return buffer;
            }

            public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy2 strategy) {
                {
                    int theLatitude;
                    theLatitude = this.getLatitude();
                    strategy.appendField(locator, this, "latitude", buffer, theLatitude, true);
                }
                {
                    int theLongitude;
                    theLongitude = this.getLongitude();
                    strategy.appendField(locator, this, "longitude", buffer, theLongitude, true);
                }
                return buffer;
            }

            public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy2 strategy) {
                if ((object == null)||(this.getClass()!= object.getClass())) {
                    return false;
                }
                if (this == object) {
                    return true;
                }
                final SexagesimalPresentationType.GeoDegreeFraction.Centidegree that = ((SexagesimalPresentationType.GeoDegreeFraction.Centidegree) object);
                {
                    int lhsLatitude;
                    lhsLatitude = this.getLatitude();
                    int rhsLatitude;
                    rhsLatitude = that.getLatitude();
                    if (!strategy.equals(LocatorUtils.property(thisLocator, "latitude", lhsLatitude), LocatorUtils.property(thatLocator, "latitude", rhsLatitude), lhsLatitude, rhsLatitude, true, true)) {
                        return false;
                    }
                }
                {
                    int lhsLongitude;
                    lhsLongitude = this.getLongitude();
                    int rhsLongitude;
                    rhsLongitude = that.getLongitude();
                    if (!strategy.equals(LocatorUtils.property(thisLocator, "longitude", lhsLongitude), LocatorUtils.property(thatLocator, "longitude", rhsLongitude), lhsLongitude, rhsLongitude, true, true)) {
                        return false;
                    }
                }
                return true;
            }

            public boolean equals(Object object) {
                final EqualsStrategy2 strategy = JAXBEqualsStrategy.INSTANCE;
                return equals(null, null, object, strategy);
            }

            public int hashCode(ObjectLocator locator, HashCodeStrategy2 strategy) {
                int currentHashCode = 1;
                {
                    int theLatitude;
                    theLatitude = this.getLatitude();
                    currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "latitude", theLatitude), currentHashCode, theLatitude, true);
                }
                {
                    int theLongitude;
                    theLongitude = this.getLongitude();
                    currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "longitude", theLongitude), currentHashCode, theLongitude, true);
                }
                return currentHashCode;
            }

            public int hashCode() {
                final HashCodeStrategy2 strategy = JAXBHashCodeStrategy.INSTANCE;
                return this.hashCode(null, strategy);
            }

            public Object clone() {
                return copyTo(createNewInstance());
            }

            public Object copyTo(Object target) {
                final CopyStrategy2 strategy = JAXBCopyStrategy.INSTANCE;
                return copyTo(null, target, strategy);
            }

            public Object copyTo(ObjectLocator locator, Object target, CopyStrategy2 strategy) {
                final Object draftCopy = ((target == null)?createNewInstance():target);
                if (draftCopy instanceof SexagesimalPresentationType.GeoDegreeFraction.Centidegree) {
                    final SexagesimalPresentationType.GeoDegreeFraction.Centidegree copy = ((SexagesimalPresentationType.GeoDegreeFraction.Centidegree) draftCopy);
                    {
                        Boolean latitudeShouldBeCopiedAndSet = strategy.shouldBeCopiedAndSet(locator, true);
                        if (latitudeShouldBeCopiedAndSet == Boolean.TRUE) {
                            int sourceLatitude;
                            sourceLatitude = this.getLatitude();
                            int copyLatitude = strategy.copy(LocatorUtils.property(locator, "latitude", sourceLatitude), sourceLatitude, true);
                            copy.setLatitude(copyLatitude);
                        } else {
                            if (latitudeShouldBeCopiedAndSet == Boolean.FALSE) {
                            }
                        }
                    }
                    {
                        Boolean longitudeShouldBeCopiedAndSet = strategy.shouldBeCopiedAndSet(locator, true);
                        if (longitudeShouldBeCopiedAndSet == Boolean.TRUE) {
                            int sourceLongitude;
                            sourceLongitude = this.getLongitude();
                            int copyLongitude = strategy.copy(LocatorUtils.property(locator, "longitude", sourceLongitude), sourceLongitude, true);
                            copy.setLongitude(copyLongitude);
                        } else {
                            if (longitudeShouldBeCopiedAndSet == Boolean.FALSE) {
                            }
                        }
                    }
                }
                return draftCopy;
            }

            public Object createNewInstance() {
                return new SexagesimalPresentationType.GeoDegreeFraction.Centidegree();
            }

            public void mergeFrom(Object left, Object right) {
                final MergeStrategy2 strategy = JAXBMergeStrategy.INSTANCE;
                mergeFrom(null, null, left, right, strategy);
            }

            public void mergeFrom(ObjectLocator leftLocator, ObjectLocator rightLocator, Object left, Object right, MergeStrategy2 strategy) {
                if (right instanceof SexagesimalPresentationType.GeoDegreeFraction.Centidegree) {
                    final SexagesimalPresentationType.GeoDegreeFraction.Centidegree target = this;
                    final SexagesimalPresentationType.GeoDegreeFraction.Centidegree leftObject = ((SexagesimalPresentationType.GeoDegreeFraction.Centidegree) left);
                    final SexagesimalPresentationType.GeoDegreeFraction.Centidegree rightObject = ((SexagesimalPresentationType.GeoDegreeFraction.Centidegree) right);
                    {
                        Boolean latitudeShouldBeMergedAndSet = strategy.shouldBeMergedAndSet(leftLocator, rightLocator, true, true);
                        if (latitudeShouldBeMergedAndSet == Boolean.TRUE) {
                            int lhsLatitude;
                            lhsLatitude = leftObject.getLatitude();
                            int rhsLatitude;
                            rhsLatitude = rightObject.getLatitude();
                            int mergedLatitude = ((int) strategy.merge(LocatorUtils.property(leftLocator, "latitude", lhsLatitude), LocatorUtils.property(rightLocator, "latitude", rhsLatitude), lhsLatitude, rhsLatitude, true, true));
                            target.setLatitude(mergedLatitude);
                        } else {
                            if (latitudeShouldBeMergedAndSet == Boolean.FALSE) {
                            }
                        }
                    }
                    {
                        Boolean longitudeShouldBeMergedAndSet = strategy.shouldBeMergedAndSet(leftLocator, rightLocator, true, true);
                        if (longitudeShouldBeMergedAndSet == Boolean.TRUE) {
                            int lhsLongitude;
                            lhsLongitude = leftObject.getLongitude();
                            int rhsLongitude;
                            rhsLongitude = rightObject.getLongitude();
                            int mergedLongitude = ((int) strategy.merge(LocatorUtils.property(leftLocator, "longitude", lhsLongitude), LocatorUtils.property(rightLocator, "longitude", rhsLongitude), lhsLongitude, rhsLongitude, true, true));
                            target.setLongitude(mergedLongitude);
                        } else {
                            if (longitudeShouldBeMergedAndSet == Boolean.FALSE) {
                            }
                        }
                    }
                }
            }

        }


        /**
         * <p>Java class for anonymous complex type.
         * 
         * <p>The following schema fragment specifies the expected content contained within this class.
         * 
         * <pre>
         * &lt;complexType&gt;
         *   &lt;complexContent&gt;
         *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
         *       &lt;sequence&gt;
         *         &lt;element name="latitude" type="{http://metadata.ces.mil/mdr/ns/GSIP/tspi/2.0/core}HectokiloType"/&gt;
         *         &lt;element name="longitude" type="{http://metadata.ces.mil/mdr/ns/GSIP/tspi/2.0/core}HectokiloType"/&gt;
         *       &lt;/sequence&gt;
         *     &lt;/restriction&gt;
         *   &lt;/complexContent&gt;
         * &lt;/complexType&gt;
         * </pre>
         * 
         * 
         */
        @XmlAccessorType(XmlAccessType.FIELD)
        @XmlType(name = "", propOrder = {
            "latitude",
            "longitude"
        })
        public static class Centimillidegree implements Serializable, Cloneable, CopyTo2, Equals2, HashCode2, MergeFrom2, ToString2
        {

            private final static long serialVersionUID = 1L;
            @XmlSchemaType(name = "integer")
            @NotNull(message = "Centimillidegree.latitude {javax.validation.constraints.NotNull.message}")
            @DecimalMax("99999")
            @DecimalMin("00000")
            protected int latitude;
            @XmlSchemaType(name = "integer")
            @NotNull(message = "Centimillidegree.longitude {javax.validation.constraints.NotNull.message}")
            @DecimalMax("99999")
            @DecimalMin("00000")
            protected int longitude;

            /**
             * Gets the value of the latitude property.
             * 
             */
            public int getLatitude() {
                return latitude;
            }

            /**
             * Sets the value of the latitude property.
             * 
             */
            public void setLatitude(int value) {
                this.latitude = value;
            }

            public boolean isSetLatitude() {
                return true;
            }

            /**
             * Gets the value of the longitude property.
             * 
             */
            public int getLongitude() {
                return longitude;
            }

            /**
             * Sets the value of the longitude property.
             * 
             */
            public void setLongitude(int value) {
                this.longitude = value;
            }

            public boolean isSetLongitude() {
                return true;
            }

            public String toString() {
                final ToStringStrategy2 strategy = JAXBToStringStrategy.INSTANCE;
                final StringBuilder buffer = new StringBuilder();
                append(null, buffer, strategy);
                return buffer.toString();
            }

            public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy2 strategy) {
                strategy.appendStart(locator, this, buffer);
                appendFields(locator, buffer, strategy);
                strategy.appendEnd(locator, this, buffer);
                return buffer;
            }

            public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy2 strategy) {
                {
                    int theLatitude;
                    theLatitude = this.getLatitude();
                    strategy.appendField(locator, this, "latitude", buffer, theLatitude, true);
                }
                {
                    int theLongitude;
                    theLongitude = this.getLongitude();
                    strategy.appendField(locator, this, "longitude", buffer, theLongitude, true);
                }
                return buffer;
            }

            public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy2 strategy) {
                if ((object == null)||(this.getClass()!= object.getClass())) {
                    return false;
                }
                if (this == object) {
                    return true;
                }
                final SexagesimalPresentationType.GeoDegreeFraction.Centimillidegree that = ((SexagesimalPresentationType.GeoDegreeFraction.Centimillidegree) object);
                {
                    int lhsLatitude;
                    lhsLatitude = this.getLatitude();
                    int rhsLatitude;
                    rhsLatitude = that.getLatitude();
                    if (!strategy.equals(LocatorUtils.property(thisLocator, "latitude", lhsLatitude), LocatorUtils.property(thatLocator, "latitude", rhsLatitude), lhsLatitude, rhsLatitude, true, true)) {
                        return false;
                    }
                }
                {
                    int lhsLongitude;
                    lhsLongitude = this.getLongitude();
                    int rhsLongitude;
                    rhsLongitude = that.getLongitude();
                    if (!strategy.equals(LocatorUtils.property(thisLocator, "longitude", lhsLongitude), LocatorUtils.property(thatLocator, "longitude", rhsLongitude), lhsLongitude, rhsLongitude, true, true)) {
                        return false;
                    }
                }
                return true;
            }

            public boolean equals(Object object) {
                final EqualsStrategy2 strategy = JAXBEqualsStrategy.INSTANCE;
                return equals(null, null, object, strategy);
            }

            public int hashCode(ObjectLocator locator, HashCodeStrategy2 strategy) {
                int currentHashCode = 1;
                {
                    int theLatitude;
                    theLatitude = this.getLatitude();
                    currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "latitude", theLatitude), currentHashCode, theLatitude, true);
                }
                {
                    int theLongitude;
                    theLongitude = this.getLongitude();
                    currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "longitude", theLongitude), currentHashCode, theLongitude, true);
                }
                return currentHashCode;
            }

            public int hashCode() {
                final HashCodeStrategy2 strategy = JAXBHashCodeStrategy.INSTANCE;
                return this.hashCode(null, strategy);
            }

            public Object clone() {
                return copyTo(createNewInstance());
            }

            public Object copyTo(Object target) {
                final CopyStrategy2 strategy = JAXBCopyStrategy.INSTANCE;
                return copyTo(null, target, strategy);
            }

            public Object copyTo(ObjectLocator locator, Object target, CopyStrategy2 strategy) {
                final Object draftCopy = ((target == null)?createNewInstance():target);
                if (draftCopy instanceof SexagesimalPresentationType.GeoDegreeFraction.Centimillidegree) {
                    final SexagesimalPresentationType.GeoDegreeFraction.Centimillidegree copy = ((SexagesimalPresentationType.GeoDegreeFraction.Centimillidegree) draftCopy);
                    {
                        Boolean latitudeShouldBeCopiedAndSet = strategy.shouldBeCopiedAndSet(locator, true);
                        if (latitudeShouldBeCopiedAndSet == Boolean.TRUE) {
                            int sourceLatitude;
                            sourceLatitude = this.getLatitude();
                            int copyLatitude = strategy.copy(LocatorUtils.property(locator, "latitude", sourceLatitude), sourceLatitude, true);
                            copy.setLatitude(copyLatitude);
                        } else {
                            if (latitudeShouldBeCopiedAndSet == Boolean.FALSE) {
                            }
                        }
                    }
                    {
                        Boolean longitudeShouldBeCopiedAndSet = strategy.shouldBeCopiedAndSet(locator, true);
                        if (longitudeShouldBeCopiedAndSet == Boolean.TRUE) {
                            int sourceLongitude;
                            sourceLongitude = this.getLongitude();
                            int copyLongitude = strategy.copy(LocatorUtils.property(locator, "longitude", sourceLongitude), sourceLongitude, true);
                            copy.setLongitude(copyLongitude);
                        } else {
                            if (longitudeShouldBeCopiedAndSet == Boolean.FALSE) {
                            }
                        }
                    }
                }
                return draftCopy;
            }

            public Object createNewInstance() {
                return new SexagesimalPresentationType.GeoDegreeFraction.Centimillidegree();
            }

            public void mergeFrom(Object left, Object right) {
                final MergeStrategy2 strategy = JAXBMergeStrategy.INSTANCE;
                mergeFrom(null, null, left, right, strategy);
            }

            public void mergeFrom(ObjectLocator leftLocator, ObjectLocator rightLocator, Object left, Object right, MergeStrategy2 strategy) {
                if (right instanceof SexagesimalPresentationType.GeoDegreeFraction.Centimillidegree) {
                    final SexagesimalPresentationType.GeoDegreeFraction.Centimillidegree target = this;
                    final SexagesimalPresentationType.GeoDegreeFraction.Centimillidegree leftObject = ((SexagesimalPresentationType.GeoDegreeFraction.Centimillidegree) left);
                    final SexagesimalPresentationType.GeoDegreeFraction.Centimillidegree rightObject = ((SexagesimalPresentationType.GeoDegreeFraction.Centimillidegree) right);
                    {
                        Boolean latitudeShouldBeMergedAndSet = strategy.shouldBeMergedAndSet(leftLocator, rightLocator, true, true);
                        if (latitudeShouldBeMergedAndSet == Boolean.TRUE) {
                            int lhsLatitude;
                            lhsLatitude = leftObject.getLatitude();
                            int rhsLatitude;
                            rhsLatitude = rightObject.getLatitude();
                            int mergedLatitude = ((int) strategy.merge(LocatorUtils.property(leftLocator, "latitude", lhsLatitude), LocatorUtils.property(rightLocator, "latitude", rhsLatitude), lhsLatitude, rhsLatitude, true, true));
                            target.setLatitude(mergedLatitude);
                        } else {
                            if (latitudeShouldBeMergedAndSet == Boolean.FALSE) {
                            }
                        }
                    }
                    {
                        Boolean longitudeShouldBeMergedAndSet = strategy.shouldBeMergedAndSet(leftLocator, rightLocator, true, true);
                        if (longitudeShouldBeMergedAndSet == Boolean.TRUE) {
                            int lhsLongitude;
                            lhsLongitude = leftObject.getLongitude();
                            int rhsLongitude;
                            rhsLongitude = rightObject.getLongitude();
                            int mergedLongitude = ((int) strategy.merge(LocatorUtils.property(leftLocator, "longitude", lhsLongitude), LocatorUtils.property(rightLocator, "longitude", rhsLongitude), lhsLongitude, rhsLongitude, true, true));
                            target.setLongitude(mergedLongitude);
                        } else {
                            if (longitudeShouldBeMergedAndSet == Boolean.FALSE) {
                            }
                        }
                    }
                }
            }

        }


        /**
         * <p>Java class for anonymous complex type.
         * 
         * <p>The following schema fragment specifies the expected content contained within this class.
         * 
         * <pre>
         * &lt;complexType&gt;
         *   &lt;complexContent&gt;
         *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
         *       &lt;sequence&gt;
         *         &lt;element name="latitude" type="{http://metadata.ces.mil/mdr/ns/GSIP/tspi/2.0/core}DecaType"/&gt;
         *         &lt;element name="longitude" type="{http://metadata.ces.mil/mdr/ns/GSIP/tspi/2.0/core}DecaType"/&gt;
         *       &lt;/sequence&gt;
         *     &lt;/restriction&gt;
         *   &lt;/complexContent&gt;
         * &lt;/complexType&gt;
         * </pre>
         * 
         * 
         */
        @XmlAccessorType(XmlAccessType.FIELD)
        @XmlType(name = "", propOrder = {
            "latitude",
            "longitude"
        })
        public static class Decidegree implements Serializable, Cloneable, CopyTo2, Equals2, HashCode2, MergeFrom2, ToString2
        {

            private final static long serialVersionUID = 1L;
            @XmlSchemaType(name = "integer")
            @NotNull(message = "Decidegree.latitude {javax.validation.constraints.NotNull.message}")
            @DecimalMax("9")
            @DecimalMin("0")
            protected int latitude;
            @XmlSchemaType(name = "integer")
            @NotNull(message = "Decidegree.longitude {javax.validation.constraints.NotNull.message}")
            @DecimalMax("9")
            @DecimalMin("0")
            protected int longitude;

            /**
             * Gets the value of the latitude property.
             * 
             */
            public int getLatitude() {
                return latitude;
            }

            /**
             * Sets the value of the latitude property.
             * 
             */
            public void setLatitude(int value) {
                this.latitude = value;
            }

            public boolean isSetLatitude() {
                return true;
            }

            /**
             * Gets the value of the longitude property.
             * 
             */
            public int getLongitude() {
                return longitude;
            }

            /**
             * Sets the value of the longitude property.
             * 
             */
            public void setLongitude(int value) {
                this.longitude = value;
            }

            public boolean isSetLongitude() {
                return true;
            }

            public String toString() {
                final ToStringStrategy2 strategy = JAXBToStringStrategy.INSTANCE;
                final StringBuilder buffer = new StringBuilder();
                append(null, buffer, strategy);
                return buffer.toString();
            }

            public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy2 strategy) {
                strategy.appendStart(locator, this, buffer);
                appendFields(locator, buffer, strategy);
                strategy.appendEnd(locator, this, buffer);
                return buffer;
            }

            public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy2 strategy) {
                {
                    int theLatitude;
                    theLatitude = this.getLatitude();
                    strategy.appendField(locator, this, "latitude", buffer, theLatitude, true);
                }
                {
                    int theLongitude;
                    theLongitude = this.getLongitude();
                    strategy.appendField(locator, this, "longitude", buffer, theLongitude, true);
                }
                return buffer;
            }

            public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy2 strategy) {
                if ((object == null)||(this.getClass()!= object.getClass())) {
                    return false;
                }
                if (this == object) {
                    return true;
                }
                final SexagesimalPresentationType.GeoDegreeFraction.Decidegree that = ((SexagesimalPresentationType.GeoDegreeFraction.Decidegree) object);
                {
                    int lhsLatitude;
                    lhsLatitude = this.getLatitude();
                    int rhsLatitude;
                    rhsLatitude = that.getLatitude();
                    if (!strategy.equals(LocatorUtils.property(thisLocator, "latitude", lhsLatitude), LocatorUtils.property(thatLocator, "latitude", rhsLatitude), lhsLatitude, rhsLatitude, true, true)) {
                        return false;
                    }
                }
                {
                    int lhsLongitude;
                    lhsLongitude = this.getLongitude();
                    int rhsLongitude;
                    rhsLongitude = that.getLongitude();
                    if (!strategy.equals(LocatorUtils.property(thisLocator, "longitude", lhsLongitude), LocatorUtils.property(thatLocator, "longitude", rhsLongitude), lhsLongitude, rhsLongitude, true, true)) {
                        return false;
                    }
                }
                return true;
            }

            public boolean equals(Object object) {
                final EqualsStrategy2 strategy = JAXBEqualsStrategy.INSTANCE;
                return equals(null, null, object, strategy);
            }

            public int hashCode(ObjectLocator locator, HashCodeStrategy2 strategy) {
                int currentHashCode = 1;
                {
                    int theLatitude;
                    theLatitude = this.getLatitude();
                    currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "latitude", theLatitude), currentHashCode, theLatitude, true);
                }
                {
                    int theLongitude;
                    theLongitude = this.getLongitude();
                    currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "longitude", theLongitude), currentHashCode, theLongitude, true);
                }
                return currentHashCode;
            }

            public int hashCode() {
                final HashCodeStrategy2 strategy = JAXBHashCodeStrategy.INSTANCE;
                return this.hashCode(null, strategy);
            }

            public Object clone() {
                return copyTo(createNewInstance());
            }

            public Object copyTo(Object target) {
                final CopyStrategy2 strategy = JAXBCopyStrategy.INSTANCE;
                return copyTo(null, target, strategy);
            }

            public Object copyTo(ObjectLocator locator, Object target, CopyStrategy2 strategy) {
                final Object draftCopy = ((target == null)?createNewInstance():target);
                if (draftCopy instanceof SexagesimalPresentationType.GeoDegreeFraction.Decidegree) {
                    final SexagesimalPresentationType.GeoDegreeFraction.Decidegree copy = ((SexagesimalPresentationType.GeoDegreeFraction.Decidegree) draftCopy);
                    {
                        Boolean latitudeShouldBeCopiedAndSet = strategy.shouldBeCopiedAndSet(locator, true);
                        if (latitudeShouldBeCopiedAndSet == Boolean.TRUE) {
                            int sourceLatitude;
                            sourceLatitude = this.getLatitude();
                            int copyLatitude = strategy.copy(LocatorUtils.property(locator, "latitude", sourceLatitude), sourceLatitude, true);
                            copy.setLatitude(copyLatitude);
                        } else {
                            if (latitudeShouldBeCopiedAndSet == Boolean.FALSE) {
                            }
                        }
                    }
                    {
                        Boolean longitudeShouldBeCopiedAndSet = strategy.shouldBeCopiedAndSet(locator, true);
                        if (longitudeShouldBeCopiedAndSet == Boolean.TRUE) {
                            int sourceLongitude;
                            sourceLongitude = this.getLongitude();
                            int copyLongitude = strategy.copy(LocatorUtils.property(locator, "longitude", sourceLongitude), sourceLongitude, true);
                            copy.setLongitude(copyLongitude);
                        } else {
                            if (longitudeShouldBeCopiedAndSet == Boolean.FALSE) {
                            }
                        }
                    }
                }
                return draftCopy;
            }

            public Object createNewInstance() {
                return new SexagesimalPresentationType.GeoDegreeFraction.Decidegree();
            }

            public void mergeFrom(Object left, Object right) {
                final MergeStrategy2 strategy = JAXBMergeStrategy.INSTANCE;
                mergeFrom(null, null, left, right, strategy);
            }

            public void mergeFrom(ObjectLocator leftLocator, ObjectLocator rightLocator, Object left, Object right, MergeStrategy2 strategy) {
                if (right instanceof SexagesimalPresentationType.GeoDegreeFraction.Decidegree) {
                    final SexagesimalPresentationType.GeoDegreeFraction.Decidegree target = this;
                    final SexagesimalPresentationType.GeoDegreeFraction.Decidegree leftObject = ((SexagesimalPresentationType.GeoDegreeFraction.Decidegree) left);
                    final SexagesimalPresentationType.GeoDegreeFraction.Decidegree rightObject = ((SexagesimalPresentationType.GeoDegreeFraction.Decidegree) right);
                    {
                        Boolean latitudeShouldBeMergedAndSet = strategy.shouldBeMergedAndSet(leftLocator, rightLocator, true, true);
                        if (latitudeShouldBeMergedAndSet == Boolean.TRUE) {
                            int lhsLatitude;
                            lhsLatitude = leftObject.getLatitude();
                            int rhsLatitude;
                            rhsLatitude = rightObject.getLatitude();
                            int mergedLatitude = ((int) strategy.merge(LocatorUtils.property(leftLocator, "latitude", lhsLatitude), LocatorUtils.property(rightLocator, "latitude", rhsLatitude), lhsLatitude, rhsLatitude, true, true));
                            target.setLatitude(mergedLatitude);
                        } else {
                            if (latitudeShouldBeMergedAndSet == Boolean.FALSE) {
                            }
                        }
                    }
                    {
                        Boolean longitudeShouldBeMergedAndSet = strategy.shouldBeMergedAndSet(leftLocator, rightLocator, true, true);
                        if (longitudeShouldBeMergedAndSet == Boolean.TRUE) {
                            int lhsLongitude;
                            lhsLongitude = leftObject.getLongitude();
                            int rhsLongitude;
                            rhsLongitude = rightObject.getLongitude();
                            int mergedLongitude = ((int) strategy.merge(LocatorUtils.property(leftLocator, "longitude", lhsLongitude), LocatorUtils.property(rightLocator, "longitude", rhsLongitude), lhsLongitude, rhsLongitude, true, true));
                            target.setLongitude(mergedLongitude);
                        } else {
                            if (longitudeShouldBeMergedAndSet == Boolean.FALSE) {
                            }
                        }
                    }
                }
            }

        }


        /**
         * <p>Java class for anonymous complex type.
         * 
         * <p>The following schema fragment specifies the expected content contained within this class.
         * 
         * <pre>
         * &lt;complexType&gt;
         *   &lt;complexContent&gt;
         *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
         *       &lt;sequence&gt;
         *         &lt;element name="latitude" type="{http://metadata.ces.mil/mdr/ns/GSIP/tspi/2.0/core}DecakiloType"/&gt;
         *         &lt;element name="longitude" type="{http://metadata.ces.mil/mdr/ns/GSIP/tspi/2.0/core}DecakiloType"/&gt;
         *       &lt;/sequence&gt;
         *     &lt;/restriction&gt;
         *   &lt;/complexContent&gt;
         * &lt;/complexType&gt;
         * </pre>
         * 
         * 
         */
        @XmlAccessorType(XmlAccessType.FIELD)
        @XmlType(name = "", propOrder = {
            "latitude",
            "longitude"
        })
        public static class Decimillidegree implements Serializable, Cloneable, CopyTo2, Equals2, HashCode2, MergeFrom2, ToString2
        {

            private final static long serialVersionUID = 1L;
            @XmlSchemaType(name = "integer")
            @NotNull(message = "Decimillidegree.latitude {javax.validation.constraints.NotNull.message}")
            @DecimalMax("9999")
            @DecimalMin("0000")
            protected int latitude;
            @XmlSchemaType(name = "integer")
            @NotNull(message = "Decimillidegree.longitude {javax.validation.constraints.NotNull.message}")
            @DecimalMax("9999")
            @DecimalMin("0000")
            protected int longitude;

            /**
             * Gets the value of the latitude property.
             * 
             */
            public int getLatitude() {
                return latitude;
            }

            /**
             * Sets the value of the latitude property.
             * 
             */
            public void setLatitude(int value) {
                this.latitude = value;
            }

            public boolean isSetLatitude() {
                return true;
            }

            /**
             * Gets the value of the longitude property.
             * 
             */
            public int getLongitude() {
                return longitude;
            }

            /**
             * Sets the value of the longitude property.
             * 
             */
            public void setLongitude(int value) {
                this.longitude = value;
            }

            public boolean isSetLongitude() {
                return true;
            }

            public String toString() {
                final ToStringStrategy2 strategy = JAXBToStringStrategy.INSTANCE;
                final StringBuilder buffer = new StringBuilder();
                append(null, buffer, strategy);
                return buffer.toString();
            }

            public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy2 strategy) {
                strategy.appendStart(locator, this, buffer);
                appendFields(locator, buffer, strategy);
                strategy.appendEnd(locator, this, buffer);
                return buffer;
            }

            public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy2 strategy) {
                {
                    int theLatitude;
                    theLatitude = this.getLatitude();
                    strategy.appendField(locator, this, "latitude", buffer, theLatitude, true);
                }
                {
                    int theLongitude;
                    theLongitude = this.getLongitude();
                    strategy.appendField(locator, this, "longitude", buffer, theLongitude, true);
                }
                return buffer;
            }

            public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy2 strategy) {
                if ((object == null)||(this.getClass()!= object.getClass())) {
                    return false;
                }
                if (this == object) {
                    return true;
                }
                final SexagesimalPresentationType.GeoDegreeFraction.Decimillidegree that = ((SexagesimalPresentationType.GeoDegreeFraction.Decimillidegree) object);
                {
                    int lhsLatitude;
                    lhsLatitude = this.getLatitude();
                    int rhsLatitude;
                    rhsLatitude = that.getLatitude();
                    if (!strategy.equals(LocatorUtils.property(thisLocator, "latitude", lhsLatitude), LocatorUtils.property(thatLocator, "latitude", rhsLatitude), lhsLatitude, rhsLatitude, true, true)) {
                        return false;
                    }
                }
                {
                    int lhsLongitude;
                    lhsLongitude = this.getLongitude();
                    int rhsLongitude;
                    rhsLongitude = that.getLongitude();
                    if (!strategy.equals(LocatorUtils.property(thisLocator, "longitude", lhsLongitude), LocatorUtils.property(thatLocator, "longitude", rhsLongitude), lhsLongitude, rhsLongitude, true, true)) {
                        return false;
                    }
                }
                return true;
            }

            public boolean equals(Object object) {
                final EqualsStrategy2 strategy = JAXBEqualsStrategy.INSTANCE;
                return equals(null, null, object, strategy);
            }

            public int hashCode(ObjectLocator locator, HashCodeStrategy2 strategy) {
                int currentHashCode = 1;
                {
                    int theLatitude;
                    theLatitude = this.getLatitude();
                    currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "latitude", theLatitude), currentHashCode, theLatitude, true);
                }
                {
                    int theLongitude;
                    theLongitude = this.getLongitude();
                    currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "longitude", theLongitude), currentHashCode, theLongitude, true);
                }
                return currentHashCode;
            }

            public int hashCode() {
                final HashCodeStrategy2 strategy = JAXBHashCodeStrategy.INSTANCE;
                return this.hashCode(null, strategy);
            }

            public Object clone() {
                return copyTo(createNewInstance());
            }

            public Object copyTo(Object target) {
                final CopyStrategy2 strategy = JAXBCopyStrategy.INSTANCE;
                return copyTo(null, target, strategy);
            }

            public Object copyTo(ObjectLocator locator, Object target, CopyStrategy2 strategy) {
                final Object draftCopy = ((target == null)?createNewInstance():target);
                if (draftCopy instanceof SexagesimalPresentationType.GeoDegreeFraction.Decimillidegree) {
                    final SexagesimalPresentationType.GeoDegreeFraction.Decimillidegree copy = ((SexagesimalPresentationType.GeoDegreeFraction.Decimillidegree) draftCopy);
                    {
                        Boolean latitudeShouldBeCopiedAndSet = strategy.shouldBeCopiedAndSet(locator, true);
                        if (latitudeShouldBeCopiedAndSet == Boolean.TRUE) {
                            int sourceLatitude;
                            sourceLatitude = this.getLatitude();
                            int copyLatitude = strategy.copy(LocatorUtils.property(locator, "latitude", sourceLatitude), sourceLatitude, true);
                            copy.setLatitude(copyLatitude);
                        } else {
                            if (latitudeShouldBeCopiedAndSet == Boolean.FALSE) {
                            }
                        }
                    }
                    {
                        Boolean longitudeShouldBeCopiedAndSet = strategy.shouldBeCopiedAndSet(locator, true);
                        if (longitudeShouldBeCopiedAndSet == Boolean.TRUE) {
                            int sourceLongitude;
                            sourceLongitude = this.getLongitude();
                            int copyLongitude = strategy.copy(LocatorUtils.property(locator, "longitude", sourceLongitude), sourceLongitude, true);
                            copy.setLongitude(copyLongitude);
                        } else {
                            if (longitudeShouldBeCopiedAndSet == Boolean.FALSE) {
                            }
                        }
                    }
                }
                return draftCopy;
            }

            public Object createNewInstance() {
                return new SexagesimalPresentationType.GeoDegreeFraction.Decimillidegree();
            }

            public void mergeFrom(Object left, Object right) {
                final MergeStrategy2 strategy = JAXBMergeStrategy.INSTANCE;
                mergeFrom(null, null, left, right, strategy);
            }

            public void mergeFrom(ObjectLocator leftLocator, ObjectLocator rightLocator, Object left, Object right, MergeStrategy2 strategy) {
                if (right instanceof SexagesimalPresentationType.GeoDegreeFraction.Decimillidegree) {
                    final SexagesimalPresentationType.GeoDegreeFraction.Decimillidegree target = this;
                    final SexagesimalPresentationType.GeoDegreeFraction.Decimillidegree leftObject = ((SexagesimalPresentationType.GeoDegreeFraction.Decimillidegree) left);
                    final SexagesimalPresentationType.GeoDegreeFraction.Decimillidegree rightObject = ((SexagesimalPresentationType.GeoDegreeFraction.Decimillidegree) right);
                    {
                        Boolean latitudeShouldBeMergedAndSet = strategy.shouldBeMergedAndSet(leftLocator, rightLocator, true, true);
                        if (latitudeShouldBeMergedAndSet == Boolean.TRUE) {
                            int lhsLatitude;
                            lhsLatitude = leftObject.getLatitude();
                            int rhsLatitude;
                            rhsLatitude = rightObject.getLatitude();
                            int mergedLatitude = ((int) strategy.merge(LocatorUtils.property(leftLocator, "latitude", lhsLatitude), LocatorUtils.property(rightLocator, "latitude", rhsLatitude), lhsLatitude, rhsLatitude, true, true));
                            target.setLatitude(mergedLatitude);
                        } else {
                            if (latitudeShouldBeMergedAndSet == Boolean.FALSE) {
                            }
                        }
                    }
                    {
                        Boolean longitudeShouldBeMergedAndSet = strategy.shouldBeMergedAndSet(leftLocator, rightLocator, true, true);
                        if (longitudeShouldBeMergedAndSet == Boolean.TRUE) {
                            int lhsLongitude;
                            lhsLongitude = leftObject.getLongitude();
                            int rhsLongitude;
                            rhsLongitude = rightObject.getLongitude();
                            int mergedLongitude = ((int) strategy.merge(LocatorUtils.property(leftLocator, "longitude", lhsLongitude), LocatorUtils.property(rightLocator, "longitude", rhsLongitude), lhsLongitude, rhsLongitude, true, true));
                            target.setLongitude(mergedLongitude);
                        } else {
                            if (longitudeShouldBeMergedAndSet == Boolean.FALSE) {
                            }
                        }
                    }
                }
            }

        }


        /**
         * <p>Java class for anonymous complex type.
         * 
         * <p>The following schema fragment specifies the expected content contained within this class.
         * 
         * <pre>
         * &lt;complexType&gt;
         *   &lt;complexContent&gt;
         *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
         *       &lt;sequence&gt;
         *         &lt;element name="latitude" type="{http://metadata.ces.mil/mdr/ns/GSIP/tspi/2.0/core}MegaType"/&gt;
         *         &lt;element name="longitude" type="{http://metadata.ces.mil/mdr/ns/GSIP/tspi/2.0/core}MegaType"/&gt;
         *       &lt;/sequence&gt;
         *     &lt;/restriction&gt;
         *   &lt;/complexContent&gt;
         * &lt;/complexType&gt;
         * </pre>
         * 
         * 
         */
        @XmlAccessorType(XmlAccessType.FIELD)
        @XmlType(name = "", propOrder = {
            "latitude",
            "longitude"
        })
        public static class Microdegree implements Serializable, Cloneable, CopyTo2, Equals2, HashCode2, MergeFrom2, ToString2
        {

            private final static long serialVersionUID = 1L;
            @XmlSchemaType(name = "integer")
            @NotNull(message = "Microdegree.latitude {javax.validation.constraints.NotNull.message}")
            @DecimalMax("999999")
            @DecimalMin("000000")
            protected int latitude;
            @XmlSchemaType(name = "integer")
            @NotNull(message = "Microdegree.longitude {javax.validation.constraints.NotNull.message}")
            @DecimalMax("999999")
            @DecimalMin("000000")
            protected int longitude;

            /**
             * Gets the value of the latitude property.
             * 
             */
            public int getLatitude() {
                return latitude;
            }

            /**
             * Sets the value of the latitude property.
             * 
             */
            public void setLatitude(int value) {
                this.latitude = value;
            }

            public boolean isSetLatitude() {
                return true;
            }

            /**
             * Gets the value of the longitude property.
             * 
             */
            public int getLongitude() {
                return longitude;
            }

            /**
             * Sets the value of the longitude property.
             * 
             */
            public void setLongitude(int value) {
                this.longitude = value;
            }

            public boolean isSetLongitude() {
                return true;
            }

            public String toString() {
                final ToStringStrategy2 strategy = JAXBToStringStrategy.INSTANCE;
                final StringBuilder buffer = new StringBuilder();
                append(null, buffer, strategy);
                return buffer.toString();
            }

            public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy2 strategy) {
                strategy.appendStart(locator, this, buffer);
                appendFields(locator, buffer, strategy);
                strategy.appendEnd(locator, this, buffer);
                return buffer;
            }

            public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy2 strategy) {
                {
                    int theLatitude;
                    theLatitude = this.getLatitude();
                    strategy.appendField(locator, this, "latitude", buffer, theLatitude, true);
                }
                {
                    int theLongitude;
                    theLongitude = this.getLongitude();
                    strategy.appendField(locator, this, "longitude", buffer, theLongitude, true);
                }
                return buffer;
            }

            public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy2 strategy) {
                if ((object == null)||(this.getClass()!= object.getClass())) {
                    return false;
                }
                if (this == object) {
                    return true;
                }
                final SexagesimalPresentationType.GeoDegreeFraction.Microdegree that = ((SexagesimalPresentationType.GeoDegreeFraction.Microdegree) object);
                {
                    int lhsLatitude;
                    lhsLatitude = this.getLatitude();
                    int rhsLatitude;
                    rhsLatitude = that.getLatitude();
                    if (!strategy.equals(LocatorUtils.property(thisLocator, "latitude", lhsLatitude), LocatorUtils.property(thatLocator, "latitude", rhsLatitude), lhsLatitude, rhsLatitude, true, true)) {
                        return false;
                    }
                }
                {
                    int lhsLongitude;
                    lhsLongitude = this.getLongitude();
                    int rhsLongitude;
                    rhsLongitude = that.getLongitude();
                    if (!strategy.equals(LocatorUtils.property(thisLocator, "longitude", lhsLongitude), LocatorUtils.property(thatLocator, "longitude", rhsLongitude), lhsLongitude, rhsLongitude, true, true)) {
                        return false;
                    }
                }
                return true;
            }

            public boolean equals(Object object) {
                final EqualsStrategy2 strategy = JAXBEqualsStrategy.INSTANCE;
                return equals(null, null, object, strategy);
            }

            public int hashCode(ObjectLocator locator, HashCodeStrategy2 strategy) {
                int currentHashCode = 1;
                {
                    int theLatitude;
                    theLatitude = this.getLatitude();
                    currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "latitude", theLatitude), currentHashCode, theLatitude, true);
                }
                {
                    int theLongitude;
                    theLongitude = this.getLongitude();
                    currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "longitude", theLongitude), currentHashCode, theLongitude, true);
                }
                return currentHashCode;
            }

            public int hashCode() {
                final HashCodeStrategy2 strategy = JAXBHashCodeStrategy.INSTANCE;
                return this.hashCode(null, strategy);
            }

            public Object clone() {
                return copyTo(createNewInstance());
            }

            public Object copyTo(Object target) {
                final CopyStrategy2 strategy = JAXBCopyStrategy.INSTANCE;
                return copyTo(null, target, strategy);
            }

            public Object copyTo(ObjectLocator locator, Object target, CopyStrategy2 strategy) {
                final Object draftCopy = ((target == null)?createNewInstance():target);
                if (draftCopy instanceof SexagesimalPresentationType.GeoDegreeFraction.Microdegree) {
                    final SexagesimalPresentationType.GeoDegreeFraction.Microdegree copy = ((SexagesimalPresentationType.GeoDegreeFraction.Microdegree) draftCopy);
                    {
                        Boolean latitudeShouldBeCopiedAndSet = strategy.shouldBeCopiedAndSet(locator, true);
                        if (latitudeShouldBeCopiedAndSet == Boolean.TRUE) {
                            int sourceLatitude;
                            sourceLatitude = this.getLatitude();
                            int copyLatitude = strategy.copy(LocatorUtils.property(locator, "latitude", sourceLatitude), sourceLatitude, true);
                            copy.setLatitude(copyLatitude);
                        } else {
                            if (latitudeShouldBeCopiedAndSet == Boolean.FALSE) {
                            }
                        }
                    }
                    {
                        Boolean longitudeShouldBeCopiedAndSet = strategy.shouldBeCopiedAndSet(locator, true);
                        if (longitudeShouldBeCopiedAndSet == Boolean.TRUE) {
                            int sourceLongitude;
                            sourceLongitude = this.getLongitude();
                            int copyLongitude = strategy.copy(LocatorUtils.property(locator, "longitude", sourceLongitude), sourceLongitude, true);
                            copy.setLongitude(copyLongitude);
                        } else {
                            if (longitudeShouldBeCopiedAndSet == Boolean.FALSE) {
                            }
                        }
                    }
                }
                return draftCopy;
            }

            public Object createNewInstance() {
                return new SexagesimalPresentationType.GeoDegreeFraction.Microdegree();
            }

            public void mergeFrom(Object left, Object right) {
                final MergeStrategy2 strategy = JAXBMergeStrategy.INSTANCE;
                mergeFrom(null, null, left, right, strategy);
            }

            public void mergeFrom(ObjectLocator leftLocator, ObjectLocator rightLocator, Object left, Object right, MergeStrategy2 strategy) {
                if (right instanceof SexagesimalPresentationType.GeoDegreeFraction.Microdegree) {
                    final SexagesimalPresentationType.GeoDegreeFraction.Microdegree target = this;
                    final SexagesimalPresentationType.GeoDegreeFraction.Microdegree leftObject = ((SexagesimalPresentationType.GeoDegreeFraction.Microdegree) left);
                    final SexagesimalPresentationType.GeoDegreeFraction.Microdegree rightObject = ((SexagesimalPresentationType.GeoDegreeFraction.Microdegree) right);
                    {
                        Boolean latitudeShouldBeMergedAndSet = strategy.shouldBeMergedAndSet(leftLocator, rightLocator, true, true);
                        if (latitudeShouldBeMergedAndSet == Boolean.TRUE) {
                            int lhsLatitude;
                            lhsLatitude = leftObject.getLatitude();
                            int rhsLatitude;
                            rhsLatitude = rightObject.getLatitude();
                            int mergedLatitude = ((int) strategy.merge(LocatorUtils.property(leftLocator, "latitude", lhsLatitude), LocatorUtils.property(rightLocator, "latitude", rhsLatitude), lhsLatitude, rhsLatitude, true, true));
                            target.setLatitude(mergedLatitude);
                        } else {
                            if (latitudeShouldBeMergedAndSet == Boolean.FALSE) {
                            }
                        }
                    }
                    {
                        Boolean longitudeShouldBeMergedAndSet = strategy.shouldBeMergedAndSet(leftLocator, rightLocator, true, true);
                        if (longitudeShouldBeMergedAndSet == Boolean.TRUE) {
                            int lhsLongitude;
                            lhsLongitude = leftObject.getLongitude();
                            int rhsLongitude;
                            rhsLongitude = rightObject.getLongitude();
                            int mergedLongitude = ((int) strategy.merge(LocatorUtils.property(leftLocator, "longitude", lhsLongitude), LocatorUtils.property(rightLocator, "longitude", rhsLongitude), lhsLongitude, rhsLongitude, true, true));
                            target.setLongitude(mergedLongitude);
                        } else {
                            if (longitudeShouldBeMergedAndSet == Boolean.FALSE) {
                            }
                        }
                    }
                }
            }

        }


        /**
         * <p>Java class for anonymous complex type.
         * 
         * <p>The following schema fragment specifies the expected content contained within this class.
         * 
         * <pre>
         * &lt;complexType&gt;
         *   &lt;complexContent&gt;
         *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
         *       &lt;sequence&gt;
         *         &lt;element name="latitude" type="{http://metadata.ces.mil/mdr/ns/GSIP/tspi/2.0/core}KiloType"/&gt;
         *         &lt;element name="longitude" type="{http://metadata.ces.mil/mdr/ns/GSIP/tspi/2.0/core}KiloType"/&gt;
         *       &lt;/sequence&gt;
         *     &lt;/restriction&gt;
         *   &lt;/complexContent&gt;
         * &lt;/complexType&gt;
         * </pre>
         * 
         * 
         */
        @XmlAccessorType(XmlAccessType.FIELD)
        @XmlType(name = "", propOrder = {
            "latitude",
            "longitude"
        })
        public static class Millidegree implements Serializable, Cloneable, CopyTo2, Equals2, HashCode2, MergeFrom2, ToString2
        {

            private final static long serialVersionUID = 1L;
            @XmlSchemaType(name = "integer")
            @NotNull(message = "Millidegree.latitude {javax.validation.constraints.NotNull.message}")
            @DecimalMax("999")
            @DecimalMin("000")
            protected int latitude;
            @XmlSchemaType(name = "integer")
            @NotNull(message = "Millidegree.longitude {javax.validation.constraints.NotNull.message}")
            @DecimalMax("999")
            @DecimalMin("000")
            protected int longitude;

            /**
             * Gets the value of the latitude property.
             * 
             */
            public int getLatitude() {
                return latitude;
            }

            /**
             * Sets the value of the latitude property.
             * 
             */
            public void setLatitude(int value) {
                this.latitude = value;
            }

            public boolean isSetLatitude() {
                return true;
            }

            /**
             * Gets the value of the longitude property.
             * 
             */
            public int getLongitude() {
                return longitude;
            }

            /**
             * Sets the value of the longitude property.
             * 
             */
            public void setLongitude(int value) {
                this.longitude = value;
            }

            public boolean isSetLongitude() {
                return true;
            }

            public String toString() {
                final ToStringStrategy2 strategy = JAXBToStringStrategy.INSTANCE;
                final StringBuilder buffer = new StringBuilder();
                append(null, buffer, strategy);
                return buffer.toString();
            }

            public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy2 strategy) {
                strategy.appendStart(locator, this, buffer);
                appendFields(locator, buffer, strategy);
                strategy.appendEnd(locator, this, buffer);
                return buffer;
            }

            public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy2 strategy) {
                {
                    int theLatitude;
                    theLatitude = this.getLatitude();
                    strategy.appendField(locator, this, "latitude", buffer, theLatitude, true);
                }
                {
                    int theLongitude;
                    theLongitude = this.getLongitude();
                    strategy.appendField(locator, this, "longitude", buffer, theLongitude, true);
                }
                return buffer;
            }

            public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy2 strategy) {
                if ((object == null)||(this.getClass()!= object.getClass())) {
                    return false;
                }
                if (this == object) {
                    return true;
                }
                final SexagesimalPresentationType.GeoDegreeFraction.Millidegree that = ((SexagesimalPresentationType.GeoDegreeFraction.Millidegree) object);
                {
                    int lhsLatitude;
                    lhsLatitude = this.getLatitude();
                    int rhsLatitude;
                    rhsLatitude = that.getLatitude();
                    if (!strategy.equals(LocatorUtils.property(thisLocator, "latitude", lhsLatitude), LocatorUtils.property(thatLocator, "latitude", rhsLatitude), lhsLatitude, rhsLatitude, true, true)) {
                        return false;
                    }
                }
                {
                    int lhsLongitude;
                    lhsLongitude = this.getLongitude();
                    int rhsLongitude;
                    rhsLongitude = that.getLongitude();
                    if (!strategy.equals(LocatorUtils.property(thisLocator, "longitude", lhsLongitude), LocatorUtils.property(thatLocator, "longitude", rhsLongitude), lhsLongitude, rhsLongitude, true, true)) {
                        return false;
                    }
                }
                return true;
            }

            public boolean equals(Object object) {
                final EqualsStrategy2 strategy = JAXBEqualsStrategy.INSTANCE;
                return equals(null, null, object, strategy);
            }

            public int hashCode(ObjectLocator locator, HashCodeStrategy2 strategy) {
                int currentHashCode = 1;
                {
                    int theLatitude;
                    theLatitude = this.getLatitude();
                    currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "latitude", theLatitude), currentHashCode, theLatitude, true);
                }
                {
                    int theLongitude;
                    theLongitude = this.getLongitude();
                    currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "longitude", theLongitude), currentHashCode, theLongitude, true);
                }
                return currentHashCode;
            }

            public int hashCode() {
                final HashCodeStrategy2 strategy = JAXBHashCodeStrategy.INSTANCE;
                return this.hashCode(null, strategy);
            }

            public Object clone() {
                return copyTo(createNewInstance());
            }

            public Object copyTo(Object target) {
                final CopyStrategy2 strategy = JAXBCopyStrategy.INSTANCE;
                return copyTo(null, target, strategy);
            }

            public Object copyTo(ObjectLocator locator, Object target, CopyStrategy2 strategy) {
                final Object draftCopy = ((target == null)?createNewInstance():target);
                if (draftCopy instanceof SexagesimalPresentationType.GeoDegreeFraction.Millidegree) {
                    final SexagesimalPresentationType.GeoDegreeFraction.Millidegree copy = ((SexagesimalPresentationType.GeoDegreeFraction.Millidegree) draftCopy);
                    {
                        Boolean latitudeShouldBeCopiedAndSet = strategy.shouldBeCopiedAndSet(locator, true);
                        if (latitudeShouldBeCopiedAndSet == Boolean.TRUE) {
                            int sourceLatitude;
                            sourceLatitude = this.getLatitude();
                            int copyLatitude = strategy.copy(LocatorUtils.property(locator, "latitude", sourceLatitude), sourceLatitude, true);
                            copy.setLatitude(copyLatitude);
                        } else {
                            if (latitudeShouldBeCopiedAndSet == Boolean.FALSE) {
                            }
                        }
                    }
                    {
                        Boolean longitudeShouldBeCopiedAndSet = strategy.shouldBeCopiedAndSet(locator, true);
                        if (longitudeShouldBeCopiedAndSet == Boolean.TRUE) {
                            int sourceLongitude;
                            sourceLongitude = this.getLongitude();
                            int copyLongitude = strategy.copy(LocatorUtils.property(locator, "longitude", sourceLongitude), sourceLongitude, true);
                            copy.setLongitude(copyLongitude);
                        } else {
                            if (longitudeShouldBeCopiedAndSet == Boolean.FALSE) {
                            }
                        }
                    }
                }
                return draftCopy;
            }

            public Object createNewInstance() {
                return new SexagesimalPresentationType.GeoDegreeFraction.Millidegree();
            }

            public void mergeFrom(Object left, Object right) {
                final MergeStrategy2 strategy = JAXBMergeStrategy.INSTANCE;
                mergeFrom(null, null, left, right, strategy);
            }

            public void mergeFrom(ObjectLocator leftLocator, ObjectLocator rightLocator, Object left, Object right, MergeStrategy2 strategy) {
                if (right instanceof SexagesimalPresentationType.GeoDegreeFraction.Millidegree) {
                    final SexagesimalPresentationType.GeoDegreeFraction.Millidegree target = this;
                    final SexagesimalPresentationType.GeoDegreeFraction.Millidegree leftObject = ((SexagesimalPresentationType.GeoDegreeFraction.Millidegree) left);
                    final SexagesimalPresentationType.GeoDegreeFraction.Millidegree rightObject = ((SexagesimalPresentationType.GeoDegreeFraction.Millidegree) right);
                    {
                        Boolean latitudeShouldBeMergedAndSet = strategy.shouldBeMergedAndSet(leftLocator, rightLocator, true, true);
                        if (latitudeShouldBeMergedAndSet == Boolean.TRUE) {
                            int lhsLatitude;
                            lhsLatitude = leftObject.getLatitude();
                            int rhsLatitude;
                            rhsLatitude = rightObject.getLatitude();
                            int mergedLatitude = ((int) strategy.merge(LocatorUtils.property(leftLocator, "latitude", lhsLatitude), LocatorUtils.property(rightLocator, "latitude", rhsLatitude), lhsLatitude, rhsLatitude, true, true));
                            target.setLatitude(mergedLatitude);
                        } else {
                            if (latitudeShouldBeMergedAndSet == Boolean.FALSE) {
                            }
                        }
                    }
                    {
                        Boolean longitudeShouldBeMergedAndSet = strategy.shouldBeMergedAndSet(leftLocator, rightLocator, true, true);
                        if (longitudeShouldBeMergedAndSet == Boolean.TRUE) {
                            int lhsLongitude;
                            lhsLongitude = leftObject.getLongitude();
                            int rhsLongitude;
                            rhsLongitude = rightObject.getLongitude();
                            int mergedLongitude = ((int) strategy.merge(LocatorUtils.property(leftLocator, "longitude", lhsLongitude), LocatorUtils.property(rightLocator, "longitude", rhsLongitude), lhsLongitude, rhsLongitude, true, true));
                            target.setLongitude(mergedLongitude);
                        } else {
                            if (longitudeShouldBeMergedAndSet == Boolean.FALSE) {
                            }
                        }
                    }
                }
            }

        }

    }


    /**
     * <p>Java class for anonymous complex type.
     * 
     * <p>The following schema fragment specifies the expected content contained within this class.
     * 
     * <pre>
     * &lt;complexType&gt;
     *   &lt;complexContent&gt;
     *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
     *       &lt;sequence&gt;
     *         &lt;element name="latitude" type="{http://metadata.ces.mil/mdr/ns/GSIP/tspi/2.0/core}SexagesimalType"/&gt;
     *         &lt;element name="longitude" type="{http://metadata.ces.mil/mdr/ns/GSIP/tspi/2.0/core}SexagesimalType"/&gt;
     *       &lt;/sequence&gt;
     *     &lt;/restriction&gt;
     *   &lt;/complexContent&gt;
     * &lt;/complexType&gt;
     * </pre>
     * 
     * 
     */
    @XmlAccessorType(XmlAccessType.FIELD)
    @XmlType(name = "", propOrder = {
        "latitude",
        "longitude"
    })
    public static class GeoMinute implements Serializable, Cloneable, CopyTo2, Equals2, HashCode2, MergeFrom2, ToString2
    {

        private final static long serialVersionUID = 1L;
        @XmlSchemaType(name = "integer")
        @NotNull(message = "GeoMinute.latitude {javax.validation.constraints.NotNull.message}")
        @DecimalMax("59")
        @DecimalMin("00")
        protected int latitude;
        @XmlSchemaType(name = "integer")
        @NotNull(message = "GeoMinute.longitude {javax.validation.constraints.NotNull.message}")
        @DecimalMax("59")
        @DecimalMin("00")
        protected int longitude;

        /**
         * Gets the value of the latitude property.
         * 
         */
        public int getLatitude() {
            return latitude;
        }

        /**
         * Sets the value of the latitude property.
         * 
         */
        public void setLatitude(int value) {
            this.latitude = value;
        }

        public boolean isSetLatitude() {
            return true;
        }

        /**
         * Gets the value of the longitude property.
         * 
         */
        public int getLongitude() {
            return longitude;
        }

        /**
         * Sets the value of the longitude property.
         * 
         */
        public void setLongitude(int value) {
            this.longitude = value;
        }

        public boolean isSetLongitude() {
            return true;
        }

        public String toString() {
            final ToStringStrategy2 strategy = JAXBToStringStrategy.INSTANCE;
            final StringBuilder buffer = new StringBuilder();
            append(null, buffer, strategy);
            return buffer.toString();
        }

        public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy2 strategy) {
            strategy.appendStart(locator, this, buffer);
            appendFields(locator, buffer, strategy);
            strategy.appendEnd(locator, this, buffer);
            return buffer;
        }

        public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy2 strategy) {
            {
                int theLatitude;
                theLatitude = this.getLatitude();
                strategy.appendField(locator, this, "latitude", buffer, theLatitude, true);
            }
            {
                int theLongitude;
                theLongitude = this.getLongitude();
                strategy.appendField(locator, this, "longitude", buffer, theLongitude, true);
            }
            return buffer;
        }

        public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy2 strategy) {
            if ((object == null)||(this.getClass()!= object.getClass())) {
                return false;
            }
            if (this == object) {
                return true;
            }
            final SexagesimalPresentationType.GeoMinute that = ((SexagesimalPresentationType.GeoMinute) object);
            {
                int lhsLatitude;
                lhsLatitude = this.getLatitude();
                int rhsLatitude;
                rhsLatitude = that.getLatitude();
                if (!strategy.equals(LocatorUtils.property(thisLocator, "latitude", lhsLatitude), LocatorUtils.property(thatLocator, "latitude", rhsLatitude), lhsLatitude, rhsLatitude, true, true)) {
                    return false;
                }
            }
            {
                int lhsLongitude;
                lhsLongitude = this.getLongitude();
                int rhsLongitude;
                rhsLongitude = that.getLongitude();
                if (!strategy.equals(LocatorUtils.property(thisLocator, "longitude", lhsLongitude), LocatorUtils.property(thatLocator, "longitude", rhsLongitude), lhsLongitude, rhsLongitude, true, true)) {
                    return false;
                }
            }
            return true;
        }

        public boolean equals(Object object) {
            final EqualsStrategy2 strategy = JAXBEqualsStrategy.INSTANCE;
            return equals(null, null, object, strategy);
        }

        public int hashCode(ObjectLocator locator, HashCodeStrategy2 strategy) {
            int currentHashCode = 1;
            {
                int theLatitude;
                theLatitude = this.getLatitude();
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "latitude", theLatitude), currentHashCode, theLatitude, true);
            }
            {
                int theLongitude;
                theLongitude = this.getLongitude();
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "longitude", theLongitude), currentHashCode, theLongitude, true);
            }
            return currentHashCode;
        }

        public int hashCode() {
            final HashCodeStrategy2 strategy = JAXBHashCodeStrategy.INSTANCE;
            return this.hashCode(null, strategy);
        }

        public Object clone() {
            return copyTo(createNewInstance());
        }

        public Object copyTo(Object target) {
            final CopyStrategy2 strategy = JAXBCopyStrategy.INSTANCE;
            return copyTo(null, target, strategy);
        }

        public Object copyTo(ObjectLocator locator, Object target, CopyStrategy2 strategy) {
            final Object draftCopy = ((target == null)?createNewInstance():target);
            if (draftCopy instanceof SexagesimalPresentationType.GeoMinute) {
                final SexagesimalPresentationType.GeoMinute copy = ((SexagesimalPresentationType.GeoMinute) draftCopy);
                {
                    Boolean latitudeShouldBeCopiedAndSet = strategy.shouldBeCopiedAndSet(locator, true);
                    if (latitudeShouldBeCopiedAndSet == Boolean.TRUE) {
                        int sourceLatitude;
                        sourceLatitude = this.getLatitude();
                        int copyLatitude = strategy.copy(LocatorUtils.property(locator, "latitude", sourceLatitude), sourceLatitude, true);
                        copy.setLatitude(copyLatitude);
                    } else {
                        if (latitudeShouldBeCopiedAndSet == Boolean.FALSE) {
                        }
                    }
                }
                {
                    Boolean longitudeShouldBeCopiedAndSet = strategy.shouldBeCopiedAndSet(locator, true);
                    if (longitudeShouldBeCopiedAndSet == Boolean.TRUE) {
                        int sourceLongitude;
                        sourceLongitude = this.getLongitude();
                        int copyLongitude = strategy.copy(LocatorUtils.property(locator, "longitude", sourceLongitude), sourceLongitude, true);
                        copy.setLongitude(copyLongitude);
                    } else {
                        if (longitudeShouldBeCopiedAndSet == Boolean.FALSE) {
                        }
                    }
                }
            }
            return draftCopy;
        }

        public Object createNewInstance() {
            return new SexagesimalPresentationType.GeoMinute();
        }

        public void mergeFrom(Object left, Object right) {
            final MergeStrategy2 strategy = JAXBMergeStrategy.INSTANCE;
            mergeFrom(null, null, left, right, strategy);
        }

        public void mergeFrom(ObjectLocator leftLocator, ObjectLocator rightLocator, Object left, Object right, MergeStrategy2 strategy) {
            if (right instanceof SexagesimalPresentationType.GeoMinute) {
                final SexagesimalPresentationType.GeoMinute target = this;
                final SexagesimalPresentationType.GeoMinute leftObject = ((SexagesimalPresentationType.GeoMinute) left);
                final SexagesimalPresentationType.GeoMinute rightObject = ((SexagesimalPresentationType.GeoMinute) right);
                {
                    Boolean latitudeShouldBeMergedAndSet = strategy.shouldBeMergedAndSet(leftLocator, rightLocator, true, true);
                    if (latitudeShouldBeMergedAndSet == Boolean.TRUE) {
                        int lhsLatitude;
                        lhsLatitude = leftObject.getLatitude();
                        int rhsLatitude;
                        rhsLatitude = rightObject.getLatitude();
                        int mergedLatitude = ((int) strategy.merge(LocatorUtils.property(leftLocator, "latitude", lhsLatitude), LocatorUtils.property(rightLocator, "latitude", rhsLatitude), lhsLatitude, rhsLatitude, true, true));
                        target.setLatitude(mergedLatitude);
                    } else {
                        if (latitudeShouldBeMergedAndSet == Boolean.FALSE) {
                        }
                    }
                }
                {
                    Boolean longitudeShouldBeMergedAndSet = strategy.shouldBeMergedAndSet(leftLocator, rightLocator, true, true);
                    if (longitudeShouldBeMergedAndSet == Boolean.TRUE) {
                        int lhsLongitude;
                        lhsLongitude = leftObject.getLongitude();
                        int rhsLongitude;
                        rhsLongitude = rightObject.getLongitude();
                        int mergedLongitude = ((int) strategy.merge(LocatorUtils.property(leftLocator, "longitude", lhsLongitude), LocatorUtils.property(rightLocator, "longitude", rhsLongitude), lhsLongitude, rhsLongitude, true, true));
                        target.setLongitude(mergedLongitude);
                    } else {
                        if (longitudeShouldBeMergedAndSet == Boolean.FALSE) {
                        }
                    }
                }
            }
        }

    }


    /**
     * <p>Java class for anonymous complex type.
     * 
     * <p>The following schema fragment specifies the expected content contained within this class.
     * 
     * <pre>
     * &lt;complexType&gt;
     *   &lt;complexContent&gt;
     *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
     *       &lt;choice&gt;
     *         &lt;element name="deciminute"&gt;
     *           &lt;complexType&gt;
     *             &lt;complexContent&gt;
     *               &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
     *                 &lt;sequence&gt;
     *                   &lt;element name="latitude" type="{http://metadata.ces.mil/mdr/ns/GSIP/tspi/2.0/core}DecaType"/&gt;
     *                   &lt;element name="longitude" type="{http://metadata.ces.mil/mdr/ns/GSIP/tspi/2.0/core}DecaType"/&gt;
     *                 &lt;/sequence&gt;
     *               &lt;/restriction&gt;
     *             &lt;/complexContent&gt;
     *           &lt;/complexType&gt;
     *         &lt;/element&gt;
     *         &lt;element name="centiminute"&gt;
     *           &lt;complexType&gt;
     *             &lt;complexContent&gt;
     *               &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
     *                 &lt;sequence&gt;
     *                   &lt;element name="latitude" type="{http://metadata.ces.mil/mdr/ns/GSIP/tspi/2.0/core}HectoType"/&gt;
     *                   &lt;element name="longitude" type="{http://metadata.ces.mil/mdr/ns/GSIP/tspi/2.0/core}HectoType"/&gt;
     *                 &lt;/sequence&gt;
     *               &lt;/restriction&gt;
     *             &lt;/complexContent&gt;
     *           &lt;/complexType&gt;
     *         &lt;/element&gt;
     *         &lt;element name="milliminute"&gt;
     *           &lt;complexType&gt;
     *             &lt;complexContent&gt;
     *               &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
     *                 &lt;sequence&gt;
     *                   &lt;element name="latitude" type="{http://metadata.ces.mil/mdr/ns/GSIP/tspi/2.0/core}KiloType"/&gt;
     *                   &lt;element name="longitude" type="{http://metadata.ces.mil/mdr/ns/GSIP/tspi/2.0/core}KiloType"/&gt;
     *                 &lt;/sequence&gt;
     *               &lt;/restriction&gt;
     *             &lt;/complexContent&gt;
     *           &lt;/complexType&gt;
     *         &lt;/element&gt;
     *         &lt;element name="decimilliminute"&gt;
     *           &lt;complexType&gt;
     *             &lt;complexContent&gt;
     *               &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
     *                 &lt;sequence&gt;
     *                   &lt;element name="latitude" type="{http://metadata.ces.mil/mdr/ns/GSIP/tspi/2.0/core}DecakiloType"/&gt;
     *                   &lt;element name="longitude" type="{http://metadata.ces.mil/mdr/ns/GSIP/tspi/2.0/core}DecakiloType"/&gt;
     *                 &lt;/sequence&gt;
     *               &lt;/restriction&gt;
     *             &lt;/complexContent&gt;
     *           &lt;/complexType&gt;
     *         &lt;/element&gt;
     *       &lt;/choice&gt;
     *     &lt;/restriction&gt;
     *   &lt;/complexContent&gt;
     * &lt;/complexType&gt;
     * </pre>
     * 
     * 
     */
    @XmlAccessorType(XmlAccessType.FIELD)
    @XmlType(name = "", propOrder = {
        "deciminute",
        "centiminute",
        "milliminute",
        "decimilliminute"
    })
    public static class GeoMinuteFraction implements Serializable, Cloneable, CopyTo2, Equals2, HashCode2, MergeFrom2, ToString2
    {

        private final static long serialVersionUID = 1L;
        @Valid
        protected SexagesimalPresentationType.GeoMinuteFraction.Deciminute deciminute;
        @Valid
        protected SexagesimalPresentationType.GeoMinuteFraction.Centiminute centiminute;
        @Valid
        protected SexagesimalPresentationType.GeoMinuteFraction.Milliminute milliminute;
        @Valid
        protected SexagesimalPresentationType.GeoMinuteFraction.Decimilliminute decimilliminute;

        /**
         * Gets the value of the deciminute property.
         * 
         * @return
         *     possible object is
         *     {@link SexagesimalPresentationType.GeoMinuteFraction.Deciminute }
         *     
         */
        public SexagesimalPresentationType.GeoMinuteFraction.Deciminute getDeciminute() {
            return deciminute;
        }

        /**
         * Sets the value of the deciminute property.
         * 
         * @param value
         *     allowed object is
         *     {@link SexagesimalPresentationType.GeoMinuteFraction.Deciminute }
         *     
         */
        public void setDeciminute(SexagesimalPresentationType.GeoMinuteFraction.Deciminute value) {
            this.deciminute = value;
        }

        public boolean isSetDeciminute() {
            return (this.deciminute!= null);
        }

        /**
         * Gets the value of the centiminute property.
         * 
         * @return
         *     possible object is
         *     {@link SexagesimalPresentationType.GeoMinuteFraction.Centiminute }
         *     
         */
        public SexagesimalPresentationType.GeoMinuteFraction.Centiminute getCentiminute() {
            return centiminute;
        }

        /**
         * Sets the value of the centiminute property.
         * 
         * @param value
         *     allowed object is
         *     {@link SexagesimalPresentationType.GeoMinuteFraction.Centiminute }
         *     
         */
        public void setCentiminute(SexagesimalPresentationType.GeoMinuteFraction.Centiminute value) {
            this.centiminute = value;
        }

        public boolean isSetCentiminute() {
            return (this.centiminute!= null);
        }

        /**
         * Gets the value of the milliminute property.
         * 
         * @return
         *     possible object is
         *     {@link SexagesimalPresentationType.GeoMinuteFraction.Milliminute }
         *     
         */
        public SexagesimalPresentationType.GeoMinuteFraction.Milliminute getMilliminute() {
            return milliminute;
        }

        /**
         * Sets the value of the milliminute property.
         * 
         * @param value
         *     allowed object is
         *     {@link SexagesimalPresentationType.GeoMinuteFraction.Milliminute }
         *     
         */
        public void setMilliminute(SexagesimalPresentationType.GeoMinuteFraction.Milliminute value) {
            this.milliminute = value;
        }

        public boolean isSetMilliminute() {
            return (this.milliminute!= null);
        }

        /**
         * Gets the value of the decimilliminute property.
         * 
         * @return
         *     possible object is
         *     {@link SexagesimalPresentationType.GeoMinuteFraction.Decimilliminute }
         *     
         */
        public SexagesimalPresentationType.GeoMinuteFraction.Decimilliminute getDecimilliminute() {
            return decimilliminute;
        }

        /**
         * Sets the value of the decimilliminute property.
         * 
         * @param value
         *     allowed object is
         *     {@link SexagesimalPresentationType.GeoMinuteFraction.Decimilliminute }
         *     
         */
        public void setDecimilliminute(SexagesimalPresentationType.GeoMinuteFraction.Decimilliminute value) {
            this.decimilliminute = value;
        }

        public boolean isSetDecimilliminute() {
            return (this.decimilliminute!= null);
        }

        public String toString() {
            final ToStringStrategy2 strategy = JAXBToStringStrategy.INSTANCE;
            final StringBuilder buffer = new StringBuilder();
            append(null, buffer, strategy);
            return buffer.toString();
        }

        public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy2 strategy) {
            strategy.appendStart(locator, this, buffer);
            appendFields(locator, buffer, strategy);
            strategy.appendEnd(locator, this, buffer);
            return buffer;
        }

        public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy2 strategy) {
            {
                SexagesimalPresentationType.GeoMinuteFraction.Deciminute theDeciminute;
                theDeciminute = this.getDeciminute();
                strategy.appendField(locator, this, "deciminute", buffer, theDeciminute, this.isSetDeciminute());
            }
            {
                SexagesimalPresentationType.GeoMinuteFraction.Centiminute theCentiminute;
                theCentiminute = this.getCentiminute();
                strategy.appendField(locator, this, "centiminute", buffer, theCentiminute, this.isSetCentiminute());
            }
            {
                SexagesimalPresentationType.GeoMinuteFraction.Milliminute theMilliminute;
                theMilliminute = this.getMilliminute();
                strategy.appendField(locator, this, "milliminute", buffer, theMilliminute, this.isSetMilliminute());
            }
            {
                SexagesimalPresentationType.GeoMinuteFraction.Decimilliminute theDecimilliminute;
                theDecimilliminute = this.getDecimilliminute();
                strategy.appendField(locator, this, "decimilliminute", buffer, theDecimilliminute, this.isSetDecimilliminute());
            }
            return buffer;
        }

        public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy2 strategy) {
            if ((object == null)||(this.getClass()!= object.getClass())) {
                return false;
            }
            if (this == object) {
                return true;
            }
            final SexagesimalPresentationType.GeoMinuteFraction that = ((SexagesimalPresentationType.GeoMinuteFraction) object);
            {
                SexagesimalPresentationType.GeoMinuteFraction.Deciminute lhsDeciminute;
                lhsDeciminute = this.getDeciminute();
                SexagesimalPresentationType.GeoMinuteFraction.Deciminute rhsDeciminute;
                rhsDeciminute = that.getDeciminute();
                if (!strategy.equals(LocatorUtils.property(thisLocator, "deciminute", lhsDeciminute), LocatorUtils.property(thatLocator, "deciminute", rhsDeciminute), lhsDeciminute, rhsDeciminute, this.isSetDeciminute(), that.isSetDeciminute())) {
                    return false;
                }
            }
            {
                SexagesimalPresentationType.GeoMinuteFraction.Centiminute lhsCentiminute;
                lhsCentiminute = this.getCentiminute();
                SexagesimalPresentationType.GeoMinuteFraction.Centiminute rhsCentiminute;
                rhsCentiminute = that.getCentiminute();
                if (!strategy.equals(LocatorUtils.property(thisLocator, "centiminute", lhsCentiminute), LocatorUtils.property(thatLocator, "centiminute", rhsCentiminute), lhsCentiminute, rhsCentiminute, this.isSetCentiminute(), that.isSetCentiminute())) {
                    return false;
                }
            }
            {
                SexagesimalPresentationType.GeoMinuteFraction.Milliminute lhsMilliminute;
                lhsMilliminute = this.getMilliminute();
                SexagesimalPresentationType.GeoMinuteFraction.Milliminute rhsMilliminute;
                rhsMilliminute = that.getMilliminute();
                if (!strategy.equals(LocatorUtils.property(thisLocator, "milliminute", lhsMilliminute), LocatorUtils.property(thatLocator, "milliminute", rhsMilliminute), lhsMilliminute, rhsMilliminute, this.isSetMilliminute(), that.isSetMilliminute())) {
                    return false;
                }
            }
            {
                SexagesimalPresentationType.GeoMinuteFraction.Decimilliminute lhsDecimilliminute;
                lhsDecimilliminute = this.getDecimilliminute();
                SexagesimalPresentationType.GeoMinuteFraction.Decimilliminute rhsDecimilliminute;
                rhsDecimilliminute = that.getDecimilliminute();
                if (!strategy.equals(LocatorUtils.property(thisLocator, "decimilliminute", lhsDecimilliminute), LocatorUtils.property(thatLocator, "decimilliminute", rhsDecimilliminute), lhsDecimilliminute, rhsDecimilliminute, this.isSetDecimilliminute(), that.isSetDecimilliminute())) {
                    return false;
                }
            }
            return true;
        }

        public boolean equals(Object object) {
            final EqualsStrategy2 strategy = JAXBEqualsStrategy.INSTANCE;
            return equals(null, null, object, strategy);
        }

        public int hashCode(ObjectLocator locator, HashCodeStrategy2 strategy) {
            int currentHashCode = 1;
            {
                SexagesimalPresentationType.GeoMinuteFraction.Deciminute theDeciminute;
                theDeciminute = this.getDeciminute();
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "deciminute", theDeciminute), currentHashCode, theDeciminute, this.isSetDeciminute());
            }
            {
                SexagesimalPresentationType.GeoMinuteFraction.Centiminute theCentiminute;
                theCentiminute = this.getCentiminute();
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "centiminute", theCentiminute), currentHashCode, theCentiminute, this.isSetCentiminute());
            }
            {
                SexagesimalPresentationType.GeoMinuteFraction.Milliminute theMilliminute;
                theMilliminute = this.getMilliminute();
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "milliminute", theMilliminute), currentHashCode, theMilliminute, this.isSetMilliminute());
            }
            {
                SexagesimalPresentationType.GeoMinuteFraction.Decimilliminute theDecimilliminute;
                theDecimilliminute = this.getDecimilliminute();
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "decimilliminute", theDecimilliminute), currentHashCode, theDecimilliminute, this.isSetDecimilliminute());
            }
            return currentHashCode;
        }

        public int hashCode() {
            final HashCodeStrategy2 strategy = JAXBHashCodeStrategy.INSTANCE;
            return this.hashCode(null, strategy);
        }

        public Object clone() {
            return copyTo(createNewInstance());
        }

        public Object copyTo(Object target) {
            final CopyStrategy2 strategy = JAXBCopyStrategy.INSTANCE;
            return copyTo(null, target, strategy);
        }

        public Object copyTo(ObjectLocator locator, Object target, CopyStrategy2 strategy) {
            final Object draftCopy = ((target == null)?createNewInstance():target);
            if (draftCopy instanceof SexagesimalPresentationType.GeoMinuteFraction) {
                final SexagesimalPresentationType.GeoMinuteFraction copy = ((SexagesimalPresentationType.GeoMinuteFraction) draftCopy);
                {
                    Boolean deciminuteShouldBeCopiedAndSet = strategy.shouldBeCopiedAndSet(locator, this.isSetDeciminute());
                    if (deciminuteShouldBeCopiedAndSet == Boolean.TRUE) {
                        SexagesimalPresentationType.GeoMinuteFraction.Deciminute sourceDeciminute;
                        sourceDeciminute = this.getDeciminute();
                        SexagesimalPresentationType.GeoMinuteFraction.Deciminute copyDeciminute = ((SexagesimalPresentationType.GeoMinuteFraction.Deciminute) strategy.copy(LocatorUtils.property(locator, "deciminute", sourceDeciminute), sourceDeciminute, this.isSetDeciminute()));
                        copy.setDeciminute(copyDeciminute);
                    } else {
                        if (deciminuteShouldBeCopiedAndSet == Boolean.FALSE) {
                            copy.deciminute = null;
                        }
                    }
                }
                {
                    Boolean centiminuteShouldBeCopiedAndSet = strategy.shouldBeCopiedAndSet(locator, this.isSetCentiminute());
                    if (centiminuteShouldBeCopiedAndSet == Boolean.TRUE) {
                        SexagesimalPresentationType.GeoMinuteFraction.Centiminute sourceCentiminute;
                        sourceCentiminute = this.getCentiminute();
                        SexagesimalPresentationType.GeoMinuteFraction.Centiminute copyCentiminute = ((SexagesimalPresentationType.GeoMinuteFraction.Centiminute) strategy.copy(LocatorUtils.property(locator, "centiminute", sourceCentiminute), sourceCentiminute, this.isSetCentiminute()));
                        copy.setCentiminute(copyCentiminute);
                    } else {
                        if (centiminuteShouldBeCopiedAndSet == Boolean.FALSE) {
                            copy.centiminute = null;
                        }
                    }
                }
                {
                    Boolean milliminuteShouldBeCopiedAndSet = strategy.shouldBeCopiedAndSet(locator, this.isSetMilliminute());
                    if (milliminuteShouldBeCopiedAndSet == Boolean.TRUE) {
                        SexagesimalPresentationType.GeoMinuteFraction.Milliminute sourceMilliminute;
                        sourceMilliminute = this.getMilliminute();
                        SexagesimalPresentationType.GeoMinuteFraction.Milliminute copyMilliminute = ((SexagesimalPresentationType.GeoMinuteFraction.Milliminute) strategy.copy(LocatorUtils.property(locator, "milliminute", sourceMilliminute), sourceMilliminute, this.isSetMilliminute()));
                        copy.setMilliminute(copyMilliminute);
                    } else {
                        if (milliminuteShouldBeCopiedAndSet == Boolean.FALSE) {
                            copy.milliminute = null;
                        }
                    }
                }
                {
                    Boolean decimilliminuteShouldBeCopiedAndSet = strategy.shouldBeCopiedAndSet(locator, this.isSetDecimilliminute());
                    if (decimilliminuteShouldBeCopiedAndSet == Boolean.TRUE) {
                        SexagesimalPresentationType.GeoMinuteFraction.Decimilliminute sourceDecimilliminute;
                        sourceDecimilliminute = this.getDecimilliminute();
                        SexagesimalPresentationType.GeoMinuteFraction.Decimilliminute copyDecimilliminute = ((SexagesimalPresentationType.GeoMinuteFraction.Decimilliminute) strategy.copy(LocatorUtils.property(locator, "decimilliminute", sourceDecimilliminute), sourceDecimilliminute, this.isSetDecimilliminute()));
                        copy.setDecimilliminute(copyDecimilliminute);
                    } else {
                        if (decimilliminuteShouldBeCopiedAndSet == Boolean.FALSE) {
                            copy.decimilliminute = null;
                        }
                    }
                }
            }
            return draftCopy;
        }

        public Object createNewInstance() {
            return new SexagesimalPresentationType.GeoMinuteFraction();
        }

        public void mergeFrom(Object left, Object right) {
            final MergeStrategy2 strategy = JAXBMergeStrategy.INSTANCE;
            mergeFrom(null, null, left, right, strategy);
        }

        public void mergeFrom(ObjectLocator leftLocator, ObjectLocator rightLocator, Object left, Object right, MergeStrategy2 strategy) {
            if (right instanceof SexagesimalPresentationType.GeoMinuteFraction) {
                final SexagesimalPresentationType.GeoMinuteFraction target = this;
                final SexagesimalPresentationType.GeoMinuteFraction leftObject = ((SexagesimalPresentationType.GeoMinuteFraction) left);
                final SexagesimalPresentationType.GeoMinuteFraction rightObject = ((SexagesimalPresentationType.GeoMinuteFraction) right);
                {
                    Boolean deciminuteShouldBeMergedAndSet = strategy.shouldBeMergedAndSet(leftLocator, rightLocator, leftObject.isSetDeciminute(), rightObject.isSetDeciminute());
                    if (deciminuteShouldBeMergedAndSet == Boolean.TRUE) {
                        SexagesimalPresentationType.GeoMinuteFraction.Deciminute lhsDeciminute;
                        lhsDeciminute = leftObject.getDeciminute();
                        SexagesimalPresentationType.GeoMinuteFraction.Deciminute rhsDeciminute;
                        rhsDeciminute = rightObject.getDeciminute();
                        SexagesimalPresentationType.GeoMinuteFraction.Deciminute mergedDeciminute = ((SexagesimalPresentationType.GeoMinuteFraction.Deciminute) strategy.merge(LocatorUtils.property(leftLocator, "deciminute", lhsDeciminute), LocatorUtils.property(rightLocator, "deciminute", rhsDeciminute), lhsDeciminute, rhsDeciminute, leftObject.isSetDeciminute(), rightObject.isSetDeciminute()));
                        target.setDeciminute(mergedDeciminute);
                    } else {
                        if (deciminuteShouldBeMergedAndSet == Boolean.FALSE) {
                            target.deciminute = null;
                        }
                    }
                }
                {
                    Boolean centiminuteShouldBeMergedAndSet = strategy.shouldBeMergedAndSet(leftLocator, rightLocator, leftObject.isSetCentiminute(), rightObject.isSetCentiminute());
                    if (centiminuteShouldBeMergedAndSet == Boolean.TRUE) {
                        SexagesimalPresentationType.GeoMinuteFraction.Centiminute lhsCentiminute;
                        lhsCentiminute = leftObject.getCentiminute();
                        SexagesimalPresentationType.GeoMinuteFraction.Centiminute rhsCentiminute;
                        rhsCentiminute = rightObject.getCentiminute();
                        SexagesimalPresentationType.GeoMinuteFraction.Centiminute mergedCentiminute = ((SexagesimalPresentationType.GeoMinuteFraction.Centiminute) strategy.merge(LocatorUtils.property(leftLocator, "centiminute", lhsCentiminute), LocatorUtils.property(rightLocator, "centiminute", rhsCentiminute), lhsCentiminute, rhsCentiminute, leftObject.isSetCentiminute(), rightObject.isSetCentiminute()));
                        target.setCentiminute(mergedCentiminute);
                    } else {
                        if (centiminuteShouldBeMergedAndSet == Boolean.FALSE) {
                            target.centiminute = null;
                        }
                    }
                }
                {
                    Boolean milliminuteShouldBeMergedAndSet = strategy.shouldBeMergedAndSet(leftLocator, rightLocator, leftObject.isSetMilliminute(), rightObject.isSetMilliminute());
                    if (milliminuteShouldBeMergedAndSet == Boolean.TRUE) {
                        SexagesimalPresentationType.GeoMinuteFraction.Milliminute lhsMilliminute;
                        lhsMilliminute = leftObject.getMilliminute();
                        SexagesimalPresentationType.GeoMinuteFraction.Milliminute rhsMilliminute;
                        rhsMilliminute = rightObject.getMilliminute();
                        SexagesimalPresentationType.GeoMinuteFraction.Milliminute mergedMilliminute = ((SexagesimalPresentationType.GeoMinuteFraction.Milliminute) strategy.merge(LocatorUtils.property(leftLocator, "milliminute", lhsMilliminute), LocatorUtils.property(rightLocator, "milliminute", rhsMilliminute), lhsMilliminute, rhsMilliminute, leftObject.isSetMilliminute(), rightObject.isSetMilliminute()));
                        target.setMilliminute(mergedMilliminute);
                    } else {
                        if (milliminuteShouldBeMergedAndSet == Boolean.FALSE) {
                            target.milliminute = null;
                        }
                    }
                }
                {
                    Boolean decimilliminuteShouldBeMergedAndSet = strategy.shouldBeMergedAndSet(leftLocator, rightLocator, leftObject.isSetDecimilliminute(), rightObject.isSetDecimilliminute());
                    if (decimilliminuteShouldBeMergedAndSet == Boolean.TRUE) {
                        SexagesimalPresentationType.GeoMinuteFraction.Decimilliminute lhsDecimilliminute;
                        lhsDecimilliminute = leftObject.getDecimilliminute();
                        SexagesimalPresentationType.GeoMinuteFraction.Decimilliminute rhsDecimilliminute;
                        rhsDecimilliminute = rightObject.getDecimilliminute();
                        SexagesimalPresentationType.GeoMinuteFraction.Decimilliminute mergedDecimilliminute = ((SexagesimalPresentationType.GeoMinuteFraction.Decimilliminute) strategy.merge(LocatorUtils.property(leftLocator, "decimilliminute", lhsDecimilliminute), LocatorUtils.property(rightLocator, "decimilliminute", rhsDecimilliminute), lhsDecimilliminute, rhsDecimilliminute, leftObject.isSetDecimilliminute(), rightObject.isSetDecimilliminute()));
                        target.setDecimilliminute(mergedDecimilliminute);
                    } else {
                        if (decimilliminuteShouldBeMergedAndSet == Boolean.FALSE) {
                            target.decimilliminute = null;
                        }
                    }
                }
            }
        }


        /**
         * <p>Java class for anonymous complex type.
         * 
         * <p>The following schema fragment specifies the expected content contained within this class.
         * 
         * <pre>
         * &lt;complexType&gt;
         *   &lt;complexContent&gt;
         *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
         *       &lt;sequence&gt;
         *         &lt;element name="latitude" type="{http://metadata.ces.mil/mdr/ns/GSIP/tspi/2.0/core}HectoType"/&gt;
         *         &lt;element name="longitude" type="{http://metadata.ces.mil/mdr/ns/GSIP/tspi/2.0/core}HectoType"/&gt;
         *       &lt;/sequence&gt;
         *     &lt;/restriction&gt;
         *   &lt;/complexContent&gt;
         * &lt;/complexType&gt;
         * </pre>
         * 
         * 
         */
        @XmlAccessorType(XmlAccessType.FIELD)
        @XmlType(name = "", propOrder = {
            "latitude",
            "longitude"
        })
        public static class Centiminute implements Serializable, Cloneable, CopyTo2, Equals2, HashCode2, MergeFrom2, ToString2
        {

            private final static long serialVersionUID = 1L;
            @XmlSchemaType(name = "integer")
            @NotNull(message = "Centiminute.latitude {javax.validation.constraints.NotNull.message}")
            @DecimalMax("99")
            @DecimalMin("00")
            protected int latitude;
            @XmlSchemaType(name = "integer")
            @NotNull(message = "Centiminute.longitude {javax.validation.constraints.NotNull.message}")
            @DecimalMax("99")
            @DecimalMin("00")
            protected int longitude;

            /**
             * Gets the value of the latitude property.
             * 
             */
            public int getLatitude() {
                return latitude;
            }

            /**
             * Sets the value of the latitude property.
             * 
             */
            public void setLatitude(int value) {
                this.latitude = value;
            }

            public boolean isSetLatitude() {
                return true;
            }

            /**
             * Gets the value of the longitude property.
             * 
             */
            public int getLongitude() {
                return longitude;
            }

            /**
             * Sets the value of the longitude property.
             * 
             */
            public void setLongitude(int value) {
                this.longitude = value;
            }

            public boolean isSetLongitude() {
                return true;
            }

            public String toString() {
                final ToStringStrategy2 strategy = JAXBToStringStrategy.INSTANCE;
                final StringBuilder buffer = new StringBuilder();
                append(null, buffer, strategy);
                return buffer.toString();
            }

            public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy2 strategy) {
                strategy.appendStart(locator, this, buffer);
                appendFields(locator, buffer, strategy);
                strategy.appendEnd(locator, this, buffer);
                return buffer;
            }

            public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy2 strategy) {
                {
                    int theLatitude;
                    theLatitude = this.getLatitude();
                    strategy.appendField(locator, this, "latitude", buffer, theLatitude, true);
                }
                {
                    int theLongitude;
                    theLongitude = this.getLongitude();
                    strategy.appendField(locator, this, "longitude", buffer, theLongitude, true);
                }
                return buffer;
            }

            public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy2 strategy) {
                if ((object == null)||(this.getClass()!= object.getClass())) {
                    return false;
                }
                if (this == object) {
                    return true;
                }
                final SexagesimalPresentationType.GeoMinuteFraction.Centiminute that = ((SexagesimalPresentationType.GeoMinuteFraction.Centiminute) object);
                {
                    int lhsLatitude;
                    lhsLatitude = this.getLatitude();
                    int rhsLatitude;
                    rhsLatitude = that.getLatitude();
                    if (!strategy.equals(LocatorUtils.property(thisLocator, "latitude", lhsLatitude), LocatorUtils.property(thatLocator, "latitude", rhsLatitude), lhsLatitude, rhsLatitude, true, true)) {
                        return false;
                    }
                }
                {
                    int lhsLongitude;
                    lhsLongitude = this.getLongitude();
                    int rhsLongitude;
                    rhsLongitude = that.getLongitude();
                    if (!strategy.equals(LocatorUtils.property(thisLocator, "longitude", lhsLongitude), LocatorUtils.property(thatLocator, "longitude", rhsLongitude), lhsLongitude, rhsLongitude, true, true)) {
                        return false;
                    }
                }
                return true;
            }

            public boolean equals(Object object) {
                final EqualsStrategy2 strategy = JAXBEqualsStrategy.INSTANCE;
                return equals(null, null, object, strategy);
            }

            public int hashCode(ObjectLocator locator, HashCodeStrategy2 strategy) {
                int currentHashCode = 1;
                {
                    int theLatitude;
                    theLatitude = this.getLatitude();
                    currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "latitude", theLatitude), currentHashCode, theLatitude, true);
                }
                {
                    int theLongitude;
                    theLongitude = this.getLongitude();
                    currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "longitude", theLongitude), currentHashCode, theLongitude, true);
                }
                return currentHashCode;
            }

            public int hashCode() {
                final HashCodeStrategy2 strategy = JAXBHashCodeStrategy.INSTANCE;
                return this.hashCode(null, strategy);
            }

            public Object clone() {
                return copyTo(createNewInstance());
            }

            public Object copyTo(Object target) {
                final CopyStrategy2 strategy = JAXBCopyStrategy.INSTANCE;
                return copyTo(null, target, strategy);
            }

            public Object copyTo(ObjectLocator locator, Object target, CopyStrategy2 strategy) {
                final Object draftCopy = ((target == null)?createNewInstance():target);
                if (draftCopy instanceof SexagesimalPresentationType.GeoMinuteFraction.Centiminute) {
                    final SexagesimalPresentationType.GeoMinuteFraction.Centiminute copy = ((SexagesimalPresentationType.GeoMinuteFraction.Centiminute) draftCopy);
                    {
                        Boolean latitudeShouldBeCopiedAndSet = strategy.shouldBeCopiedAndSet(locator, true);
                        if (latitudeShouldBeCopiedAndSet == Boolean.TRUE) {
                            int sourceLatitude;
                            sourceLatitude = this.getLatitude();
                            int copyLatitude = strategy.copy(LocatorUtils.property(locator, "latitude", sourceLatitude), sourceLatitude, true);
                            copy.setLatitude(copyLatitude);
                        } else {
                            if (latitudeShouldBeCopiedAndSet == Boolean.FALSE) {
                            }
                        }
                    }
                    {
                        Boolean longitudeShouldBeCopiedAndSet = strategy.shouldBeCopiedAndSet(locator, true);
                        if (longitudeShouldBeCopiedAndSet == Boolean.TRUE) {
                            int sourceLongitude;
                            sourceLongitude = this.getLongitude();
                            int copyLongitude = strategy.copy(LocatorUtils.property(locator, "longitude", sourceLongitude), sourceLongitude, true);
                            copy.setLongitude(copyLongitude);
                        } else {
                            if (longitudeShouldBeCopiedAndSet == Boolean.FALSE) {
                            }
                        }
                    }
                }
                return draftCopy;
            }

            public Object createNewInstance() {
                return new SexagesimalPresentationType.GeoMinuteFraction.Centiminute();
            }

            public void mergeFrom(Object left, Object right) {
                final MergeStrategy2 strategy = JAXBMergeStrategy.INSTANCE;
                mergeFrom(null, null, left, right, strategy);
            }

            public void mergeFrom(ObjectLocator leftLocator, ObjectLocator rightLocator, Object left, Object right, MergeStrategy2 strategy) {
                if (right instanceof SexagesimalPresentationType.GeoMinuteFraction.Centiminute) {
                    final SexagesimalPresentationType.GeoMinuteFraction.Centiminute target = this;
                    final SexagesimalPresentationType.GeoMinuteFraction.Centiminute leftObject = ((SexagesimalPresentationType.GeoMinuteFraction.Centiminute) left);
                    final SexagesimalPresentationType.GeoMinuteFraction.Centiminute rightObject = ((SexagesimalPresentationType.GeoMinuteFraction.Centiminute) right);
                    {
                        Boolean latitudeShouldBeMergedAndSet = strategy.shouldBeMergedAndSet(leftLocator, rightLocator, true, true);
                        if (latitudeShouldBeMergedAndSet == Boolean.TRUE) {
                            int lhsLatitude;
                            lhsLatitude = leftObject.getLatitude();
                            int rhsLatitude;
                            rhsLatitude = rightObject.getLatitude();
                            int mergedLatitude = ((int) strategy.merge(LocatorUtils.property(leftLocator, "latitude", lhsLatitude), LocatorUtils.property(rightLocator, "latitude", rhsLatitude), lhsLatitude, rhsLatitude, true, true));
                            target.setLatitude(mergedLatitude);
                        } else {
                            if (latitudeShouldBeMergedAndSet == Boolean.FALSE) {
                            }
                        }
                    }
                    {
                        Boolean longitudeShouldBeMergedAndSet = strategy.shouldBeMergedAndSet(leftLocator, rightLocator, true, true);
                        if (longitudeShouldBeMergedAndSet == Boolean.TRUE) {
                            int lhsLongitude;
                            lhsLongitude = leftObject.getLongitude();
                            int rhsLongitude;
                            rhsLongitude = rightObject.getLongitude();
                            int mergedLongitude = ((int) strategy.merge(LocatorUtils.property(leftLocator, "longitude", lhsLongitude), LocatorUtils.property(rightLocator, "longitude", rhsLongitude), lhsLongitude, rhsLongitude, true, true));
                            target.setLongitude(mergedLongitude);
                        } else {
                            if (longitudeShouldBeMergedAndSet == Boolean.FALSE) {
                            }
                        }
                    }
                }
            }

        }


        /**
         * <p>Java class for anonymous complex type.
         * 
         * <p>The following schema fragment specifies the expected content contained within this class.
         * 
         * <pre>
         * &lt;complexType&gt;
         *   &lt;complexContent&gt;
         *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
         *       &lt;sequence&gt;
         *         &lt;element name="latitude" type="{http://metadata.ces.mil/mdr/ns/GSIP/tspi/2.0/core}DecakiloType"/&gt;
         *         &lt;element name="longitude" type="{http://metadata.ces.mil/mdr/ns/GSIP/tspi/2.0/core}DecakiloType"/&gt;
         *       &lt;/sequence&gt;
         *     &lt;/restriction&gt;
         *   &lt;/complexContent&gt;
         * &lt;/complexType&gt;
         * </pre>
         * 
         * 
         */
        @XmlAccessorType(XmlAccessType.FIELD)
        @XmlType(name = "", propOrder = {
            "latitude",
            "longitude"
        })
        public static class Decimilliminute implements Serializable, Cloneable, CopyTo2, Equals2, HashCode2, MergeFrom2, ToString2
        {

            private final static long serialVersionUID = 1L;
            @XmlSchemaType(name = "integer")
            @NotNull(message = "Decimilliminute.latitude {javax.validation.constraints.NotNull.message}")
            @DecimalMax("9999")
            @DecimalMin("0000")
            protected int latitude;
            @XmlSchemaType(name = "integer")
            @NotNull(message = "Decimilliminute.longitude {javax.validation.constraints.NotNull.message}")
            @DecimalMax("9999")
            @DecimalMin("0000")
            protected int longitude;

            /**
             * Gets the value of the latitude property.
             * 
             */
            public int getLatitude() {
                return latitude;
            }

            /**
             * Sets the value of the latitude property.
             * 
             */
            public void setLatitude(int value) {
                this.latitude = value;
            }

            public boolean isSetLatitude() {
                return true;
            }

            /**
             * Gets the value of the longitude property.
             * 
             */
            public int getLongitude() {
                return longitude;
            }

            /**
             * Sets the value of the longitude property.
             * 
             */
            public void setLongitude(int value) {
                this.longitude = value;
            }

            public boolean isSetLongitude() {
                return true;
            }

            public String toString() {
                final ToStringStrategy2 strategy = JAXBToStringStrategy.INSTANCE;
                final StringBuilder buffer = new StringBuilder();
                append(null, buffer, strategy);
                return buffer.toString();
            }

            public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy2 strategy) {
                strategy.appendStart(locator, this, buffer);
                appendFields(locator, buffer, strategy);
                strategy.appendEnd(locator, this, buffer);
                return buffer;
            }

            public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy2 strategy) {
                {
                    int theLatitude;
                    theLatitude = this.getLatitude();
                    strategy.appendField(locator, this, "latitude", buffer, theLatitude, true);
                }
                {
                    int theLongitude;
                    theLongitude = this.getLongitude();
                    strategy.appendField(locator, this, "longitude", buffer, theLongitude, true);
                }
                return buffer;
            }

            public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy2 strategy) {
                if ((object == null)||(this.getClass()!= object.getClass())) {
                    return false;
                }
                if (this == object) {
                    return true;
                }
                final SexagesimalPresentationType.GeoMinuteFraction.Decimilliminute that = ((SexagesimalPresentationType.GeoMinuteFraction.Decimilliminute) object);
                {
                    int lhsLatitude;
                    lhsLatitude = this.getLatitude();
                    int rhsLatitude;
                    rhsLatitude = that.getLatitude();
                    if (!strategy.equals(LocatorUtils.property(thisLocator, "latitude", lhsLatitude), LocatorUtils.property(thatLocator, "latitude", rhsLatitude), lhsLatitude, rhsLatitude, true, true)) {
                        return false;
                    }
                }
                {
                    int lhsLongitude;
                    lhsLongitude = this.getLongitude();
                    int rhsLongitude;
                    rhsLongitude = that.getLongitude();
                    if (!strategy.equals(LocatorUtils.property(thisLocator, "longitude", lhsLongitude), LocatorUtils.property(thatLocator, "longitude", rhsLongitude), lhsLongitude, rhsLongitude, true, true)) {
                        return false;
                    }
                }
                return true;
            }

            public boolean equals(Object object) {
                final EqualsStrategy2 strategy = JAXBEqualsStrategy.INSTANCE;
                return equals(null, null, object, strategy);
            }

            public int hashCode(ObjectLocator locator, HashCodeStrategy2 strategy) {
                int currentHashCode = 1;
                {
                    int theLatitude;
                    theLatitude = this.getLatitude();
                    currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "latitude", theLatitude), currentHashCode, theLatitude, true);
                }
                {
                    int theLongitude;
                    theLongitude = this.getLongitude();
                    currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "longitude", theLongitude), currentHashCode, theLongitude, true);
                }
                return currentHashCode;
            }

            public int hashCode() {
                final HashCodeStrategy2 strategy = JAXBHashCodeStrategy.INSTANCE;
                return this.hashCode(null, strategy);
            }

            public Object clone() {
                return copyTo(createNewInstance());
            }

            public Object copyTo(Object target) {
                final CopyStrategy2 strategy = JAXBCopyStrategy.INSTANCE;
                return copyTo(null, target, strategy);
            }

            public Object copyTo(ObjectLocator locator, Object target, CopyStrategy2 strategy) {
                final Object draftCopy = ((target == null)?createNewInstance():target);
                if (draftCopy instanceof SexagesimalPresentationType.GeoMinuteFraction.Decimilliminute) {
                    final SexagesimalPresentationType.GeoMinuteFraction.Decimilliminute copy = ((SexagesimalPresentationType.GeoMinuteFraction.Decimilliminute) draftCopy);
                    {
                        Boolean latitudeShouldBeCopiedAndSet = strategy.shouldBeCopiedAndSet(locator, true);
                        if (latitudeShouldBeCopiedAndSet == Boolean.TRUE) {
                            int sourceLatitude;
                            sourceLatitude = this.getLatitude();
                            int copyLatitude = strategy.copy(LocatorUtils.property(locator, "latitude", sourceLatitude), sourceLatitude, true);
                            copy.setLatitude(copyLatitude);
                        } else {
                            if (latitudeShouldBeCopiedAndSet == Boolean.FALSE) {
                            }
                        }
                    }
                    {
                        Boolean longitudeShouldBeCopiedAndSet = strategy.shouldBeCopiedAndSet(locator, true);
                        if (longitudeShouldBeCopiedAndSet == Boolean.TRUE) {
                            int sourceLongitude;
                            sourceLongitude = this.getLongitude();
                            int copyLongitude = strategy.copy(LocatorUtils.property(locator, "longitude", sourceLongitude), sourceLongitude, true);
                            copy.setLongitude(copyLongitude);
                        } else {
                            if (longitudeShouldBeCopiedAndSet == Boolean.FALSE) {
                            }
                        }
                    }
                }
                return draftCopy;
            }

            public Object createNewInstance() {
                return new SexagesimalPresentationType.GeoMinuteFraction.Decimilliminute();
            }

            public void mergeFrom(Object left, Object right) {
                final MergeStrategy2 strategy = JAXBMergeStrategy.INSTANCE;
                mergeFrom(null, null, left, right, strategy);
            }

            public void mergeFrom(ObjectLocator leftLocator, ObjectLocator rightLocator, Object left, Object right, MergeStrategy2 strategy) {
                if (right instanceof SexagesimalPresentationType.GeoMinuteFraction.Decimilliminute) {
                    final SexagesimalPresentationType.GeoMinuteFraction.Decimilliminute target = this;
                    final SexagesimalPresentationType.GeoMinuteFraction.Decimilliminute leftObject = ((SexagesimalPresentationType.GeoMinuteFraction.Decimilliminute) left);
                    final SexagesimalPresentationType.GeoMinuteFraction.Decimilliminute rightObject = ((SexagesimalPresentationType.GeoMinuteFraction.Decimilliminute) right);
                    {
                        Boolean latitudeShouldBeMergedAndSet = strategy.shouldBeMergedAndSet(leftLocator, rightLocator, true, true);
                        if (latitudeShouldBeMergedAndSet == Boolean.TRUE) {
                            int lhsLatitude;
                            lhsLatitude = leftObject.getLatitude();
                            int rhsLatitude;
                            rhsLatitude = rightObject.getLatitude();
                            int mergedLatitude = ((int) strategy.merge(LocatorUtils.property(leftLocator, "latitude", lhsLatitude), LocatorUtils.property(rightLocator, "latitude", rhsLatitude), lhsLatitude, rhsLatitude, true, true));
                            target.setLatitude(mergedLatitude);
                        } else {
                            if (latitudeShouldBeMergedAndSet == Boolean.FALSE) {
                            }
                        }
                    }
                    {
                        Boolean longitudeShouldBeMergedAndSet = strategy.shouldBeMergedAndSet(leftLocator, rightLocator, true, true);
                        if (longitudeShouldBeMergedAndSet == Boolean.TRUE) {
                            int lhsLongitude;
                            lhsLongitude = leftObject.getLongitude();
                            int rhsLongitude;
                            rhsLongitude = rightObject.getLongitude();
                            int mergedLongitude = ((int) strategy.merge(LocatorUtils.property(leftLocator, "longitude", lhsLongitude), LocatorUtils.property(rightLocator, "longitude", rhsLongitude), lhsLongitude, rhsLongitude, true, true));
                            target.setLongitude(mergedLongitude);
                        } else {
                            if (longitudeShouldBeMergedAndSet == Boolean.FALSE) {
                            }
                        }
                    }
                }
            }

        }


        /**
         * <p>Java class for anonymous complex type.
         * 
         * <p>The following schema fragment specifies the expected content contained within this class.
         * 
         * <pre>
         * &lt;complexType&gt;
         *   &lt;complexContent&gt;
         *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
         *       &lt;sequence&gt;
         *         &lt;element name="latitude" type="{http://metadata.ces.mil/mdr/ns/GSIP/tspi/2.0/core}DecaType"/&gt;
         *         &lt;element name="longitude" type="{http://metadata.ces.mil/mdr/ns/GSIP/tspi/2.0/core}DecaType"/&gt;
         *       &lt;/sequence&gt;
         *     &lt;/restriction&gt;
         *   &lt;/complexContent&gt;
         * &lt;/complexType&gt;
         * </pre>
         * 
         * 
         */
        @XmlAccessorType(XmlAccessType.FIELD)
        @XmlType(name = "", propOrder = {
            "latitude",
            "longitude"
        })
        public static class Deciminute implements Serializable, Cloneable, CopyTo2, Equals2, HashCode2, MergeFrom2, ToString2
        {

            private final static long serialVersionUID = 1L;
            @XmlSchemaType(name = "integer")
            @NotNull(message = "Deciminute.latitude {javax.validation.constraints.NotNull.message}")
            @DecimalMax("9")
            @DecimalMin("0")
            protected int latitude;
            @XmlSchemaType(name = "integer")
            @NotNull(message = "Deciminute.longitude {javax.validation.constraints.NotNull.message}")
            @DecimalMax("9")
            @DecimalMin("0")
            protected int longitude;

            /**
             * Gets the value of the latitude property.
             * 
             */
            public int getLatitude() {
                return latitude;
            }

            /**
             * Sets the value of the latitude property.
             * 
             */
            public void setLatitude(int value) {
                this.latitude = value;
            }

            public boolean isSetLatitude() {
                return true;
            }

            /**
             * Gets the value of the longitude property.
             * 
             */
            public int getLongitude() {
                return longitude;
            }

            /**
             * Sets the value of the longitude property.
             * 
             */
            public void setLongitude(int value) {
                this.longitude = value;
            }

            public boolean isSetLongitude() {
                return true;
            }

            public String toString() {
                final ToStringStrategy2 strategy = JAXBToStringStrategy.INSTANCE;
                final StringBuilder buffer = new StringBuilder();
                append(null, buffer, strategy);
                return buffer.toString();
            }

            public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy2 strategy) {
                strategy.appendStart(locator, this, buffer);
                appendFields(locator, buffer, strategy);
                strategy.appendEnd(locator, this, buffer);
                return buffer;
            }

            public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy2 strategy) {
                {
                    int theLatitude;
                    theLatitude = this.getLatitude();
                    strategy.appendField(locator, this, "latitude", buffer, theLatitude, true);
                }
                {
                    int theLongitude;
                    theLongitude = this.getLongitude();
                    strategy.appendField(locator, this, "longitude", buffer, theLongitude, true);
                }
                return buffer;
            }

            public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy2 strategy) {
                if ((object == null)||(this.getClass()!= object.getClass())) {
                    return false;
                }
                if (this == object) {
                    return true;
                }
                final SexagesimalPresentationType.GeoMinuteFraction.Deciminute that = ((SexagesimalPresentationType.GeoMinuteFraction.Deciminute) object);
                {
                    int lhsLatitude;
                    lhsLatitude = this.getLatitude();
                    int rhsLatitude;
                    rhsLatitude = that.getLatitude();
                    if (!strategy.equals(LocatorUtils.property(thisLocator, "latitude", lhsLatitude), LocatorUtils.property(thatLocator, "latitude", rhsLatitude), lhsLatitude, rhsLatitude, true, true)) {
                        return false;
                    }
                }
                {
                    int lhsLongitude;
                    lhsLongitude = this.getLongitude();
                    int rhsLongitude;
                    rhsLongitude = that.getLongitude();
                    if (!strategy.equals(LocatorUtils.property(thisLocator, "longitude", lhsLongitude), LocatorUtils.property(thatLocator, "longitude", rhsLongitude), lhsLongitude, rhsLongitude, true, true)) {
                        return false;
                    }
                }
                return true;
            }

            public boolean equals(Object object) {
                final EqualsStrategy2 strategy = JAXBEqualsStrategy.INSTANCE;
                return equals(null, null, object, strategy);
            }

            public int hashCode(ObjectLocator locator, HashCodeStrategy2 strategy) {
                int currentHashCode = 1;
                {
                    int theLatitude;
                    theLatitude = this.getLatitude();
                    currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "latitude", theLatitude), currentHashCode, theLatitude, true);
                }
                {
                    int theLongitude;
                    theLongitude = this.getLongitude();
                    currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "longitude", theLongitude), currentHashCode, theLongitude, true);
                }
                return currentHashCode;
            }

            public int hashCode() {
                final HashCodeStrategy2 strategy = JAXBHashCodeStrategy.INSTANCE;
                return this.hashCode(null, strategy);
            }

            public Object clone() {
                return copyTo(createNewInstance());
            }

            public Object copyTo(Object target) {
                final CopyStrategy2 strategy = JAXBCopyStrategy.INSTANCE;
                return copyTo(null, target, strategy);
            }

            public Object copyTo(ObjectLocator locator, Object target, CopyStrategy2 strategy) {
                final Object draftCopy = ((target == null)?createNewInstance():target);
                if (draftCopy instanceof SexagesimalPresentationType.GeoMinuteFraction.Deciminute) {
                    final SexagesimalPresentationType.GeoMinuteFraction.Deciminute copy = ((SexagesimalPresentationType.GeoMinuteFraction.Deciminute) draftCopy);
                    {
                        Boolean latitudeShouldBeCopiedAndSet = strategy.shouldBeCopiedAndSet(locator, true);
                        if (latitudeShouldBeCopiedAndSet == Boolean.TRUE) {
                            int sourceLatitude;
                            sourceLatitude = this.getLatitude();
                            int copyLatitude = strategy.copy(LocatorUtils.property(locator, "latitude", sourceLatitude), sourceLatitude, true);
                            copy.setLatitude(copyLatitude);
                        } else {
                            if (latitudeShouldBeCopiedAndSet == Boolean.FALSE) {
                            }
                        }
                    }
                    {
                        Boolean longitudeShouldBeCopiedAndSet = strategy.shouldBeCopiedAndSet(locator, true);
                        if (longitudeShouldBeCopiedAndSet == Boolean.TRUE) {
                            int sourceLongitude;
                            sourceLongitude = this.getLongitude();
                            int copyLongitude = strategy.copy(LocatorUtils.property(locator, "longitude", sourceLongitude), sourceLongitude, true);
                            copy.setLongitude(copyLongitude);
                        } else {
                            if (longitudeShouldBeCopiedAndSet == Boolean.FALSE) {
                            }
                        }
                    }
                }
                return draftCopy;
            }

            public Object createNewInstance() {
                return new SexagesimalPresentationType.GeoMinuteFraction.Deciminute();
            }

            public void mergeFrom(Object left, Object right) {
                final MergeStrategy2 strategy = JAXBMergeStrategy.INSTANCE;
                mergeFrom(null, null, left, right, strategy);
            }

            public void mergeFrom(ObjectLocator leftLocator, ObjectLocator rightLocator, Object left, Object right, MergeStrategy2 strategy) {
                if (right instanceof SexagesimalPresentationType.GeoMinuteFraction.Deciminute) {
                    final SexagesimalPresentationType.GeoMinuteFraction.Deciminute target = this;
                    final SexagesimalPresentationType.GeoMinuteFraction.Deciminute leftObject = ((SexagesimalPresentationType.GeoMinuteFraction.Deciminute) left);
                    final SexagesimalPresentationType.GeoMinuteFraction.Deciminute rightObject = ((SexagesimalPresentationType.GeoMinuteFraction.Deciminute) right);
                    {
                        Boolean latitudeShouldBeMergedAndSet = strategy.shouldBeMergedAndSet(leftLocator, rightLocator, true, true);
                        if (latitudeShouldBeMergedAndSet == Boolean.TRUE) {
                            int lhsLatitude;
                            lhsLatitude = leftObject.getLatitude();
                            int rhsLatitude;
                            rhsLatitude = rightObject.getLatitude();
                            int mergedLatitude = ((int) strategy.merge(LocatorUtils.property(leftLocator, "latitude", lhsLatitude), LocatorUtils.property(rightLocator, "latitude", rhsLatitude), lhsLatitude, rhsLatitude, true, true));
                            target.setLatitude(mergedLatitude);
                        } else {
                            if (latitudeShouldBeMergedAndSet == Boolean.FALSE) {
                            }
                        }
                    }
                    {
                        Boolean longitudeShouldBeMergedAndSet = strategy.shouldBeMergedAndSet(leftLocator, rightLocator, true, true);
                        if (longitudeShouldBeMergedAndSet == Boolean.TRUE) {
                            int lhsLongitude;
                            lhsLongitude = leftObject.getLongitude();
                            int rhsLongitude;
                            rhsLongitude = rightObject.getLongitude();
                            int mergedLongitude = ((int) strategy.merge(LocatorUtils.property(leftLocator, "longitude", lhsLongitude), LocatorUtils.property(rightLocator, "longitude", rhsLongitude), lhsLongitude, rhsLongitude, true, true));
                            target.setLongitude(mergedLongitude);
                        } else {
                            if (longitudeShouldBeMergedAndSet == Boolean.FALSE) {
                            }
                        }
                    }
                }
            }

        }


        /**
         * <p>Java class for anonymous complex type.
         * 
         * <p>The following schema fragment specifies the expected content contained within this class.
         * 
         * <pre>
         * &lt;complexType&gt;
         *   &lt;complexContent&gt;
         *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
         *       &lt;sequence&gt;
         *         &lt;element name="latitude" type="{http://metadata.ces.mil/mdr/ns/GSIP/tspi/2.0/core}KiloType"/&gt;
         *         &lt;element name="longitude" type="{http://metadata.ces.mil/mdr/ns/GSIP/tspi/2.0/core}KiloType"/&gt;
         *       &lt;/sequence&gt;
         *     &lt;/restriction&gt;
         *   &lt;/complexContent&gt;
         * &lt;/complexType&gt;
         * </pre>
         * 
         * 
         */
        @XmlAccessorType(XmlAccessType.FIELD)
        @XmlType(name = "", propOrder = {
            "latitude",
            "longitude"
        })
        public static class Milliminute implements Serializable, Cloneable, CopyTo2, Equals2, HashCode2, MergeFrom2, ToString2
        {

            private final static long serialVersionUID = 1L;
            @XmlSchemaType(name = "integer")
            @NotNull(message = "Milliminute.latitude {javax.validation.constraints.NotNull.message}")
            @DecimalMax("999")
            @DecimalMin("000")
            protected int latitude;
            @XmlSchemaType(name = "integer")
            @NotNull(message = "Milliminute.longitude {javax.validation.constraints.NotNull.message}")
            @DecimalMax("999")
            @DecimalMin("000")
            protected int longitude;

            /**
             * Gets the value of the latitude property.
             * 
             */
            public int getLatitude() {
                return latitude;
            }

            /**
             * Sets the value of the latitude property.
             * 
             */
            public void setLatitude(int value) {
                this.latitude = value;
            }

            public boolean isSetLatitude() {
                return true;
            }

            /**
             * Gets the value of the longitude property.
             * 
             */
            public int getLongitude() {
                return longitude;
            }

            /**
             * Sets the value of the longitude property.
             * 
             */
            public void setLongitude(int value) {
                this.longitude = value;
            }

            public boolean isSetLongitude() {
                return true;
            }

            public String toString() {
                final ToStringStrategy2 strategy = JAXBToStringStrategy.INSTANCE;
                final StringBuilder buffer = new StringBuilder();
                append(null, buffer, strategy);
                return buffer.toString();
            }

            public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy2 strategy) {
                strategy.appendStart(locator, this, buffer);
                appendFields(locator, buffer, strategy);
                strategy.appendEnd(locator, this, buffer);
                return buffer;
            }

            public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy2 strategy) {
                {
                    int theLatitude;
                    theLatitude = this.getLatitude();
                    strategy.appendField(locator, this, "latitude", buffer, theLatitude, true);
                }
                {
                    int theLongitude;
                    theLongitude = this.getLongitude();
                    strategy.appendField(locator, this, "longitude", buffer, theLongitude, true);
                }
                return buffer;
            }

            public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy2 strategy) {
                if ((object == null)||(this.getClass()!= object.getClass())) {
                    return false;
                }
                if (this == object) {
                    return true;
                }
                final SexagesimalPresentationType.GeoMinuteFraction.Milliminute that = ((SexagesimalPresentationType.GeoMinuteFraction.Milliminute) object);
                {
                    int lhsLatitude;
                    lhsLatitude = this.getLatitude();
                    int rhsLatitude;
                    rhsLatitude = that.getLatitude();
                    if (!strategy.equals(LocatorUtils.property(thisLocator, "latitude", lhsLatitude), LocatorUtils.property(thatLocator, "latitude", rhsLatitude), lhsLatitude, rhsLatitude, true, true)) {
                        return false;
                    }
                }
                {
                    int lhsLongitude;
                    lhsLongitude = this.getLongitude();
                    int rhsLongitude;
                    rhsLongitude = that.getLongitude();
                    if (!strategy.equals(LocatorUtils.property(thisLocator, "longitude", lhsLongitude), LocatorUtils.property(thatLocator, "longitude", rhsLongitude), lhsLongitude, rhsLongitude, true, true)) {
                        return false;
                    }
                }
                return true;
            }

            public boolean equals(Object object) {
                final EqualsStrategy2 strategy = JAXBEqualsStrategy.INSTANCE;
                return equals(null, null, object, strategy);
            }

            public int hashCode(ObjectLocator locator, HashCodeStrategy2 strategy) {
                int currentHashCode = 1;
                {
                    int theLatitude;
                    theLatitude = this.getLatitude();
                    currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "latitude", theLatitude), currentHashCode, theLatitude, true);
                }
                {
                    int theLongitude;
                    theLongitude = this.getLongitude();
                    currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "longitude", theLongitude), currentHashCode, theLongitude, true);
                }
                return currentHashCode;
            }

            public int hashCode() {
                final HashCodeStrategy2 strategy = JAXBHashCodeStrategy.INSTANCE;
                return this.hashCode(null, strategy);
            }

            public Object clone() {
                return copyTo(createNewInstance());
            }

            public Object copyTo(Object target) {
                final CopyStrategy2 strategy = JAXBCopyStrategy.INSTANCE;
                return copyTo(null, target, strategy);
            }

            public Object copyTo(ObjectLocator locator, Object target, CopyStrategy2 strategy) {
                final Object draftCopy = ((target == null)?createNewInstance():target);
                if (draftCopy instanceof SexagesimalPresentationType.GeoMinuteFraction.Milliminute) {
                    final SexagesimalPresentationType.GeoMinuteFraction.Milliminute copy = ((SexagesimalPresentationType.GeoMinuteFraction.Milliminute) draftCopy);
                    {
                        Boolean latitudeShouldBeCopiedAndSet = strategy.shouldBeCopiedAndSet(locator, true);
                        if (latitudeShouldBeCopiedAndSet == Boolean.TRUE) {
                            int sourceLatitude;
                            sourceLatitude = this.getLatitude();
                            int copyLatitude = strategy.copy(LocatorUtils.property(locator, "latitude", sourceLatitude), sourceLatitude, true);
                            copy.setLatitude(copyLatitude);
                        } else {
                            if (latitudeShouldBeCopiedAndSet == Boolean.FALSE) {
                            }
                        }
                    }
                    {
                        Boolean longitudeShouldBeCopiedAndSet = strategy.shouldBeCopiedAndSet(locator, true);
                        if (longitudeShouldBeCopiedAndSet == Boolean.TRUE) {
                            int sourceLongitude;
                            sourceLongitude = this.getLongitude();
                            int copyLongitude = strategy.copy(LocatorUtils.property(locator, "longitude", sourceLongitude), sourceLongitude, true);
                            copy.setLongitude(copyLongitude);
                        } else {
                            if (longitudeShouldBeCopiedAndSet == Boolean.FALSE) {
                            }
                        }
                    }
                }
                return draftCopy;
            }

            public Object createNewInstance() {
                return new SexagesimalPresentationType.GeoMinuteFraction.Milliminute();
            }

            public void mergeFrom(Object left, Object right) {
                final MergeStrategy2 strategy = JAXBMergeStrategy.INSTANCE;
                mergeFrom(null, null, left, right, strategy);
            }

            public void mergeFrom(ObjectLocator leftLocator, ObjectLocator rightLocator, Object left, Object right, MergeStrategy2 strategy) {
                if (right instanceof SexagesimalPresentationType.GeoMinuteFraction.Milliminute) {
                    final SexagesimalPresentationType.GeoMinuteFraction.Milliminute target = this;
                    final SexagesimalPresentationType.GeoMinuteFraction.Milliminute leftObject = ((SexagesimalPresentationType.GeoMinuteFraction.Milliminute) left);
                    final SexagesimalPresentationType.GeoMinuteFraction.Milliminute rightObject = ((SexagesimalPresentationType.GeoMinuteFraction.Milliminute) right);
                    {
                        Boolean latitudeShouldBeMergedAndSet = strategy.shouldBeMergedAndSet(leftLocator, rightLocator, true, true);
                        if (latitudeShouldBeMergedAndSet == Boolean.TRUE) {
                            int lhsLatitude;
                            lhsLatitude = leftObject.getLatitude();
                            int rhsLatitude;
                            rhsLatitude = rightObject.getLatitude();
                            int mergedLatitude = ((int) strategy.merge(LocatorUtils.property(leftLocator, "latitude", lhsLatitude), LocatorUtils.property(rightLocator, "latitude", rhsLatitude), lhsLatitude, rhsLatitude, true, true));
                            target.setLatitude(mergedLatitude);
                        } else {
                            if (latitudeShouldBeMergedAndSet == Boolean.FALSE) {
                            }
                        }
                    }
                    {
                        Boolean longitudeShouldBeMergedAndSet = strategy.shouldBeMergedAndSet(leftLocator, rightLocator, true, true);
                        if (longitudeShouldBeMergedAndSet == Boolean.TRUE) {
                            int lhsLongitude;
                            lhsLongitude = leftObject.getLongitude();
                            int rhsLongitude;
                            rhsLongitude = rightObject.getLongitude();
                            int mergedLongitude = ((int) strategy.merge(LocatorUtils.property(leftLocator, "longitude", lhsLongitude), LocatorUtils.property(rightLocator, "longitude", rhsLongitude), lhsLongitude, rhsLongitude, true, true));
                            target.setLongitude(mergedLongitude);
                        } else {
                            if (longitudeShouldBeMergedAndSet == Boolean.FALSE) {
                            }
                        }
                    }
                }
            }

        }

    }


    /**
     * <p>Java class for anonymous complex type.
     * 
     * <p>The following schema fragment specifies the expected content contained within this class.
     * 
     * <pre>
     * &lt;complexType&gt;
     *   &lt;complexContent&gt;
     *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
     *       &lt;sequence&gt;
     *         &lt;element name="latitude" type="{http://metadata.ces.mil/mdr/ns/GSIP/tspi/2.0/core}SexagesimalType"/&gt;
     *         &lt;element name="longitude" type="{http://metadata.ces.mil/mdr/ns/GSIP/tspi/2.0/core}SexagesimalType"/&gt;
     *       &lt;/sequence&gt;
     *     &lt;/restriction&gt;
     *   &lt;/complexContent&gt;
     * &lt;/complexType&gt;
     * </pre>
     * 
     * 
     */
    @XmlAccessorType(XmlAccessType.FIELD)
    @XmlType(name = "", propOrder = {
        "latitude",
        "longitude"
    })
    public static class GeoSecond implements Serializable, Cloneable, CopyTo2, Equals2, HashCode2, MergeFrom2, ToString2
    {

        private final static long serialVersionUID = 1L;
        @XmlSchemaType(name = "integer")
        @NotNull(message = "GeoSecond.latitude {javax.validation.constraints.NotNull.message}")
        @DecimalMax("59")
        @DecimalMin("00")
        protected int latitude;
        @XmlSchemaType(name = "integer")
        @NotNull(message = "GeoSecond.longitude {javax.validation.constraints.NotNull.message}")
        @DecimalMax("59")
        @DecimalMin("00")
        protected int longitude;

        /**
         * Gets the value of the latitude property.
         * 
         */
        public int getLatitude() {
            return latitude;
        }

        /**
         * Sets the value of the latitude property.
         * 
         */
        public void setLatitude(int value) {
            this.latitude = value;
        }

        public boolean isSetLatitude() {
            return true;
        }

        /**
         * Gets the value of the longitude property.
         * 
         */
        public int getLongitude() {
            return longitude;
        }

        /**
         * Sets the value of the longitude property.
         * 
         */
        public void setLongitude(int value) {
            this.longitude = value;
        }

        public boolean isSetLongitude() {
            return true;
        }

        public String toString() {
            final ToStringStrategy2 strategy = JAXBToStringStrategy.INSTANCE;
            final StringBuilder buffer = new StringBuilder();
            append(null, buffer, strategy);
            return buffer.toString();
        }

        public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy2 strategy) {
            strategy.appendStart(locator, this, buffer);
            appendFields(locator, buffer, strategy);
            strategy.appendEnd(locator, this, buffer);
            return buffer;
        }

        public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy2 strategy) {
            {
                int theLatitude;
                theLatitude = this.getLatitude();
                strategy.appendField(locator, this, "latitude", buffer, theLatitude, true);
            }
            {
                int theLongitude;
                theLongitude = this.getLongitude();
                strategy.appendField(locator, this, "longitude", buffer, theLongitude, true);
            }
            return buffer;
        }

        public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy2 strategy) {
            if ((object == null)||(this.getClass()!= object.getClass())) {
                return false;
            }
            if (this == object) {
                return true;
            }
            final SexagesimalPresentationType.GeoSecond that = ((SexagesimalPresentationType.GeoSecond) object);
            {
                int lhsLatitude;
                lhsLatitude = this.getLatitude();
                int rhsLatitude;
                rhsLatitude = that.getLatitude();
                if (!strategy.equals(LocatorUtils.property(thisLocator, "latitude", lhsLatitude), LocatorUtils.property(thatLocator, "latitude", rhsLatitude), lhsLatitude, rhsLatitude, true, true)) {
                    return false;
                }
            }
            {
                int lhsLongitude;
                lhsLongitude = this.getLongitude();
                int rhsLongitude;
                rhsLongitude = that.getLongitude();
                if (!strategy.equals(LocatorUtils.property(thisLocator, "longitude", lhsLongitude), LocatorUtils.property(thatLocator, "longitude", rhsLongitude), lhsLongitude, rhsLongitude, true, true)) {
                    return false;
                }
            }
            return true;
        }

        public boolean equals(Object object) {
            final EqualsStrategy2 strategy = JAXBEqualsStrategy.INSTANCE;
            return equals(null, null, object, strategy);
        }

        public int hashCode(ObjectLocator locator, HashCodeStrategy2 strategy) {
            int currentHashCode = 1;
            {
                int theLatitude;
                theLatitude = this.getLatitude();
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "latitude", theLatitude), currentHashCode, theLatitude, true);
            }
            {
                int theLongitude;
                theLongitude = this.getLongitude();
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "longitude", theLongitude), currentHashCode, theLongitude, true);
            }
            return currentHashCode;
        }

        public int hashCode() {
            final HashCodeStrategy2 strategy = JAXBHashCodeStrategy.INSTANCE;
            return this.hashCode(null, strategy);
        }

        public Object clone() {
            return copyTo(createNewInstance());
        }

        public Object copyTo(Object target) {
            final CopyStrategy2 strategy = JAXBCopyStrategy.INSTANCE;
            return copyTo(null, target, strategy);
        }

        public Object copyTo(ObjectLocator locator, Object target, CopyStrategy2 strategy) {
            final Object draftCopy = ((target == null)?createNewInstance():target);
            if (draftCopy instanceof SexagesimalPresentationType.GeoSecond) {
                final SexagesimalPresentationType.GeoSecond copy = ((SexagesimalPresentationType.GeoSecond) draftCopy);
                {
                    Boolean latitudeShouldBeCopiedAndSet = strategy.shouldBeCopiedAndSet(locator, true);
                    if (latitudeShouldBeCopiedAndSet == Boolean.TRUE) {
                        int sourceLatitude;
                        sourceLatitude = this.getLatitude();
                        int copyLatitude = strategy.copy(LocatorUtils.property(locator, "latitude", sourceLatitude), sourceLatitude, true);
                        copy.setLatitude(copyLatitude);
                    } else {
                        if (latitudeShouldBeCopiedAndSet == Boolean.FALSE) {
                        }
                    }
                }
                {
                    Boolean longitudeShouldBeCopiedAndSet = strategy.shouldBeCopiedAndSet(locator, true);
                    if (longitudeShouldBeCopiedAndSet == Boolean.TRUE) {
                        int sourceLongitude;
                        sourceLongitude = this.getLongitude();
                        int copyLongitude = strategy.copy(LocatorUtils.property(locator, "longitude", sourceLongitude), sourceLongitude, true);
                        copy.setLongitude(copyLongitude);
                    } else {
                        if (longitudeShouldBeCopiedAndSet == Boolean.FALSE) {
                        }
                    }
                }
            }
            return draftCopy;
        }

        public Object createNewInstance() {
            return new SexagesimalPresentationType.GeoSecond();
        }

        public void mergeFrom(Object left, Object right) {
            final MergeStrategy2 strategy = JAXBMergeStrategy.INSTANCE;
            mergeFrom(null, null, left, right, strategy);
        }

        public void mergeFrom(ObjectLocator leftLocator, ObjectLocator rightLocator, Object left, Object right, MergeStrategy2 strategy) {
            if (right instanceof SexagesimalPresentationType.GeoSecond) {
                final SexagesimalPresentationType.GeoSecond target = this;
                final SexagesimalPresentationType.GeoSecond leftObject = ((SexagesimalPresentationType.GeoSecond) left);
                final SexagesimalPresentationType.GeoSecond rightObject = ((SexagesimalPresentationType.GeoSecond) right);
                {
                    Boolean latitudeShouldBeMergedAndSet = strategy.shouldBeMergedAndSet(leftLocator, rightLocator, true, true);
                    if (latitudeShouldBeMergedAndSet == Boolean.TRUE) {
                        int lhsLatitude;
                        lhsLatitude = leftObject.getLatitude();
                        int rhsLatitude;
                        rhsLatitude = rightObject.getLatitude();
                        int mergedLatitude = ((int) strategy.merge(LocatorUtils.property(leftLocator, "latitude", lhsLatitude), LocatorUtils.property(rightLocator, "latitude", rhsLatitude), lhsLatitude, rhsLatitude, true, true));
                        target.setLatitude(mergedLatitude);
                    } else {
                        if (latitudeShouldBeMergedAndSet == Boolean.FALSE) {
                        }
                    }
                }
                {
                    Boolean longitudeShouldBeMergedAndSet = strategy.shouldBeMergedAndSet(leftLocator, rightLocator, true, true);
                    if (longitudeShouldBeMergedAndSet == Boolean.TRUE) {
                        int lhsLongitude;
                        lhsLongitude = leftObject.getLongitude();
                        int rhsLongitude;
                        rhsLongitude = rightObject.getLongitude();
                        int mergedLongitude = ((int) strategy.merge(LocatorUtils.property(leftLocator, "longitude", lhsLongitude), LocatorUtils.property(rightLocator, "longitude", rhsLongitude), lhsLongitude, rhsLongitude, true, true));
                        target.setLongitude(mergedLongitude);
                    } else {
                        if (longitudeShouldBeMergedAndSet == Boolean.FALSE) {
                        }
                    }
                }
            }
        }

    }


    /**
     * <p>Java class for anonymous complex type.
     * 
     * <p>The following schema fragment specifies the expected content contained within this class.
     * 
     * <pre>
     * &lt;complexType&gt;
     *   &lt;complexContent&gt;
     *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
     *       &lt;choice&gt;
     *         &lt;element name="decisecond"&gt;
     *           &lt;complexType&gt;
     *             &lt;complexContent&gt;
     *               &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
     *                 &lt;sequence&gt;
     *                   &lt;element name="latitude" type="{http://metadata.ces.mil/mdr/ns/GSIP/tspi/2.0/core}DecaType"/&gt;
     *                   &lt;element name="longitude" type="{http://metadata.ces.mil/mdr/ns/GSIP/tspi/2.0/core}DecaType"/&gt;
     *                 &lt;/sequence&gt;
     *               &lt;/restriction&gt;
     *             &lt;/complexContent&gt;
     *           &lt;/complexType&gt;
     *         &lt;/element&gt;
     *         &lt;element name="centisecond"&gt;
     *           &lt;complexType&gt;
     *             &lt;complexContent&gt;
     *               &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
     *                 &lt;sequence&gt;
     *                   &lt;element name="latitude" type="{http://metadata.ces.mil/mdr/ns/GSIP/tspi/2.0/core}HectoType"/&gt;
     *                   &lt;element name="longitude" type="{http://metadata.ces.mil/mdr/ns/GSIP/tspi/2.0/core}HectoType"/&gt;
     *                 &lt;/sequence&gt;
     *               &lt;/restriction&gt;
     *             &lt;/complexContent&gt;
     *           &lt;/complexType&gt;
     *         &lt;/element&gt;
     *         &lt;element name="millisecond"&gt;
     *           &lt;complexType&gt;
     *             &lt;complexContent&gt;
     *               &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
     *                 &lt;sequence&gt;
     *                   &lt;element name="latitude" type="{http://metadata.ces.mil/mdr/ns/GSIP/tspi/2.0/core}KiloType"/&gt;
     *                   &lt;element name="longitude" type="{http://metadata.ces.mil/mdr/ns/GSIP/tspi/2.0/core}KiloType"/&gt;
     *                 &lt;/sequence&gt;
     *               &lt;/restriction&gt;
     *             &lt;/complexContent&gt;
     *           &lt;/complexType&gt;
     *         &lt;/element&gt;
     *       &lt;/choice&gt;
     *     &lt;/restriction&gt;
     *   &lt;/complexContent&gt;
     * &lt;/complexType&gt;
     * </pre>
     * 
     * 
     */
    @XmlAccessorType(XmlAccessType.FIELD)
    @XmlType(name = "", propOrder = {
        "decisecond",
        "centisecond",
        "millisecond"
    })
    public static class GeoSecondFraction implements Serializable, Cloneable, CopyTo2, Equals2, HashCode2, MergeFrom2, ToString2
    {

        private final static long serialVersionUID = 1L;
        @Valid
        protected SexagesimalPresentationType.GeoSecondFraction.Decisecond decisecond;
        @Valid
        protected SexagesimalPresentationType.GeoSecondFraction.Centisecond centisecond;
        @Valid
        protected SexagesimalPresentationType.GeoSecondFraction.Millisecond millisecond;

        /**
         * Gets the value of the decisecond property.
         * 
         * @return
         *     possible object is
         *     {@link SexagesimalPresentationType.GeoSecondFraction.Decisecond }
         *     
         */
        public SexagesimalPresentationType.GeoSecondFraction.Decisecond getDecisecond() {
            return decisecond;
        }

        /**
         * Sets the value of the decisecond property.
         * 
         * @param value
         *     allowed object is
         *     {@link SexagesimalPresentationType.GeoSecondFraction.Decisecond }
         *     
         */
        public void setDecisecond(SexagesimalPresentationType.GeoSecondFraction.Decisecond value) {
            this.decisecond = value;
        }

        public boolean isSetDecisecond() {
            return (this.decisecond!= null);
        }

        /**
         * Gets the value of the centisecond property.
         * 
         * @return
         *     possible object is
         *     {@link SexagesimalPresentationType.GeoSecondFraction.Centisecond }
         *     
         */
        public SexagesimalPresentationType.GeoSecondFraction.Centisecond getCentisecond() {
            return centisecond;
        }

        /**
         * Sets the value of the centisecond property.
         * 
         * @param value
         *     allowed object is
         *     {@link SexagesimalPresentationType.GeoSecondFraction.Centisecond }
         *     
         */
        public void setCentisecond(SexagesimalPresentationType.GeoSecondFraction.Centisecond value) {
            this.centisecond = value;
        }

        public boolean isSetCentisecond() {
            return (this.centisecond!= null);
        }

        /**
         * Gets the value of the millisecond property.
         * 
         * @return
         *     possible object is
         *     {@link SexagesimalPresentationType.GeoSecondFraction.Millisecond }
         *     
         */
        public SexagesimalPresentationType.GeoSecondFraction.Millisecond getMillisecond() {
            return millisecond;
        }

        /**
         * Sets the value of the millisecond property.
         * 
         * @param value
         *     allowed object is
         *     {@link SexagesimalPresentationType.GeoSecondFraction.Millisecond }
         *     
         */
        public void setMillisecond(SexagesimalPresentationType.GeoSecondFraction.Millisecond value) {
            this.millisecond = value;
        }

        public boolean isSetMillisecond() {
            return (this.millisecond!= null);
        }

        public String toString() {
            final ToStringStrategy2 strategy = JAXBToStringStrategy.INSTANCE;
            final StringBuilder buffer = new StringBuilder();
            append(null, buffer, strategy);
            return buffer.toString();
        }

        public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy2 strategy) {
            strategy.appendStart(locator, this, buffer);
            appendFields(locator, buffer, strategy);
            strategy.appendEnd(locator, this, buffer);
            return buffer;
        }

        public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy2 strategy) {
            {
                SexagesimalPresentationType.GeoSecondFraction.Decisecond theDecisecond;
                theDecisecond = this.getDecisecond();
                strategy.appendField(locator, this, "decisecond", buffer, theDecisecond, this.isSetDecisecond());
            }
            {
                SexagesimalPresentationType.GeoSecondFraction.Centisecond theCentisecond;
                theCentisecond = this.getCentisecond();
                strategy.appendField(locator, this, "centisecond", buffer, theCentisecond, this.isSetCentisecond());
            }
            {
                SexagesimalPresentationType.GeoSecondFraction.Millisecond theMillisecond;
                theMillisecond = this.getMillisecond();
                strategy.appendField(locator, this, "millisecond", buffer, theMillisecond, this.isSetMillisecond());
            }
            return buffer;
        }

        public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy2 strategy) {
            if ((object == null)||(this.getClass()!= object.getClass())) {
                return false;
            }
            if (this == object) {
                return true;
            }
            final SexagesimalPresentationType.GeoSecondFraction that = ((SexagesimalPresentationType.GeoSecondFraction) object);
            {
                SexagesimalPresentationType.GeoSecondFraction.Decisecond lhsDecisecond;
                lhsDecisecond = this.getDecisecond();
                SexagesimalPresentationType.GeoSecondFraction.Decisecond rhsDecisecond;
                rhsDecisecond = that.getDecisecond();
                if (!strategy.equals(LocatorUtils.property(thisLocator, "decisecond", lhsDecisecond), LocatorUtils.property(thatLocator, "decisecond", rhsDecisecond), lhsDecisecond, rhsDecisecond, this.isSetDecisecond(), that.isSetDecisecond())) {
                    return false;
                }
            }
            {
                SexagesimalPresentationType.GeoSecondFraction.Centisecond lhsCentisecond;
                lhsCentisecond = this.getCentisecond();
                SexagesimalPresentationType.GeoSecondFraction.Centisecond rhsCentisecond;
                rhsCentisecond = that.getCentisecond();
                if (!strategy.equals(LocatorUtils.property(thisLocator, "centisecond", lhsCentisecond), LocatorUtils.property(thatLocator, "centisecond", rhsCentisecond), lhsCentisecond, rhsCentisecond, this.isSetCentisecond(), that.isSetCentisecond())) {
                    return false;
                }
            }
            {
                SexagesimalPresentationType.GeoSecondFraction.Millisecond lhsMillisecond;
                lhsMillisecond = this.getMillisecond();
                SexagesimalPresentationType.GeoSecondFraction.Millisecond rhsMillisecond;
                rhsMillisecond = that.getMillisecond();
                if (!strategy.equals(LocatorUtils.property(thisLocator, "millisecond", lhsMillisecond), LocatorUtils.property(thatLocator, "millisecond", rhsMillisecond), lhsMillisecond, rhsMillisecond, this.isSetMillisecond(), that.isSetMillisecond())) {
                    return false;
                }
            }
            return true;
        }

        public boolean equals(Object object) {
            final EqualsStrategy2 strategy = JAXBEqualsStrategy.INSTANCE;
            return equals(null, null, object, strategy);
        }

        public int hashCode(ObjectLocator locator, HashCodeStrategy2 strategy) {
            int currentHashCode = 1;
            {
                SexagesimalPresentationType.GeoSecondFraction.Decisecond theDecisecond;
                theDecisecond = this.getDecisecond();
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "decisecond", theDecisecond), currentHashCode, theDecisecond, this.isSetDecisecond());
            }
            {
                SexagesimalPresentationType.GeoSecondFraction.Centisecond theCentisecond;
                theCentisecond = this.getCentisecond();
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "centisecond", theCentisecond), currentHashCode, theCentisecond, this.isSetCentisecond());
            }
            {
                SexagesimalPresentationType.GeoSecondFraction.Millisecond theMillisecond;
                theMillisecond = this.getMillisecond();
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "millisecond", theMillisecond), currentHashCode, theMillisecond, this.isSetMillisecond());
            }
            return currentHashCode;
        }

        public int hashCode() {
            final HashCodeStrategy2 strategy = JAXBHashCodeStrategy.INSTANCE;
            return this.hashCode(null, strategy);
        }

        public Object clone() {
            return copyTo(createNewInstance());
        }

        public Object copyTo(Object target) {
            final CopyStrategy2 strategy = JAXBCopyStrategy.INSTANCE;
            return copyTo(null, target, strategy);
        }

        public Object copyTo(ObjectLocator locator, Object target, CopyStrategy2 strategy) {
            final Object draftCopy = ((target == null)?createNewInstance():target);
            if (draftCopy instanceof SexagesimalPresentationType.GeoSecondFraction) {
                final SexagesimalPresentationType.GeoSecondFraction copy = ((SexagesimalPresentationType.GeoSecondFraction) draftCopy);
                {
                    Boolean decisecondShouldBeCopiedAndSet = strategy.shouldBeCopiedAndSet(locator, this.isSetDecisecond());
                    if (decisecondShouldBeCopiedAndSet == Boolean.TRUE) {
                        SexagesimalPresentationType.GeoSecondFraction.Decisecond sourceDecisecond;
                        sourceDecisecond = this.getDecisecond();
                        SexagesimalPresentationType.GeoSecondFraction.Decisecond copyDecisecond = ((SexagesimalPresentationType.GeoSecondFraction.Decisecond) strategy.copy(LocatorUtils.property(locator, "decisecond", sourceDecisecond), sourceDecisecond, this.isSetDecisecond()));
                        copy.setDecisecond(copyDecisecond);
                    } else {
                        if (decisecondShouldBeCopiedAndSet == Boolean.FALSE) {
                            copy.decisecond = null;
                        }
                    }
                }
                {
                    Boolean centisecondShouldBeCopiedAndSet = strategy.shouldBeCopiedAndSet(locator, this.isSetCentisecond());
                    if (centisecondShouldBeCopiedAndSet == Boolean.TRUE) {
                        SexagesimalPresentationType.GeoSecondFraction.Centisecond sourceCentisecond;
                        sourceCentisecond = this.getCentisecond();
                        SexagesimalPresentationType.GeoSecondFraction.Centisecond copyCentisecond = ((SexagesimalPresentationType.GeoSecondFraction.Centisecond) strategy.copy(LocatorUtils.property(locator, "centisecond", sourceCentisecond), sourceCentisecond, this.isSetCentisecond()));
                        copy.setCentisecond(copyCentisecond);
                    } else {
                        if (centisecondShouldBeCopiedAndSet == Boolean.FALSE) {
                            copy.centisecond = null;
                        }
                    }
                }
                {
                    Boolean millisecondShouldBeCopiedAndSet = strategy.shouldBeCopiedAndSet(locator, this.isSetMillisecond());
                    if (millisecondShouldBeCopiedAndSet == Boolean.TRUE) {
                        SexagesimalPresentationType.GeoSecondFraction.Millisecond sourceMillisecond;
                        sourceMillisecond = this.getMillisecond();
                        SexagesimalPresentationType.GeoSecondFraction.Millisecond copyMillisecond = ((SexagesimalPresentationType.GeoSecondFraction.Millisecond) strategy.copy(LocatorUtils.property(locator, "millisecond", sourceMillisecond), sourceMillisecond, this.isSetMillisecond()));
                        copy.setMillisecond(copyMillisecond);
                    } else {
                        if (millisecondShouldBeCopiedAndSet == Boolean.FALSE) {
                            copy.millisecond = null;
                        }
                    }
                }
            }
            return draftCopy;
        }

        public Object createNewInstance() {
            return new SexagesimalPresentationType.GeoSecondFraction();
        }

        public void mergeFrom(Object left, Object right) {
            final MergeStrategy2 strategy = JAXBMergeStrategy.INSTANCE;
            mergeFrom(null, null, left, right, strategy);
        }

        public void mergeFrom(ObjectLocator leftLocator, ObjectLocator rightLocator, Object left, Object right, MergeStrategy2 strategy) {
            if (right instanceof SexagesimalPresentationType.GeoSecondFraction) {
                final SexagesimalPresentationType.GeoSecondFraction target = this;
                final SexagesimalPresentationType.GeoSecondFraction leftObject = ((SexagesimalPresentationType.GeoSecondFraction) left);
                final SexagesimalPresentationType.GeoSecondFraction rightObject = ((SexagesimalPresentationType.GeoSecondFraction) right);
                {
                    Boolean decisecondShouldBeMergedAndSet = strategy.shouldBeMergedAndSet(leftLocator, rightLocator, leftObject.isSetDecisecond(), rightObject.isSetDecisecond());
                    if (decisecondShouldBeMergedAndSet == Boolean.TRUE) {
                        SexagesimalPresentationType.GeoSecondFraction.Decisecond lhsDecisecond;
                        lhsDecisecond = leftObject.getDecisecond();
                        SexagesimalPresentationType.GeoSecondFraction.Decisecond rhsDecisecond;
                        rhsDecisecond = rightObject.getDecisecond();
                        SexagesimalPresentationType.GeoSecondFraction.Decisecond mergedDecisecond = ((SexagesimalPresentationType.GeoSecondFraction.Decisecond) strategy.merge(LocatorUtils.property(leftLocator, "decisecond", lhsDecisecond), LocatorUtils.property(rightLocator, "decisecond", rhsDecisecond), lhsDecisecond, rhsDecisecond, leftObject.isSetDecisecond(), rightObject.isSetDecisecond()));
                        target.setDecisecond(mergedDecisecond);
                    } else {
                        if (decisecondShouldBeMergedAndSet == Boolean.FALSE) {
                            target.decisecond = null;
                        }
                    }
                }
                {
                    Boolean centisecondShouldBeMergedAndSet = strategy.shouldBeMergedAndSet(leftLocator, rightLocator, leftObject.isSetCentisecond(), rightObject.isSetCentisecond());
                    if (centisecondShouldBeMergedAndSet == Boolean.TRUE) {
                        SexagesimalPresentationType.GeoSecondFraction.Centisecond lhsCentisecond;
                        lhsCentisecond = leftObject.getCentisecond();
                        SexagesimalPresentationType.GeoSecondFraction.Centisecond rhsCentisecond;
                        rhsCentisecond = rightObject.getCentisecond();
                        SexagesimalPresentationType.GeoSecondFraction.Centisecond mergedCentisecond = ((SexagesimalPresentationType.GeoSecondFraction.Centisecond) strategy.merge(LocatorUtils.property(leftLocator, "centisecond", lhsCentisecond), LocatorUtils.property(rightLocator, "centisecond", rhsCentisecond), lhsCentisecond, rhsCentisecond, leftObject.isSetCentisecond(), rightObject.isSetCentisecond()));
                        target.setCentisecond(mergedCentisecond);
                    } else {
                        if (centisecondShouldBeMergedAndSet == Boolean.FALSE) {
                            target.centisecond = null;
                        }
                    }
                }
                {
                    Boolean millisecondShouldBeMergedAndSet = strategy.shouldBeMergedAndSet(leftLocator, rightLocator, leftObject.isSetMillisecond(), rightObject.isSetMillisecond());
                    if (millisecondShouldBeMergedAndSet == Boolean.TRUE) {
                        SexagesimalPresentationType.GeoSecondFraction.Millisecond lhsMillisecond;
                        lhsMillisecond = leftObject.getMillisecond();
                        SexagesimalPresentationType.GeoSecondFraction.Millisecond rhsMillisecond;
                        rhsMillisecond = rightObject.getMillisecond();
                        SexagesimalPresentationType.GeoSecondFraction.Millisecond mergedMillisecond = ((SexagesimalPresentationType.GeoSecondFraction.Millisecond) strategy.merge(LocatorUtils.property(leftLocator, "millisecond", lhsMillisecond), LocatorUtils.property(rightLocator, "millisecond", rhsMillisecond), lhsMillisecond, rhsMillisecond, leftObject.isSetMillisecond(), rightObject.isSetMillisecond()));
                        target.setMillisecond(mergedMillisecond);
                    } else {
                        if (millisecondShouldBeMergedAndSet == Boolean.FALSE) {
                            target.millisecond = null;
                        }
                    }
                }
            }
        }


        /**
         * <p>Java class for anonymous complex type.
         * 
         * <p>The following schema fragment specifies the expected content contained within this class.
         * 
         * <pre>
         * &lt;complexType&gt;
         *   &lt;complexContent&gt;
         *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
         *       &lt;sequence&gt;
         *         &lt;element name="latitude" type="{http://metadata.ces.mil/mdr/ns/GSIP/tspi/2.0/core}HectoType"/&gt;
         *         &lt;element name="longitude" type="{http://metadata.ces.mil/mdr/ns/GSIP/tspi/2.0/core}HectoType"/&gt;
         *       &lt;/sequence&gt;
         *     &lt;/restriction&gt;
         *   &lt;/complexContent&gt;
         * &lt;/complexType&gt;
         * </pre>
         * 
         * 
         */
        @XmlAccessorType(XmlAccessType.FIELD)
        @XmlType(name = "", propOrder = {
            "latitude",
            "longitude"
        })
        public static class Centisecond implements Serializable, Cloneable, CopyTo2, Equals2, HashCode2, MergeFrom2, ToString2
        {

            private final static long serialVersionUID = 1L;
            @XmlSchemaType(name = "integer")
            @NotNull(message = "Centisecond.latitude {javax.validation.constraints.NotNull.message}")
            @DecimalMax("99")
            @DecimalMin("00")
            protected int latitude;
            @XmlSchemaType(name = "integer")
            @NotNull(message = "Centisecond.longitude {javax.validation.constraints.NotNull.message}")
            @DecimalMax("99")
            @DecimalMin("00")
            protected int longitude;

            /**
             * Gets the value of the latitude property.
             * 
             */
            public int getLatitude() {
                return latitude;
            }

            /**
             * Sets the value of the latitude property.
             * 
             */
            public void setLatitude(int value) {
                this.latitude = value;
            }

            public boolean isSetLatitude() {
                return true;
            }

            /**
             * Gets the value of the longitude property.
             * 
             */
            public int getLongitude() {
                return longitude;
            }

            /**
             * Sets the value of the longitude property.
             * 
             */
            public void setLongitude(int value) {
                this.longitude = value;
            }

            public boolean isSetLongitude() {
                return true;
            }

            public String toString() {
                final ToStringStrategy2 strategy = JAXBToStringStrategy.INSTANCE;
                final StringBuilder buffer = new StringBuilder();
                append(null, buffer, strategy);
                return buffer.toString();
            }

            public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy2 strategy) {
                strategy.appendStart(locator, this, buffer);
                appendFields(locator, buffer, strategy);
                strategy.appendEnd(locator, this, buffer);
                return buffer;
            }

            public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy2 strategy) {
                {
                    int theLatitude;
                    theLatitude = this.getLatitude();
                    strategy.appendField(locator, this, "latitude", buffer, theLatitude, true);
                }
                {
                    int theLongitude;
                    theLongitude = this.getLongitude();
                    strategy.appendField(locator, this, "longitude", buffer, theLongitude, true);
                }
                return buffer;
            }

            public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy2 strategy) {
                if ((object == null)||(this.getClass()!= object.getClass())) {
                    return false;
                }
                if (this == object) {
                    return true;
                }
                final SexagesimalPresentationType.GeoSecondFraction.Centisecond that = ((SexagesimalPresentationType.GeoSecondFraction.Centisecond) object);
                {
                    int lhsLatitude;
                    lhsLatitude = this.getLatitude();
                    int rhsLatitude;
                    rhsLatitude = that.getLatitude();
                    if (!strategy.equals(LocatorUtils.property(thisLocator, "latitude", lhsLatitude), LocatorUtils.property(thatLocator, "latitude", rhsLatitude), lhsLatitude, rhsLatitude, true, true)) {
                        return false;
                    }
                }
                {
                    int lhsLongitude;
                    lhsLongitude = this.getLongitude();
                    int rhsLongitude;
                    rhsLongitude = that.getLongitude();
                    if (!strategy.equals(LocatorUtils.property(thisLocator, "longitude", lhsLongitude), LocatorUtils.property(thatLocator, "longitude", rhsLongitude), lhsLongitude, rhsLongitude, true, true)) {
                        return false;
                    }
                }
                return true;
            }

            public boolean equals(Object object) {
                final EqualsStrategy2 strategy = JAXBEqualsStrategy.INSTANCE;
                return equals(null, null, object, strategy);
            }

            public int hashCode(ObjectLocator locator, HashCodeStrategy2 strategy) {
                int currentHashCode = 1;
                {
                    int theLatitude;
                    theLatitude = this.getLatitude();
                    currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "latitude", theLatitude), currentHashCode, theLatitude, true);
                }
                {
                    int theLongitude;
                    theLongitude = this.getLongitude();
                    currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "longitude", theLongitude), currentHashCode, theLongitude, true);
                }
                return currentHashCode;
            }

            public int hashCode() {
                final HashCodeStrategy2 strategy = JAXBHashCodeStrategy.INSTANCE;
                return this.hashCode(null, strategy);
            }

            public Object clone() {
                return copyTo(createNewInstance());
            }

            public Object copyTo(Object target) {
                final CopyStrategy2 strategy = JAXBCopyStrategy.INSTANCE;
                return copyTo(null, target, strategy);
            }

            public Object copyTo(ObjectLocator locator, Object target, CopyStrategy2 strategy) {
                final Object draftCopy = ((target == null)?createNewInstance():target);
                if (draftCopy instanceof SexagesimalPresentationType.GeoSecondFraction.Centisecond) {
                    final SexagesimalPresentationType.GeoSecondFraction.Centisecond copy = ((SexagesimalPresentationType.GeoSecondFraction.Centisecond) draftCopy);
                    {
                        Boolean latitudeShouldBeCopiedAndSet = strategy.shouldBeCopiedAndSet(locator, true);
                        if (latitudeShouldBeCopiedAndSet == Boolean.TRUE) {
                            int sourceLatitude;
                            sourceLatitude = this.getLatitude();
                            int copyLatitude = strategy.copy(LocatorUtils.property(locator, "latitude", sourceLatitude), sourceLatitude, true);
                            copy.setLatitude(copyLatitude);
                        } else {
                            if (latitudeShouldBeCopiedAndSet == Boolean.FALSE) {
                            }
                        }
                    }
                    {
                        Boolean longitudeShouldBeCopiedAndSet = strategy.shouldBeCopiedAndSet(locator, true);
                        if (longitudeShouldBeCopiedAndSet == Boolean.TRUE) {
                            int sourceLongitude;
                            sourceLongitude = this.getLongitude();
                            int copyLongitude = strategy.copy(LocatorUtils.property(locator, "longitude", sourceLongitude), sourceLongitude, true);
                            copy.setLongitude(copyLongitude);
                        } else {
                            if (longitudeShouldBeCopiedAndSet == Boolean.FALSE) {
                            }
                        }
                    }
                }
                return draftCopy;
            }

            public Object createNewInstance() {
                return new SexagesimalPresentationType.GeoSecondFraction.Centisecond();
            }

            public void mergeFrom(Object left, Object right) {
                final MergeStrategy2 strategy = JAXBMergeStrategy.INSTANCE;
                mergeFrom(null, null, left, right, strategy);
            }

            public void mergeFrom(ObjectLocator leftLocator, ObjectLocator rightLocator, Object left, Object right, MergeStrategy2 strategy) {
                if (right instanceof SexagesimalPresentationType.GeoSecondFraction.Centisecond) {
                    final SexagesimalPresentationType.GeoSecondFraction.Centisecond target = this;
                    final SexagesimalPresentationType.GeoSecondFraction.Centisecond leftObject = ((SexagesimalPresentationType.GeoSecondFraction.Centisecond) left);
                    final SexagesimalPresentationType.GeoSecondFraction.Centisecond rightObject = ((SexagesimalPresentationType.GeoSecondFraction.Centisecond) right);
                    {
                        Boolean latitudeShouldBeMergedAndSet = strategy.shouldBeMergedAndSet(leftLocator, rightLocator, true, true);
                        if (latitudeShouldBeMergedAndSet == Boolean.TRUE) {
                            int lhsLatitude;
                            lhsLatitude = leftObject.getLatitude();
                            int rhsLatitude;
                            rhsLatitude = rightObject.getLatitude();
                            int mergedLatitude = ((int) strategy.merge(LocatorUtils.property(leftLocator, "latitude", lhsLatitude), LocatorUtils.property(rightLocator, "latitude", rhsLatitude), lhsLatitude, rhsLatitude, true, true));
                            target.setLatitude(mergedLatitude);
                        } else {
                            if (latitudeShouldBeMergedAndSet == Boolean.FALSE) {
                            }
                        }
                    }
                    {
                        Boolean longitudeShouldBeMergedAndSet = strategy.shouldBeMergedAndSet(leftLocator, rightLocator, true, true);
                        if (longitudeShouldBeMergedAndSet == Boolean.TRUE) {
                            int lhsLongitude;
                            lhsLongitude = leftObject.getLongitude();
                            int rhsLongitude;
                            rhsLongitude = rightObject.getLongitude();
                            int mergedLongitude = ((int) strategy.merge(LocatorUtils.property(leftLocator, "longitude", lhsLongitude), LocatorUtils.property(rightLocator, "longitude", rhsLongitude), lhsLongitude, rhsLongitude, true, true));
                            target.setLongitude(mergedLongitude);
                        } else {
                            if (longitudeShouldBeMergedAndSet == Boolean.FALSE) {
                            }
                        }
                    }
                }
            }

        }


        /**
         * <p>Java class for anonymous complex type.
         * 
         * <p>The following schema fragment specifies the expected content contained within this class.
         * 
         * <pre>
         * &lt;complexType&gt;
         *   &lt;complexContent&gt;
         *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
         *       &lt;sequence&gt;
         *         &lt;element name="latitude" type="{http://metadata.ces.mil/mdr/ns/GSIP/tspi/2.0/core}DecaType"/&gt;
         *         &lt;element name="longitude" type="{http://metadata.ces.mil/mdr/ns/GSIP/tspi/2.0/core}DecaType"/&gt;
         *       &lt;/sequence&gt;
         *     &lt;/restriction&gt;
         *   &lt;/complexContent&gt;
         * &lt;/complexType&gt;
         * </pre>
         * 
         * 
         */
        @XmlAccessorType(XmlAccessType.FIELD)
        @XmlType(name = "", propOrder = {
            "latitude",
            "longitude"
        })
        public static class Decisecond implements Serializable, Cloneable, CopyTo2, Equals2, HashCode2, MergeFrom2, ToString2
        {

            private final static long serialVersionUID = 1L;
            @XmlSchemaType(name = "integer")
            @NotNull(message = "Decisecond.latitude {javax.validation.constraints.NotNull.message}")
            @DecimalMax("9")
            @DecimalMin("0")
            protected int latitude;
            @XmlSchemaType(name = "integer")
            @NotNull(message = "Decisecond.longitude {javax.validation.constraints.NotNull.message}")
            @DecimalMax("9")
            @DecimalMin("0")
            protected int longitude;

            /**
             * Gets the value of the latitude property.
             * 
             */
            public int getLatitude() {
                return latitude;
            }

            /**
             * Sets the value of the latitude property.
             * 
             */
            public void setLatitude(int value) {
                this.latitude = value;
            }

            public boolean isSetLatitude() {
                return true;
            }

            /**
             * Gets the value of the longitude property.
             * 
             */
            public int getLongitude() {
                return longitude;
            }

            /**
             * Sets the value of the longitude property.
             * 
             */
            public void setLongitude(int value) {
                this.longitude = value;
            }

            public boolean isSetLongitude() {
                return true;
            }

            public String toString() {
                final ToStringStrategy2 strategy = JAXBToStringStrategy.INSTANCE;
                final StringBuilder buffer = new StringBuilder();
                append(null, buffer, strategy);
                return buffer.toString();
            }

            public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy2 strategy) {
                strategy.appendStart(locator, this, buffer);
                appendFields(locator, buffer, strategy);
                strategy.appendEnd(locator, this, buffer);
                return buffer;
            }

            public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy2 strategy) {
                {
                    int theLatitude;
                    theLatitude = this.getLatitude();
                    strategy.appendField(locator, this, "latitude", buffer, theLatitude, true);
                }
                {
                    int theLongitude;
                    theLongitude = this.getLongitude();
                    strategy.appendField(locator, this, "longitude", buffer, theLongitude, true);
                }
                return buffer;
            }

            public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy2 strategy) {
                if ((object == null)||(this.getClass()!= object.getClass())) {
                    return false;
                }
                if (this == object) {
                    return true;
                }
                final SexagesimalPresentationType.GeoSecondFraction.Decisecond that = ((SexagesimalPresentationType.GeoSecondFraction.Decisecond) object);
                {
                    int lhsLatitude;
                    lhsLatitude = this.getLatitude();
                    int rhsLatitude;
                    rhsLatitude = that.getLatitude();
                    if (!strategy.equals(LocatorUtils.property(thisLocator, "latitude", lhsLatitude), LocatorUtils.property(thatLocator, "latitude", rhsLatitude), lhsLatitude, rhsLatitude, true, true)) {
                        return false;
                    }
                }
                {
                    int lhsLongitude;
                    lhsLongitude = this.getLongitude();
                    int rhsLongitude;
                    rhsLongitude = that.getLongitude();
                    if (!strategy.equals(LocatorUtils.property(thisLocator, "longitude", lhsLongitude), LocatorUtils.property(thatLocator, "longitude", rhsLongitude), lhsLongitude, rhsLongitude, true, true)) {
                        return false;
                    }
                }
                return true;
            }

            public boolean equals(Object object) {
                final EqualsStrategy2 strategy = JAXBEqualsStrategy.INSTANCE;
                return equals(null, null, object, strategy);
            }

            public int hashCode(ObjectLocator locator, HashCodeStrategy2 strategy) {
                int currentHashCode = 1;
                {
                    int theLatitude;
                    theLatitude = this.getLatitude();
                    currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "latitude", theLatitude), currentHashCode, theLatitude, true);
                }
                {
                    int theLongitude;
                    theLongitude = this.getLongitude();
                    currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "longitude", theLongitude), currentHashCode, theLongitude, true);
                }
                return currentHashCode;
            }

            public int hashCode() {
                final HashCodeStrategy2 strategy = JAXBHashCodeStrategy.INSTANCE;
                return this.hashCode(null, strategy);
            }

            public Object clone() {
                return copyTo(createNewInstance());
            }

            public Object copyTo(Object target) {
                final CopyStrategy2 strategy = JAXBCopyStrategy.INSTANCE;
                return copyTo(null, target, strategy);
            }

            public Object copyTo(ObjectLocator locator, Object target, CopyStrategy2 strategy) {
                final Object draftCopy = ((target == null)?createNewInstance():target);
                if (draftCopy instanceof SexagesimalPresentationType.GeoSecondFraction.Decisecond) {
                    final SexagesimalPresentationType.GeoSecondFraction.Decisecond copy = ((SexagesimalPresentationType.GeoSecondFraction.Decisecond) draftCopy);
                    {
                        Boolean latitudeShouldBeCopiedAndSet = strategy.shouldBeCopiedAndSet(locator, true);
                        if (latitudeShouldBeCopiedAndSet == Boolean.TRUE) {
                            int sourceLatitude;
                            sourceLatitude = this.getLatitude();
                            int copyLatitude = strategy.copy(LocatorUtils.property(locator, "latitude", sourceLatitude), sourceLatitude, true);
                            copy.setLatitude(copyLatitude);
                        } else {
                            if (latitudeShouldBeCopiedAndSet == Boolean.FALSE) {
                            }
                        }
                    }
                    {
                        Boolean longitudeShouldBeCopiedAndSet = strategy.shouldBeCopiedAndSet(locator, true);
                        if (longitudeShouldBeCopiedAndSet == Boolean.TRUE) {
                            int sourceLongitude;
                            sourceLongitude = this.getLongitude();
                            int copyLongitude = strategy.copy(LocatorUtils.property(locator, "longitude", sourceLongitude), sourceLongitude, true);
                            copy.setLongitude(copyLongitude);
                        } else {
                            if (longitudeShouldBeCopiedAndSet == Boolean.FALSE) {
                            }
                        }
                    }
                }
                return draftCopy;
            }

            public Object createNewInstance() {
                return new SexagesimalPresentationType.GeoSecondFraction.Decisecond();
            }

            public void mergeFrom(Object left, Object right) {
                final MergeStrategy2 strategy = JAXBMergeStrategy.INSTANCE;
                mergeFrom(null, null, left, right, strategy);
            }

            public void mergeFrom(ObjectLocator leftLocator, ObjectLocator rightLocator, Object left, Object right, MergeStrategy2 strategy) {
                if (right instanceof SexagesimalPresentationType.GeoSecondFraction.Decisecond) {
                    final SexagesimalPresentationType.GeoSecondFraction.Decisecond target = this;
                    final SexagesimalPresentationType.GeoSecondFraction.Decisecond leftObject = ((SexagesimalPresentationType.GeoSecondFraction.Decisecond) left);
                    final SexagesimalPresentationType.GeoSecondFraction.Decisecond rightObject = ((SexagesimalPresentationType.GeoSecondFraction.Decisecond) right);
                    {
                        Boolean latitudeShouldBeMergedAndSet = strategy.shouldBeMergedAndSet(leftLocator, rightLocator, true, true);
                        if (latitudeShouldBeMergedAndSet == Boolean.TRUE) {
                            int lhsLatitude;
                            lhsLatitude = leftObject.getLatitude();
                            int rhsLatitude;
                            rhsLatitude = rightObject.getLatitude();
                            int mergedLatitude = ((int) strategy.merge(LocatorUtils.property(leftLocator, "latitude", lhsLatitude), LocatorUtils.property(rightLocator, "latitude", rhsLatitude), lhsLatitude, rhsLatitude, true, true));
                            target.setLatitude(mergedLatitude);
                        } else {
                            if (latitudeShouldBeMergedAndSet == Boolean.FALSE) {
                            }
                        }
                    }
                    {
                        Boolean longitudeShouldBeMergedAndSet = strategy.shouldBeMergedAndSet(leftLocator, rightLocator, true, true);
                        if (longitudeShouldBeMergedAndSet == Boolean.TRUE) {
                            int lhsLongitude;
                            lhsLongitude = leftObject.getLongitude();
                            int rhsLongitude;
                            rhsLongitude = rightObject.getLongitude();
                            int mergedLongitude = ((int) strategy.merge(LocatorUtils.property(leftLocator, "longitude", lhsLongitude), LocatorUtils.property(rightLocator, "longitude", rhsLongitude), lhsLongitude, rhsLongitude, true, true));
                            target.setLongitude(mergedLongitude);
                        } else {
                            if (longitudeShouldBeMergedAndSet == Boolean.FALSE) {
                            }
                        }
                    }
                }
            }

        }


        /**
         * <p>Java class for anonymous complex type.
         * 
         * <p>The following schema fragment specifies the expected content contained within this class.
         * 
         * <pre>
         * &lt;complexType&gt;
         *   &lt;complexContent&gt;
         *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
         *       &lt;sequence&gt;
         *         &lt;element name="latitude" type="{http://metadata.ces.mil/mdr/ns/GSIP/tspi/2.0/core}KiloType"/&gt;
         *         &lt;element name="longitude" type="{http://metadata.ces.mil/mdr/ns/GSIP/tspi/2.0/core}KiloType"/&gt;
         *       &lt;/sequence&gt;
         *     &lt;/restriction&gt;
         *   &lt;/complexContent&gt;
         * &lt;/complexType&gt;
         * </pre>
         * 
         * 
         */
        @XmlAccessorType(XmlAccessType.FIELD)
        @XmlType(name = "", propOrder = {
            "latitude",
            "longitude"
        })
        public static class Millisecond implements Serializable, Cloneable, CopyTo2, Equals2, HashCode2, MergeFrom2, ToString2
        {

            private final static long serialVersionUID = 1L;
            @XmlSchemaType(name = "integer")
            @NotNull(message = "Millisecond.latitude {javax.validation.constraints.NotNull.message}")
            @DecimalMax("999")
            @DecimalMin("000")
            protected int latitude;
            @XmlSchemaType(name = "integer")
            @NotNull(message = "Millisecond.longitude {javax.validation.constraints.NotNull.message}")
            @DecimalMax("999")
            @DecimalMin("000")
            protected int longitude;

            /**
             * Gets the value of the latitude property.
             * 
             */
            public int getLatitude() {
                return latitude;
            }

            /**
             * Sets the value of the latitude property.
             * 
             */
            public void setLatitude(int value) {
                this.latitude = value;
            }

            public boolean isSetLatitude() {
                return true;
            }

            /**
             * Gets the value of the longitude property.
             * 
             */
            public int getLongitude() {
                return longitude;
            }

            /**
             * Sets the value of the longitude property.
             * 
             */
            public void setLongitude(int value) {
                this.longitude = value;
            }

            public boolean isSetLongitude() {
                return true;
            }

            public String toString() {
                final ToStringStrategy2 strategy = JAXBToStringStrategy.INSTANCE;
                final StringBuilder buffer = new StringBuilder();
                append(null, buffer, strategy);
                return buffer.toString();
            }

            public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy2 strategy) {
                strategy.appendStart(locator, this, buffer);
                appendFields(locator, buffer, strategy);
                strategy.appendEnd(locator, this, buffer);
                return buffer;
            }

            public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy2 strategy) {
                {
                    int theLatitude;
                    theLatitude = this.getLatitude();
                    strategy.appendField(locator, this, "latitude", buffer, theLatitude, true);
                }
                {
                    int theLongitude;
                    theLongitude = this.getLongitude();
                    strategy.appendField(locator, this, "longitude", buffer, theLongitude, true);
                }
                return buffer;
            }

            public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy2 strategy) {
                if ((object == null)||(this.getClass()!= object.getClass())) {
                    return false;
                }
                if (this == object) {
                    return true;
                }
                final SexagesimalPresentationType.GeoSecondFraction.Millisecond that = ((SexagesimalPresentationType.GeoSecondFraction.Millisecond) object);
                {
                    int lhsLatitude;
                    lhsLatitude = this.getLatitude();
                    int rhsLatitude;
                    rhsLatitude = that.getLatitude();
                    if (!strategy.equals(LocatorUtils.property(thisLocator, "latitude", lhsLatitude), LocatorUtils.property(thatLocator, "latitude", rhsLatitude), lhsLatitude, rhsLatitude, true, true)) {
                        return false;
                    }
                }
                {
                    int lhsLongitude;
                    lhsLongitude = this.getLongitude();
                    int rhsLongitude;
                    rhsLongitude = that.getLongitude();
                    if (!strategy.equals(LocatorUtils.property(thisLocator, "longitude", lhsLongitude), LocatorUtils.property(thatLocator, "longitude", rhsLongitude), lhsLongitude, rhsLongitude, true, true)) {
                        return false;
                    }
                }
                return true;
            }

            public boolean equals(Object object) {
                final EqualsStrategy2 strategy = JAXBEqualsStrategy.INSTANCE;
                return equals(null, null, object, strategy);
            }

            public int hashCode(ObjectLocator locator, HashCodeStrategy2 strategy) {
                int currentHashCode = 1;
                {
                    int theLatitude;
                    theLatitude = this.getLatitude();
                    currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "latitude", theLatitude), currentHashCode, theLatitude, true);
                }
                {
                    int theLongitude;
                    theLongitude = this.getLongitude();
                    currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "longitude", theLongitude), currentHashCode, theLongitude, true);
                }
                return currentHashCode;
            }

            public int hashCode() {
                final HashCodeStrategy2 strategy = JAXBHashCodeStrategy.INSTANCE;
                return this.hashCode(null, strategy);
            }

            public Object clone() {
                return copyTo(createNewInstance());
            }

            public Object copyTo(Object target) {
                final CopyStrategy2 strategy = JAXBCopyStrategy.INSTANCE;
                return copyTo(null, target, strategy);
            }

            public Object copyTo(ObjectLocator locator, Object target, CopyStrategy2 strategy) {
                final Object draftCopy = ((target == null)?createNewInstance():target);
                if (draftCopy instanceof SexagesimalPresentationType.GeoSecondFraction.Millisecond) {
                    final SexagesimalPresentationType.GeoSecondFraction.Millisecond copy = ((SexagesimalPresentationType.GeoSecondFraction.Millisecond) draftCopy);
                    {
                        Boolean latitudeShouldBeCopiedAndSet = strategy.shouldBeCopiedAndSet(locator, true);
                        if (latitudeShouldBeCopiedAndSet == Boolean.TRUE) {
                            int sourceLatitude;
                            sourceLatitude = this.getLatitude();
                            int copyLatitude = strategy.copy(LocatorUtils.property(locator, "latitude", sourceLatitude), sourceLatitude, true);
                            copy.setLatitude(copyLatitude);
                        } else {
                            if (latitudeShouldBeCopiedAndSet == Boolean.FALSE) {
                            }
                        }
                    }
                    {
                        Boolean longitudeShouldBeCopiedAndSet = strategy.shouldBeCopiedAndSet(locator, true);
                        if (longitudeShouldBeCopiedAndSet == Boolean.TRUE) {
                            int sourceLongitude;
                            sourceLongitude = this.getLongitude();
                            int copyLongitude = strategy.copy(LocatorUtils.property(locator, "longitude", sourceLongitude), sourceLongitude, true);
                            copy.setLongitude(copyLongitude);
                        } else {
                            if (longitudeShouldBeCopiedAndSet == Boolean.FALSE) {
                            }
                        }
                    }
                }
                return draftCopy;
            }

            public Object createNewInstance() {
                return new SexagesimalPresentationType.GeoSecondFraction.Millisecond();
            }

            public void mergeFrom(Object left, Object right) {
                final MergeStrategy2 strategy = JAXBMergeStrategy.INSTANCE;
                mergeFrom(null, null, left, right, strategy);
            }

            public void mergeFrom(ObjectLocator leftLocator, ObjectLocator rightLocator, Object left, Object right, MergeStrategy2 strategy) {
                if (right instanceof SexagesimalPresentationType.GeoSecondFraction.Millisecond) {
                    final SexagesimalPresentationType.GeoSecondFraction.Millisecond target = this;
                    final SexagesimalPresentationType.GeoSecondFraction.Millisecond leftObject = ((SexagesimalPresentationType.GeoSecondFraction.Millisecond) left);
                    final SexagesimalPresentationType.GeoSecondFraction.Millisecond rightObject = ((SexagesimalPresentationType.GeoSecondFraction.Millisecond) right);
                    {
                        Boolean latitudeShouldBeMergedAndSet = strategy.shouldBeMergedAndSet(leftLocator, rightLocator, true, true);
                        if (latitudeShouldBeMergedAndSet == Boolean.TRUE) {
                            int lhsLatitude;
                            lhsLatitude = leftObject.getLatitude();
                            int rhsLatitude;
                            rhsLatitude = rightObject.getLatitude();
                            int mergedLatitude = ((int) strategy.merge(LocatorUtils.property(leftLocator, "latitude", lhsLatitude), LocatorUtils.property(rightLocator, "latitude", rhsLatitude), lhsLatitude, rhsLatitude, true, true));
                            target.setLatitude(mergedLatitude);
                        } else {
                            if (latitudeShouldBeMergedAndSet == Boolean.FALSE) {
                            }
                        }
                    }
                    {
                        Boolean longitudeShouldBeMergedAndSet = strategy.shouldBeMergedAndSet(leftLocator, rightLocator, true, true);
                        if (longitudeShouldBeMergedAndSet == Boolean.TRUE) {
                            int lhsLongitude;
                            lhsLongitude = leftObject.getLongitude();
                            int rhsLongitude;
                            rhsLongitude = rightObject.getLongitude();
                            int mergedLongitude = ((int) strategy.merge(LocatorUtils.property(leftLocator, "longitude", lhsLongitude), LocatorUtils.property(rightLocator, "longitude", rhsLongitude), lhsLongitude, rhsLongitude, true, true));
                            target.setLongitude(mergedLongitude);
                        } else {
                            if (longitudeShouldBeMergedAndSet == Boolean.FALSE) {
                            }
                        }
                    }
                }
            }

        }

    }

}
