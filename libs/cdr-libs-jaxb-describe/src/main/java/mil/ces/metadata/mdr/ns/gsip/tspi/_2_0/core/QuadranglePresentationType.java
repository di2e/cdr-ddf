//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.11 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2016.07.27 at 04:06:37 PM EDT 
//


package mil.ces.metadata.mdr.ns.gsip.tspi._2_0.core;

import java.io.Serializable;
import javax.validation.Valid;
import javax.validation.constraints.DecimalMax;
import javax.validation.constraints.DecimalMin;
import javax.validation.constraints.NotNull;
import javax.validation.constraints.Pattern;
import javax.validation.constraints.Size;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlSchemaType;
import javax.xml.bind.annotation.XmlType;
import org.jvnet.jaxb2_commons.lang.CopyStrategy2;
import org.jvnet.jaxb2_commons.lang.CopyTo2;
import org.jvnet.jaxb2_commons.lang.Equals2;
import org.jvnet.jaxb2_commons.lang.EqualsStrategy2;
import org.jvnet.jaxb2_commons.lang.HashCode2;
import org.jvnet.jaxb2_commons.lang.HashCodeStrategy2;
import org.jvnet.jaxb2_commons.lang.JAXBCopyStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBEqualsStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBHashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBMergeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBToStringStrategy;
import org.jvnet.jaxb2_commons.lang.MergeFrom2;
import org.jvnet.jaxb2_commons.lang.MergeStrategy2;
import org.jvnet.jaxb2_commons.lang.ToString2;
import org.jvnet.jaxb2_commons.lang.ToStringStrategy2;
import org.jvnet.jaxb2_commons.locator.ObjectLocator;
import org.jvnet.jaxb2_commons.locator.util.LocatorUtils;


/**
 * Quadrangle Presentation Type: A datatype representing a quadrangle position presentation based on the requirements of the GEOREF area-designation system. [desc] Quadrangles are used as a means of identifying 1 arc degree x 1 arc degree spatial regions which are then subdivided in accordance with sexagesimal notation based on 60 arc minutes comprising an arc degree. The presentation consists of a single component string integrating all coordinate tuple values.
 * 
 * <p>Java class for QuadranglePresentationType complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="QuadranglePresentationType"&gt;
 *   &lt;complexContent&gt;
 *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
 *       &lt;sequence&gt;
 *         &lt;element name="quadrangle" type="{http://metadata.ces.mil/mdr/ns/GSIP/tspi/2.0/core}GeoQuadType"/&gt;
 *         &lt;element name="zone" type="{http://metadata.ces.mil/mdr/ns/GSIP/tspi/2.0/core}GeoZoneType"/&gt;
 *         &lt;element name="subZoneMinute" minOccurs="0"&gt;
 *           &lt;complexType&gt;
 *             &lt;complexContent&gt;
 *               &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
 *                 &lt;sequence&gt;
 *                   &lt;element name="eastingMinute" type="{http://metadata.ces.mil/mdr/ns/GSIP/tspi/2.0/core}SexagesimalType"/&gt;
 *                   &lt;element name="northingMinute" type="{http://metadata.ces.mil/mdr/ns/GSIP/tspi/2.0/core}SexagesimalType"/&gt;
 *                 &lt;/sequence&gt;
 *               &lt;/restriction&gt;
 *             &lt;/complexContent&gt;
 *           &lt;/complexType&gt;
 *         &lt;/element&gt;
 *         &lt;element name="subZoneFraction" minOccurs="0"&gt;
 *           &lt;complexType&gt;
 *             &lt;complexContent&gt;
 *               &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
 *                 &lt;choice&gt;
 *                   &lt;element name="deciminute"&gt;
 *                     &lt;complexType&gt;
 *                       &lt;complexContent&gt;
 *                         &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
 *                           &lt;sequence&gt;
 *                             &lt;element name="eastingDeciminute" type="{http://metadata.ces.mil/mdr/ns/GSIP/tspi/2.0/core}DecaType"/&gt;
 *                             &lt;element name="northingDeciminute" type="{http://metadata.ces.mil/mdr/ns/GSIP/tspi/2.0/core}DecaType"/&gt;
 *                           &lt;/sequence&gt;
 *                         &lt;/restriction&gt;
 *                       &lt;/complexContent&gt;
 *                     &lt;/complexType&gt;
 *                   &lt;/element&gt;
 *                   &lt;element name="centiminute"&gt;
 *                     &lt;complexType&gt;
 *                       &lt;complexContent&gt;
 *                         &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
 *                           &lt;sequence&gt;
 *                             &lt;element name="eastingCentiminute" type="{http://metadata.ces.mil/mdr/ns/GSIP/tspi/2.0/core}HectoType"/&gt;
 *                             &lt;element name="northingCentiminute" type="{http://metadata.ces.mil/mdr/ns/GSIP/tspi/2.0/core}HectoType"/&gt;
 *                           &lt;/sequence&gt;
 *                         &lt;/restriction&gt;
 *                       &lt;/complexContent&gt;
 *                     &lt;/complexType&gt;
 *                   &lt;/element&gt;
 *                 &lt;/choice&gt;
 *               &lt;/restriction&gt;
 *             &lt;/complexContent&gt;
 *           &lt;/complexType&gt;
 *         &lt;/element&gt;
 *       &lt;/sequence&gt;
 *     &lt;/restriction&gt;
 *   &lt;/complexContent&gt;
 * &lt;/complexType&gt;
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "QuadranglePresentationType", propOrder = {
    "quadrangle",
    "zone",
    "subZoneMinute",
    "subZoneFraction"
})
public class QuadranglePresentationType implements Serializable, Cloneable, CopyTo2, Equals2, HashCode2, MergeFrom2, ToString2
{

    private final static long serialVersionUID = 1L;
    @XmlElement(required = true)
    @NotNull(message = "QuadranglePresentationType.quadrangle {javax.validation.constraints.NotNull.message}")
    @Size(min = 2, max = 2)
    @Pattern(regexp = "[A-HJ-NP-Z]{1,1}[A-HJ-M]{1,1}")
    protected String quadrangle;
    @XmlElement(required = true)
    @NotNull(message = "QuadranglePresentationType.zone {javax.validation.constraints.NotNull.message}")
    @Size(min = 2, max = 2)
    @Pattern(regexp = "[A-HJ-NPQ]{2,2}")
    protected String zone;
    @Valid
    protected QuadranglePresentationType.SubZoneMinute subZoneMinute;
    @Valid
    protected QuadranglePresentationType.SubZoneFraction subZoneFraction;

    /**
     * Gets the value of the quadrangle property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getQuadrangle() {
        return quadrangle;
    }

    /**
     * Sets the value of the quadrangle property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setQuadrangle(String value) {
        this.quadrangle = value;
    }

    public boolean isSetQuadrangle() {
        return (this.quadrangle!= null);
    }

    /**
     * Gets the value of the zone property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getZone() {
        return zone;
    }

    /**
     * Sets the value of the zone property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setZone(String value) {
        this.zone = value;
    }

    public boolean isSetZone() {
        return (this.zone!= null);
    }

    /**
     * Gets the value of the subZoneMinute property.
     * 
     * @return
     *     possible object is
     *     {@link QuadranglePresentationType.SubZoneMinute }
     *     
     */
    public QuadranglePresentationType.SubZoneMinute getSubZoneMinute() {
        return subZoneMinute;
    }

    /**
     * Sets the value of the subZoneMinute property.
     * 
     * @param value
     *     allowed object is
     *     {@link QuadranglePresentationType.SubZoneMinute }
     *     
     */
    public void setSubZoneMinute(QuadranglePresentationType.SubZoneMinute value) {
        this.subZoneMinute = value;
    }

    public boolean isSetSubZoneMinute() {
        return (this.subZoneMinute!= null);
    }

    /**
     * Gets the value of the subZoneFraction property.
     * 
     * @return
     *     possible object is
     *     {@link QuadranglePresentationType.SubZoneFraction }
     *     
     */
    public QuadranglePresentationType.SubZoneFraction getSubZoneFraction() {
        return subZoneFraction;
    }

    /**
     * Sets the value of the subZoneFraction property.
     * 
     * @param value
     *     allowed object is
     *     {@link QuadranglePresentationType.SubZoneFraction }
     *     
     */
    public void setSubZoneFraction(QuadranglePresentationType.SubZoneFraction value) {
        this.subZoneFraction = value;
    }

    public boolean isSetSubZoneFraction() {
        return (this.subZoneFraction!= null);
    }

    public String toString() {
        final ToStringStrategy2 strategy = JAXBToStringStrategy.INSTANCE;
        final StringBuilder buffer = new StringBuilder();
        append(null, buffer, strategy);
        return buffer.toString();
    }

    public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy2 strategy) {
        strategy.appendStart(locator, this, buffer);
        appendFields(locator, buffer, strategy);
        strategy.appendEnd(locator, this, buffer);
        return buffer;
    }

    public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy2 strategy) {
        {
            String theQuadrangle;
            theQuadrangle = this.getQuadrangle();
            strategy.appendField(locator, this, "quadrangle", buffer, theQuadrangle, this.isSetQuadrangle());
        }
        {
            String theZone;
            theZone = this.getZone();
            strategy.appendField(locator, this, "zone", buffer, theZone, this.isSetZone());
        }
        {
            QuadranglePresentationType.SubZoneMinute theSubZoneMinute;
            theSubZoneMinute = this.getSubZoneMinute();
            strategy.appendField(locator, this, "subZoneMinute", buffer, theSubZoneMinute, this.isSetSubZoneMinute());
        }
        {
            QuadranglePresentationType.SubZoneFraction theSubZoneFraction;
            theSubZoneFraction = this.getSubZoneFraction();
            strategy.appendField(locator, this, "subZoneFraction", buffer, theSubZoneFraction, this.isSetSubZoneFraction());
        }
        return buffer;
    }

    public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy2 strategy) {
        if ((object == null)||(this.getClass()!= object.getClass())) {
            return false;
        }
        if (this == object) {
            return true;
        }
        final QuadranglePresentationType that = ((QuadranglePresentationType) object);
        {
            String lhsQuadrangle;
            lhsQuadrangle = this.getQuadrangle();
            String rhsQuadrangle;
            rhsQuadrangle = that.getQuadrangle();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "quadrangle", lhsQuadrangle), LocatorUtils.property(thatLocator, "quadrangle", rhsQuadrangle), lhsQuadrangle, rhsQuadrangle, this.isSetQuadrangle(), that.isSetQuadrangle())) {
                return false;
            }
        }
        {
            String lhsZone;
            lhsZone = this.getZone();
            String rhsZone;
            rhsZone = that.getZone();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "zone", lhsZone), LocatorUtils.property(thatLocator, "zone", rhsZone), lhsZone, rhsZone, this.isSetZone(), that.isSetZone())) {
                return false;
            }
        }
        {
            QuadranglePresentationType.SubZoneMinute lhsSubZoneMinute;
            lhsSubZoneMinute = this.getSubZoneMinute();
            QuadranglePresentationType.SubZoneMinute rhsSubZoneMinute;
            rhsSubZoneMinute = that.getSubZoneMinute();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "subZoneMinute", lhsSubZoneMinute), LocatorUtils.property(thatLocator, "subZoneMinute", rhsSubZoneMinute), lhsSubZoneMinute, rhsSubZoneMinute, this.isSetSubZoneMinute(), that.isSetSubZoneMinute())) {
                return false;
            }
        }
        {
            QuadranglePresentationType.SubZoneFraction lhsSubZoneFraction;
            lhsSubZoneFraction = this.getSubZoneFraction();
            QuadranglePresentationType.SubZoneFraction rhsSubZoneFraction;
            rhsSubZoneFraction = that.getSubZoneFraction();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "subZoneFraction", lhsSubZoneFraction), LocatorUtils.property(thatLocator, "subZoneFraction", rhsSubZoneFraction), lhsSubZoneFraction, rhsSubZoneFraction, this.isSetSubZoneFraction(), that.isSetSubZoneFraction())) {
                return false;
            }
        }
        return true;
    }

    public boolean equals(Object object) {
        final EqualsStrategy2 strategy = JAXBEqualsStrategy.INSTANCE;
        return equals(null, null, object, strategy);
    }

    public int hashCode(ObjectLocator locator, HashCodeStrategy2 strategy) {
        int currentHashCode = 1;
        {
            String theQuadrangle;
            theQuadrangle = this.getQuadrangle();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "quadrangle", theQuadrangle), currentHashCode, theQuadrangle, this.isSetQuadrangle());
        }
        {
            String theZone;
            theZone = this.getZone();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "zone", theZone), currentHashCode, theZone, this.isSetZone());
        }
        {
            QuadranglePresentationType.SubZoneMinute theSubZoneMinute;
            theSubZoneMinute = this.getSubZoneMinute();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "subZoneMinute", theSubZoneMinute), currentHashCode, theSubZoneMinute, this.isSetSubZoneMinute());
        }
        {
            QuadranglePresentationType.SubZoneFraction theSubZoneFraction;
            theSubZoneFraction = this.getSubZoneFraction();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "subZoneFraction", theSubZoneFraction), currentHashCode, theSubZoneFraction, this.isSetSubZoneFraction());
        }
        return currentHashCode;
    }

    public int hashCode() {
        final HashCodeStrategy2 strategy = JAXBHashCodeStrategy.INSTANCE;
        return this.hashCode(null, strategy);
    }

    public Object clone() {
        return copyTo(createNewInstance());
    }

    public Object copyTo(Object target) {
        final CopyStrategy2 strategy = JAXBCopyStrategy.INSTANCE;
        return copyTo(null, target, strategy);
    }

    public Object copyTo(ObjectLocator locator, Object target, CopyStrategy2 strategy) {
        final Object draftCopy = ((target == null)?createNewInstance():target);
        if (draftCopy instanceof QuadranglePresentationType) {
            final QuadranglePresentationType copy = ((QuadranglePresentationType) draftCopy);
            {
                Boolean quadrangleShouldBeCopiedAndSet = strategy.shouldBeCopiedAndSet(locator, this.isSetQuadrangle());
                if (quadrangleShouldBeCopiedAndSet == Boolean.TRUE) {
                    String sourceQuadrangle;
                    sourceQuadrangle = this.getQuadrangle();
                    String copyQuadrangle = ((String) strategy.copy(LocatorUtils.property(locator, "quadrangle", sourceQuadrangle), sourceQuadrangle, this.isSetQuadrangle()));
                    copy.setQuadrangle(copyQuadrangle);
                } else {
                    if (quadrangleShouldBeCopiedAndSet == Boolean.FALSE) {
                        copy.quadrangle = null;
                    }
                }
            }
            {
                Boolean zoneShouldBeCopiedAndSet = strategy.shouldBeCopiedAndSet(locator, this.isSetZone());
                if (zoneShouldBeCopiedAndSet == Boolean.TRUE) {
                    String sourceZone;
                    sourceZone = this.getZone();
                    String copyZone = ((String) strategy.copy(LocatorUtils.property(locator, "zone", sourceZone), sourceZone, this.isSetZone()));
                    copy.setZone(copyZone);
                } else {
                    if (zoneShouldBeCopiedAndSet == Boolean.FALSE) {
                        copy.zone = null;
                    }
                }
            }
            {
                Boolean subZoneMinuteShouldBeCopiedAndSet = strategy.shouldBeCopiedAndSet(locator, this.isSetSubZoneMinute());
                if (subZoneMinuteShouldBeCopiedAndSet == Boolean.TRUE) {
                    QuadranglePresentationType.SubZoneMinute sourceSubZoneMinute;
                    sourceSubZoneMinute = this.getSubZoneMinute();
                    QuadranglePresentationType.SubZoneMinute copySubZoneMinute = ((QuadranglePresentationType.SubZoneMinute) strategy.copy(LocatorUtils.property(locator, "subZoneMinute", sourceSubZoneMinute), sourceSubZoneMinute, this.isSetSubZoneMinute()));
                    copy.setSubZoneMinute(copySubZoneMinute);
                } else {
                    if (subZoneMinuteShouldBeCopiedAndSet == Boolean.FALSE) {
                        copy.subZoneMinute = null;
                    }
                }
            }
            {
                Boolean subZoneFractionShouldBeCopiedAndSet = strategy.shouldBeCopiedAndSet(locator, this.isSetSubZoneFraction());
                if (subZoneFractionShouldBeCopiedAndSet == Boolean.TRUE) {
                    QuadranglePresentationType.SubZoneFraction sourceSubZoneFraction;
                    sourceSubZoneFraction = this.getSubZoneFraction();
                    QuadranglePresentationType.SubZoneFraction copySubZoneFraction = ((QuadranglePresentationType.SubZoneFraction) strategy.copy(LocatorUtils.property(locator, "subZoneFraction", sourceSubZoneFraction), sourceSubZoneFraction, this.isSetSubZoneFraction()));
                    copy.setSubZoneFraction(copySubZoneFraction);
                } else {
                    if (subZoneFractionShouldBeCopiedAndSet == Boolean.FALSE) {
                        copy.subZoneFraction = null;
                    }
                }
            }
        }
        return draftCopy;
    }

    public Object createNewInstance() {
        return new QuadranglePresentationType();
    }

    public void mergeFrom(Object left, Object right) {
        final MergeStrategy2 strategy = JAXBMergeStrategy.INSTANCE;
        mergeFrom(null, null, left, right, strategy);
    }

    public void mergeFrom(ObjectLocator leftLocator, ObjectLocator rightLocator, Object left, Object right, MergeStrategy2 strategy) {
        if (right instanceof QuadranglePresentationType) {
            final QuadranglePresentationType target = this;
            final QuadranglePresentationType leftObject = ((QuadranglePresentationType) left);
            final QuadranglePresentationType rightObject = ((QuadranglePresentationType) right);
            {
                Boolean quadrangleShouldBeMergedAndSet = strategy.shouldBeMergedAndSet(leftLocator, rightLocator, leftObject.isSetQuadrangle(), rightObject.isSetQuadrangle());
                if (quadrangleShouldBeMergedAndSet == Boolean.TRUE) {
                    String lhsQuadrangle;
                    lhsQuadrangle = leftObject.getQuadrangle();
                    String rhsQuadrangle;
                    rhsQuadrangle = rightObject.getQuadrangle();
                    String mergedQuadrangle = ((String) strategy.merge(LocatorUtils.property(leftLocator, "quadrangle", lhsQuadrangle), LocatorUtils.property(rightLocator, "quadrangle", rhsQuadrangle), lhsQuadrangle, rhsQuadrangle, leftObject.isSetQuadrangle(), rightObject.isSetQuadrangle()));
                    target.setQuadrangle(mergedQuadrangle);
                } else {
                    if (quadrangleShouldBeMergedAndSet == Boolean.FALSE) {
                        target.quadrangle = null;
                    }
                }
            }
            {
                Boolean zoneShouldBeMergedAndSet = strategy.shouldBeMergedAndSet(leftLocator, rightLocator, leftObject.isSetZone(), rightObject.isSetZone());
                if (zoneShouldBeMergedAndSet == Boolean.TRUE) {
                    String lhsZone;
                    lhsZone = leftObject.getZone();
                    String rhsZone;
                    rhsZone = rightObject.getZone();
                    String mergedZone = ((String) strategy.merge(LocatorUtils.property(leftLocator, "zone", lhsZone), LocatorUtils.property(rightLocator, "zone", rhsZone), lhsZone, rhsZone, leftObject.isSetZone(), rightObject.isSetZone()));
                    target.setZone(mergedZone);
                } else {
                    if (zoneShouldBeMergedAndSet == Boolean.FALSE) {
                        target.zone = null;
                    }
                }
            }
            {
                Boolean subZoneMinuteShouldBeMergedAndSet = strategy.shouldBeMergedAndSet(leftLocator, rightLocator, leftObject.isSetSubZoneMinute(), rightObject.isSetSubZoneMinute());
                if (subZoneMinuteShouldBeMergedAndSet == Boolean.TRUE) {
                    QuadranglePresentationType.SubZoneMinute lhsSubZoneMinute;
                    lhsSubZoneMinute = leftObject.getSubZoneMinute();
                    QuadranglePresentationType.SubZoneMinute rhsSubZoneMinute;
                    rhsSubZoneMinute = rightObject.getSubZoneMinute();
                    QuadranglePresentationType.SubZoneMinute mergedSubZoneMinute = ((QuadranglePresentationType.SubZoneMinute) strategy.merge(LocatorUtils.property(leftLocator, "subZoneMinute", lhsSubZoneMinute), LocatorUtils.property(rightLocator, "subZoneMinute", rhsSubZoneMinute), lhsSubZoneMinute, rhsSubZoneMinute, leftObject.isSetSubZoneMinute(), rightObject.isSetSubZoneMinute()));
                    target.setSubZoneMinute(mergedSubZoneMinute);
                } else {
                    if (subZoneMinuteShouldBeMergedAndSet == Boolean.FALSE) {
                        target.subZoneMinute = null;
                    }
                }
            }
            {
                Boolean subZoneFractionShouldBeMergedAndSet = strategy.shouldBeMergedAndSet(leftLocator, rightLocator, leftObject.isSetSubZoneFraction(), rightObject.isSetSubZoneFraction());
                if (subZoneFractionShouldBeMergedAndSet == Boolean.TRUE) {
                    QuadranglePresentationType.SubZoneFraction lhsSubZoneFraction;
                    lhsSubZoneFraction = leftObject.getSubZoneFraction();
                    QuadranglePresentationType.SubZoneFraction rhsSubZoneFraction;
                    rhsSubZoneFraction = rightObject.getSubZoneFraction();
                    QuadranglePresentationType.SubZoneFraction mergedSubZoneFraction = ((QuadranglePresentationType.SubZoneFraction) strategy.merge(LocatorUtils.property(leftLocator, "subZoneFraction", lhsSubZoneFraction), LocatorUtils.property(rightLocator, "subZoneFraction", rhsSubZoneFraction), lhsSubZoneFraction, rhsSubZoneFraction, leftObject.isSetSubZoneFraction(), rightObject.isSetSubZoneFraction()));
                    target.setSubZoneFraction(mergedSubZoneFraction);
                } else {
                    if (subZoneFractionShouldBeMergedAndSet == Boolean.FALSE) {
                        target.subZoneFraction = null;
                    }
                }
            }
        }
    }


    /**
     * <p>Java class for anonymous complex type.
     * 
     * <p>The following schema fragment specifies the expected content contained within this class.
     * 
     * <pre>
     * &lt;complexType&gt;
     *   &lt;complexContent&gt;
     *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
     *       &lt;choice&gt;
     *         &lt;element name="deciminute"&gt;
     *           &lt;complexType&gt;
     *             &lt;complexContent&gt;
     *               &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
     *                 &lt;sequence&gt;
     *                   &lt;element name="eastingDeciminute" type="{http://metadata.ces.mil/mdr/ns/GSIP/tspi/2.0/core}DecaType"/&gt;
     *                   &lt;element name="northingDeciminute" type="{http://metadata.ces.mil/mdr/ns/GSIP/tspi/2.0/core}DecaType"/&gt;
     *                 &lt;/sequence&gt;
     *               &lt;/restriction&gt;
     *             &lt;/complexContent&gt;
     *           &lt;/complexType&gt;
     *         &lt;/element&gt;
     *         &lt;element name="centiminute"&gt;
     *           &lt;complexType&gt;
     *             &lt;complexContent&gt;
     *               &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
     *                 &lt;sequence&gt;
     *                   &lt;element name="eastingCentiminute" type="{http://metadata.ces.mil/mdr/ns/GSIP/tspi/2.0/core}HectoType"/&gt;
     *                   &lt;element name="northingCentiminute" type="{http://metadata.ces.mil/mdr/ns/GSIP/tspi/2.0/core}HectoType"/&gt;
     *                 &lt;/sequence&gt;
     *               &lt;/restriction&gt;
     *             &lt;/complexContent&gt;
     *           &lt;/complexType&gt;
     *         &lt;/element&gt;
     *       &lt;/choice&gt;
     *     &lt;/restriction&gt;
     *   &lt;/complexContent&gt;
     * &lt;/complexType&gt;
     * </pre>
     * 
     * 
     */
    @XmlAccessorType(XmlAccessType.FIELD)
    @XmlType(name = "", propOrder = {
        "deciminute",
        "centiminute"
    })
    public static class SubZoneFraction implements Serializable, Cloneable, CopyTo2, Equals2, HashCode2, MergeFrom2, ToString2
    {

        private final static long serialVersionUID = 1L;
        @Valid
        protected QuadranglePresentationType.SubZoneFraction.Deciminute deciminute;
        @Valid
        protected QuadranglePresentationType.SubZoneFraction.Centiminute centiminute;

        /**
         * Gets the value of the deciminute property.
         * 
         * @return
         *     possible object is
         *     {@link QuadranglePresentationType.SubZoneFraction.Deciminute }
         *     
         */
        public QuadranglePresentationType.SubZoneFraction.Deciminute getDeciminute() {
            return deciminute;
        }

        /**
         * Sets the value of the deciminute property.
         * 
         * @param value
         *     allowed object is
         *     {@link QuadranglePresentationType.SubZoneFraction.Deciminute }
         *     
         */
        public void setDeciminute(QuadranglePresentationType.SubZoneFraction.Deciminute value) {
            this.deciminute = value;
        }

        public boolean isSetDeciminute() {
            return (this.deciminute!= null);
        }

        /**
         * Gets the value of the centiminute property.
         * 
         * @return
         *     possible object is
         *     {@link QuadranglePresentationType.SubZoneFraction.Centiminute }
         *     
         */
        public QuadranglePresentationType.SubZoneFraction.Centiminute getCentiminute() {
            return centiminute;
        }

        /**
         * Sets the value of the centiminute property.
         * 
         * @param value
         *     allowed object is
         *     {@link QuadranglePresentationType.SubZoneFraction.Centiminute }
         *     
         */
        public void setCentiminute(QuadranglePresentationType.SubZoneFraction.Centiminute value) {
            this.centiminute = value;
        }

        public boolean isSetCentiminute() {
            return (this.centiminute!= null);
        }

        public String toString() {
            final ToStringStrategy2 strategy = JAXBToStringStrategy.INSTANCE;
            final StringBuilder buffer = new StringBuilder();
            append(null, buffer, strategy);
            return buffer.toString();
        }

        public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy2 strategy) {
            strategy.appendStart(locator, this, buffer);
            appendFields(locator, buffer, strategy);
            strategy.appendEnd(locator, this, buffer);
            return buffer;
        }

        public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy2 strategy) {
            {
                QuadranglePresentationType.SubZoneFraction.Deciminute theDeciminute;
                theDeciminute = this.getDeciminute();
                strategy.appendField(locator, this, "deciminute", buffer, theDeciminute, this.isSetDeciminute());
            }
            {
                QuadranglePresentationType.SubZoneFraction.Centiminute theCentiminute;
                theCentiminute = this.getCentiminute();
                strategy.appendField(locator, this, "centiminute", buffer, theCentiminute, this.isSetCentiminute());
            }
            return buffer;
        }

        public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy2 strategy) {
            if ((object == null)||(this.getClass()!= object.getClass())) {
                return false;
            }
            if (this == object) {
                return true;
            }
            final QuadranglePresentationType.SubZoneFraction that = ((QuadranglePresentationType.SubZoneFraction) object);
            {
                QuadranglePresentationType.SubZoneFraction.Deciminute lhsDeciminute;
                lhsDeciminute = this.getDeciminute();
                QuadranglePresentationType.SubZoneFraction.Deciminute rhsDeciminute;
                rhsDeciminute = that.getDeciminute();
                if (!strategy.equals(LocatorUtils.property(thisLocator, "deciminute", lhsDeciminute), LocatorUtils.property(thatLocator, "deciminute", rhsDeciminute), lhsDeciminute, rhsDeciminute, this.isSetDeciminute(), that.isSetDeciminute())) {
                    return false;
                }
            }
            {
                QuadranglePresentationType.SubZoneFraction.Centiminute lhsCentiminute;
                lhsCentiminute = this.getCentiminute();
                QuadranglePresentationType.SubZoneFraction.Centiminute rhsCentiminute;
                rhsCentiminute = that.getCentiminute();
                if (!strategy.equals(LocatorUtils.property(thisLocator, "centiminute", lhsCentiminute), LocatorUtils.property(thatLocator, "centiminute", rhsCentiminute), lhsCentiminute, rhsCentiminute, this.isSetCentiminute(), that.isSetCentiminute())) {
                    return false;
                }
            }
            return true;
        }

        public boolean equals(Object object) {
            final EqualsStrategy2 strategy = JAXBEqualsStrategy.INSTANCE;
            return equals(null, null, object, strategy);
        }

        public int hashCode(ObjectLocator locator, HashCodeStrategy2 strategy) {
            int currentHashCode = 1;
            {
                QuadranglePresentationType.SubZoneFraction.Deciminute theDeciminute;
                theDeciminute = this.getDeciminute();
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "deciminute", theDeciminute), currentHashCode, theDeciminute, this.isSetDeciminute());
            }
            {
                QuadranglePresentationType.SubZoneFraction.Centiminute theCentiminute;
                theCentiminute = this.getCentiminute();
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "centiminute", theCentiminute), currentHashCode, theCentiminute, this.isSetCentiminute());
            }
            return currentHashCode;
        }

        public int hashCode() {
            final HashCodeStrategy2 strategy = JAXBHashCodeStrategy.INSTANCE;
            return this.hashCode(null, strategy);
        }

        public Object clone() {
            return copyTo(createNewInstance());
        }

        public Object copyTo(Object target) {
            final CopyStrategy2 strategy = JAXBCopyStrategy.INSTANCE;
            return copyTo(null, target, strategy);
        }

        public Object copyTo(ObjectLocator locator, Object target, CopyStrategy2 strategy) {
            final Object draftCopy = ((target == null)?createNewInstance():target);
            if (draftCopy instanceof QuadranglePresentationType.SubZoneFraction) {
                final QuadranglePresentationType.SubZoneFraction copy = ((QuadranglePresentationType.SubZoneFraction) draftCopy);
                {
                    Boolean deciminuteShouldBeCopiedAndSet = strategy.shouldBeCopiedAndSet(locator, this.isSetDeciminute());
                    if (deciminuteShouldBeCopiedAndSet == Boolean.TRUE) {
                        QuadranglePresentationType.SubZoneFraction.Deciminute sourceDeciminute;
                        sourceDeciminute = this.getDeciminute();
                        QuadranglePresentationType.SubZoneFraction.Deciminute copyDeciminute = ((QuadranglePresentationType.SubZoneFraction.Deciminute) strategy.copy(LocatorUtils.property(locator, "deciminute", sourceDeciminute), sourceDeciminute, this.isSetDeciminute()));
                        copy.setDeciminute(copyDeciminute);
                    } else {
                        if (deciminuteShouldBeCopiedAndSet == Boolean.FALSE) {
                            copy.deciminute = null;
                        }
                    }
                }
                {
                    Boolean centiminuteShouldBeCopiedAndSet = strategy.shouldBeCopiedAndSet(locator, this.isSetCentiminute());
                    if (centiminuteShouldBeCopiedAndSet == Boolean.TRUE) {
                        QuadranglePresentationType.SubZoneFraction.Centiminute sourceCentiminute;
                        sourceCentiminute = this.getCentiminute();
                        QuadranglePresentationType.SubZoneFraction.Centiminute copyCentiminute = ((QuadranglePresentationType.SubZoneFraction.Centiminute) strategy.copy(LocatorUtils.property(locator, "centiminute", sourceCentiminute), sourceCentiminute, this.isSetCentiminute()));
                        copy.setCentiminute(copyCentiminute);
                    } else {
                        if (centiminuteShouldBeCopiedAndSet == Boolean.FALSE) {
                            copy.centiminute = null;
                        }
                    }
                }
            }
            return draftCopy;
        }

        public Object createNewInstance() {
            return new QuadranglePresentationType.SubZoneFraction();
        }

        public void mergeFrom(Object left, Object right) {
            final MergeStrategy2 strategy = JAXBMergeStrategy.INSTANCE;
            mergeFrom(null, null, left, right, strategy);
        }

        public void mergeFrom(ObjectLocator leftLocator, ObjectLocator rightLocator, Object left, Object right, MergeStrategy2 strategy) {
            if (right instanceof QuadranglePresentationType.SubZoneFraction) {
                final QuadranglePresentationType.SubZoneFraction target = this;
                final QuadranglePresentationType.SubZoneFraction leftObject = ((QuadranglePresentationType.SubZoneFraction) left);
                final QuadranglePresentationType.SubZoneFraction rightObject = ((QuadranglePresentationType.SubZoneFraction) right);
                {
                    Boolean deciminuteShouldBeMergedAndSet = strategy.shouldBeMergedAndSet(leftLocator, rightLocator, leftObject.isSetDeciminute(), rightObject.isSetDeciminute());
                    if (deciminuteShouldBeMergedAndSet == Boolean.TRUE) {
                        QuadranglePresentationType.SubZoneFraction.Deciminute lhsDeciminute;
                        lhsDeciminute = leftObject.getDeciminute();
                        QuadranglePresentationType.SubZoneFraction.Deciminute rhsDeciminute;
                        rhsDeciminute = rightObject.getDeciminute();
                        QuadranglePresentationType.SubZoneFraction.Deciminute mergedDeciminute = ((QuadranglePresentationType.SubZoneFraction.Deciminute) strategy.merge(LocatorUtils.property(leftLocator, "deciminute", lhsDeciminute), LocatorUtils.property(rightLocator, "deciminute", rhsDeciminute), lhsDeciminute, rhsDeciminute, leftObject.isSetDeciminute(), rightObject.isSetDeciminute()));
                        target.setDeciminute(mergedDeciminute);
                    } else {
                        if (deciminuteShouldBeMergedAndSet == Boolean.FALSE) {
                            target.deciminute = null;
                        }
                    }
                }
                {
                    Boolean centiminuteShouldBeMergedAndSet = strategy.shouldBeMergedAndSet(leftLocator, rightLocator, leftObject.isSetCentiminute(), rightObject.isSetCentiminute());
                    if (centiminuteShouldBeMergedAndSet == Boolean.TRUE) {
                        QuadranglePresentationType.SubZoneFraction.Centiminute lhsCentiminute;
                        lhsCentiminute = leftObject.getCentiminute();
                        QuadranglePresentationType.SubZoneFraction.Centiminute rhsCentiminute;
                        rhsCentiminute = rightObject.getCentiminute();
                        QuadranglePresentationType.SubZoneFraction.Centiminute mergedCentiminute = ((QuadranglePresentationType.SubZoneFraction.Centiminute) strategy.merge(LocatorUtils.property(leftLocator, "centiminute", lhsCentiminute), LocatorUtils.property(rightLocator, "centiminute", rhsCentiminute), lhsCentiminute, rhsCentiminute, leftObject.isSetCentiminute(), rightObject.isSetCentiminute()));
                        target.setCentiminute(mergedCentiminute);
                    } else {
                        if (centiminuteShouldBeMergedAndSet == Boolean.FALSE) {
                            target.centiminute = null;
                        }
                    }
                }
            }
        }


        /**
         * <p>Java class for anonymous complex type.
         * 
         * <p>The following schema fragment specifies the expected content contained within this class.
         * 
         * <pre>
         * &lt;complexType&gt;
         *   &lt;complexContent&gt;
         *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
         *       &lt;sequence&gt;
         *         &lt;element name="eastingCentiminute" type="{http://metadata.ces.mil/mdr/ns/GSIP/tspi/2.0/core}HectoType"/&gt;
         *         &lt;element name="northingCentiminute" type="{http://metadata.ces.mil/mdr/ns/GSIP/tspi/2.0/core}HectoType"/&gt;
         *       &lt;/sequence&gt;
         *     &lt;/restriction&gt;
         *   &lt;/complexContent&gt;
         * &lt;/complexType&gt;
         * </pre>
         * 
         * 
         */
        @XmlAccessorType(XmlAccessType.FIELD)
        @XmlType(name = "", propOrder = {
            "eastingCentiminute",
            "northingCentiminute"
        })
        public static class Centiminute implements Serializable, Cloneable, CopyTo2, Equals2, HashCode2, MergeFrom2, ToString2
        {

            private final static long serialVersionUID = 1L;
            @XmlSchemaType(name = "integer")
            @NotNull(message = "Centiminute.eastingCentiminute {javax.validation.constraints.NotNull.message}")
            @DecimalMax("99")
            @DecimalMin("00")
            protected int eastingCentiminute;
            @XmlSchemaType(name = "integer")
            @NotNull(message = "Centiminute.northingCentiminute {javax.validation.constraints.NotNull.message}")
            @DecimalMax("99")
            @DecimalMin("00")
            protected int northingCentiminute;

            /**
             * Gets the value of the eastingCentiminute property.
             * 
             */
            public int getEastingCentiminute() {
                return eastingCentiminute;
            }

            /**
             * Sets the value of the eastingCentiminute property.
             * 
             */
            public void setEastingCentiminute(int value) {
                this.eastingCentiminute = value;
            }

            public boolean isSetEastingCentiminute() {
                return true;
            }

            /**
             * Gets the value of the northingCentiminute property.
             * 
             */
            public int getNorthingCentiminute() {
                return northingCentiminute;
            }

            /**
             * Sets the value of the northingCentiminute property.
             * 
             */
            public void setNorthingCentiminute(int value) {
                this.northingCentiminute = value;
            }

            public boolean isSetNorthingCentiminute() {
                return true;
            }

            public String toString() {
                final ToStringStrategy2 strategy = JAXBToStringStrategy.INSTANCE;
                final StringBuilder buffer = new StringBuilder();
                append(null, buffer, strategy);
                return buffer.toString();
            }

            public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy2 strategy) {
                strategy.appendStart(locator, this, buffer);
                appendFields(locator, buffer, strategy);
                strategy.appendEnd(locator, this, buffer);
                return buffer;
            }

            public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy2 strategy) {
                {
                    int theEastingCentiminute;
                    theEastingCentiminute = this.getEastingCentiminute();
                    strategy.appendField(locator, this, "eastingCentiminute", buffer, theEastingCentiminute, true);
                }
                {
                    int theNorthingCentiminute;
                    theNorthingCentiminute = this.getNorthingCentiminute();
                    strategy.appendField(locator, this, "northingCentiminute", buffer, theNorthingCentiminute, true);
                }
                return buffer;
            }

            public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy2 strategy) {
                if ((object == null)||(this.getClass()!= object.getClass())) {
                    return false;
                }
                if (this == object) {
                    return true;
                }
                final QuadranglePresentationType.SubZoneFraction.Centiminute that = ((QuadranglePresentationType.SubZoneFraction.Centiminute) object);
                {
                    int lhsEastingCentiminute;
                    lhsEastingCentiminute = this.getEastingCentiminute();
                    int rhsEastingCentiminute;
                    rhsEastingCentiminute = that.getEastingCentiminute();
                    if (!strategy.equals(LocatorUtils.property(thisLocator, "eastingCentiminute", lhsEastingCentiminute), LocatorUtils.property(thatLocator, "eastingCentiminute", rhsEastingCentiminute), lhsEastingCentiminute, rhsEastingCentiminute, true, true)) {
                        return false;
                    }
                }
                {
                    int lhsNorthingCentiminute;
                    lhsNorthingCentiminute = this.getNorthingCentiminute();
                    int rhsNorthingCentiminute;
                    rhsNorthingCentiminute = that.getNorthingCentiminute();
                    if (!strategy.equals(LocatorUtils.property(thisLocator, "northingCentiminute", lhsNorthingCentiminute), LocatorUtils.property(thatLocator, "northingCentiminute", rhsNorthingCentiminute), lhsNorthingCentiminute, rhsNorthingCentiminute, true, true)) {
                        return false;
                    }
                }
                return true;
            }

            public boolean equals(Object object) {
                final EqualsStrategy2 strategy = JAXBEqualsStrategy.INSTANCE;
                return equals(null, null, object, strategy);
            }

            public int hashCode(ObjectLocator locator, HashCodeStrategy2 strategy) {
                int currentHashCode = 1;
                {
                    int theEastingCentiminute;
                    theEastingCentiminute = this.getEastingCentiminute();
                    currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "eastingCentiminute", theEastingCentiminute), currentHashCode, theEastingCentiminute, true);
                }
                {
                    int theNorthingCentiminute;
                    theNorthingCentiminute = this.getNorthingCentiminute();
                    currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "northingCentiminute", theNorthingCentiminute), currentHashCode, theNorthingCentiminute, true);
                }
                return currentHashCode;
            }

            public int hashCode() {
                final HashCodeStrategy2 strategy = JAXBHashCodeStrategy.INSTANCE;
                return this.hashCode(null, strategy);
            }

            public Object clone() {
                return copyTo(createNewInstance());
            }

            public Object copyTo(Object target) {
                final CopyStrategy2 strategy = JAXBCopyStrategy.INSTANCE;
                return copyTo(null, target, strategy);
            }

            public Object copyTo(ObjectLocator locator, Object target, CopyStrategy2 strategy) {
                final Object draftCopy = ((target == null)?createNewInstance():target);
                if (draftCopy instanceof QuadranglePresentationType.SubZoneFraction.Centiminute) {
                    final QuadranglePresentationType.SubZoneFraction.Centiminute copy = ((QuadranglePresentationType.SubZoneFraction.Centiminute) draftCopy);
                    {
                        Boolean eastingCentiminuteShouldBeCopiedAndSet = strategy.shouldBeCopiedAndSet(locator, true);
                        if (eastingCentiminuteShouldBeCopiedAndSet == Boolean.TRUE) {
                            int sourceEastingCentiminute;
                            sourceEastingCentiminute = this.getEastingCentiminute();
                            int copyEastingCentiminute = strategy.copy(LocatorUtils.property(locator, "eastingCentiminute", sourceEastingCentiminute), sourceEastingCentiminute, true);
                            copy.setEastingCentiminute(copyEastingCentiminute);
                        } else {
                            if (eastingCentiminuteShouldBeCopiedAndSet == Boolean.FALSE) {
                            }
                        }
                    }
                    {
                        Boolean northingCentiminuteShouldBeCopiedAndSet = strategy.shouldBeCopiedAndSet(locator, true);
                        if (northingCentiminuteShouldBeCopiedAndSet == Boolean.TRUE) {
                            int sourceNorthingCentiminute;
                            sourceNorthingCentiminute = this.getNorthingCentiminute();
                            int copyNorthingCentiminute = strategy.copy(LocatorUtils.property(locator, "northingCentiminute", sourceNorthingCentiminute), sourceNorthingCentiminute, true);
                            copy.setNorthingCentiminute(copyNorthingCentiminute);
                        } else {
                            if (northingCentiminuteShouldBeCopiedAndSet == Boolean.FALSE) {
                            }
                        }
                    }
                }
                return draftCopy;
            }

            public Object createNewInstance() {
                return new QuadranglePresentationType.SubZoneFraction.Centiminute();
            }

            public void mergeFrom(Object left, Object right) {
                final MergeStrategy2 strategy = JAXBMergeStrategy.INSTANCE;
                mergeFrom(null, null, left, right, strategy);
            }

            public void mergeFrom(ObjectLocator leftLocator, ObjectLocator rightLocator, Object left, Object right, MergeStrategy2 strategy) {
                if (right instanceof QuadranglePresentationType.SubZoneFraction.Centiminute) {
                    final QuadranglePresentationType.SubZoneFraction.Centiminute target = this;
                    final QuadranglePresentationType.SubZoneFraction.Centiminute leftObject = ((QuadranglePresentationType.SubZoneFraction.Centiminute) left);
                    final QuadranglePresentationType.SubZoneFraction.Centiminute rightObject = ((QuadranglePresentationType.SubZoneFraction.Centiminute) right);
                    {
                        Boolean eastingCentiminuteShouldBeMergedAndSet = strategy.shouldBeMergedAndSet(leftLocator, rightLocator, true, true);
                        if (eastingCentiminuteShouldBeMergedAndSet == Boolean.TRUE) {
                            int lhsEastingCentiminute;
                            lhsEastingCentiminute = leftObject.getEastingCentiminute();
                            int rhsEastingCentiminute;
                            rhsEastingCentiminute = rightObject.getEastingCentiminute();
                            int mergedEastingCentiminute = ((int) strategy.merge(LocatorUtils.property(leftLocator, "eastingCentiminute", lhsEastingCentiminute), LocatorUtils.property(rightLocator, "eastingCentiminute", rhsEastingCentiminute), lhsEastingCentiminute, rhsEastingCentiminute, true, true));
                            target.setEastingCentiminute(mergedEastingCentiminute);
                        } else {
                            if (eastingCentiminuteShouldBeMergedAndSet == Boolean.FALSE) {
                            }
                        }
                    }
                    {
                        Boolean northingCentiminuteShouldBeMergedAndSet = strategy.shouldBeMergedAndSet(leftLocator, rightLocator, true, true);
                        if (northingCentiminuteShouldBeMergedAndSet == Boolean.TRUE) {
                            int lhsNorthingCentiminute;
                            lhsNorthingCentiminute = leftObject.getNorthingCentiminute();
                            int rhsNorthingCentiminute;
                            rhsNorthingCentiminute = rightObject.getNorthingCentiminute();
                            int mergedNorthingCentiminute = ((int) strategy.merge(LocatorUtils.property(leftLocator, "northingCentiminute", lhsNorthingCentiminute), LocatorUtils.property(rightLocator, "northingCentiminute", rhsNorthingCentiminute), lhsNorthingCentiminute, rhsNorthingCentiminute, true, true));
                            target.setNorthingCentiminute(mergedNorthingCentiminute);
                        } else {
                            if (northingCentiminuteShouldBeMergedAndSet == Boolean.FALSE) {
                            }
                        }
                    }
                }
            }

        }


        /**
         * <p>Java class for anonymous complex type.
         * 
         * <p>The following schema fragment specifies the expected content contained within this class.
         * 
         * <pre>
         * &lt;complexType&gt;
         *   &lt;complexContent&gt;
         *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
         *       &lt;sequence&gt;
         *         &lt;element name="eastingDeciminute" type="{http://metadata.ces.mil/mdr/ns/GSIP/tspi/2.0/core}DecaType"/&gt;
         *         &lt;element name="northingDeciminute" type="{http://metadata.ces.mil/mdr/ns/GSIP/tspi/2.0/core}DecaType"/&gt;
         *       &lt;/sequence&gt;
         *     &lt;/restriction&gt;
         *   &lt;/complexContent&gt;
         * &lt;/complexType&gt;
         * </pre>
         * 
         * 
         */
        @XmlAccessorType(XmlAccessType.FIELD)
        @XmlType(name = "", propOrder = {
            "eastingDeciminute",
            "northingDeciminute"
        })
        public static class Deciminute implements Serializable, Cloneable, CopyTo2, Equals2, HashCode2, MergeFrom2, ToString2
        {

            private final static long serialVersionUID = 1L;
            @XmlSchemaType(name = "integer")
            @NotNull(message = "Deciminute.eastingDeciminute {javax.validation.constraints.NotNull.message}")
            @DecimalMax("9")
            @DecimalMin("0")
            protected int eastingDeciminute;
            @XmlSchemaType(name = "integer")
            @NotNull(message = "Deciminute.northingDeciminute {javax.validation.constraints.NotNull.message}")
            @DecimalMax("9")
            @DecimalMin("0")
            protected int northingDeciminute;

            /**
             * Gets the value of the eastingDeciminute property.
             * 
             */
            public int getEastingDeciminute() {
                return eastingDeciminute;
            }

            /**
             * Sets the value of the eastingDeciminute property.
             * 
             */
            public void setEastingDeciminute(int value) {
                this.eastingDeciminute = value;
            }

            public boolean isSetEastingDeciminute() {
                return true;
            }

            /**
             * Gets the value of the northingDeciminute property.
             * 
             */
            public int getNorthingDeciminute() {
                return northingDeciminute;
            }

            /**
             * Sets the value of the northingDeciminute property.
             * 
             */
            public void setNorthingDeciminute(int value) {
                this.northingDeciminute = value;
            }

            public boolean isSetNorthingDeciminute() {
                return true;
            }

            public String toString() {
                final ToStringStrategy2 strategy = JAXBToStringStrategy.INSTANCE;
                final StringBuilder buffer = new StringBuilder();
                append(null, buffer, strategy);
                return buffer.toString();
            }

            public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy2 strategy) {
                strategy.appendStart(locator, this, buffer);
                appendFields(locator, buffer, strategy);
                strategy.appendEnd(locator, this, buffer);
                return buffer;
            }

            public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy2 strategy) {
                {
                    int theEastingDeciminute;
                    theEastingDeciminute = this.getEastingDeciminute();
                    strategy.appendField(locator, this, "eastingDeciminute", buffer, theEastingDeciminute, true);
                }
                {
                    int theNorthingDeciminute;
                    theNorthingDeciminute = this.getNorthingDeciminute();
                    strategy.appendField(locator, this, "northingDeciminute", buffer, theNorthingDeciminute, true);
                }
                return buffer;
            }

            public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy2 strategy) {
                if ((object == null)||(this.getClass()!= object.getClass())) {
                    return false;
                }
                if (this == object) {
                    return true;
                }
                final QuadranglePresentationType.SubZoneFraction.Deciminute that = ((QuadranglePresentationType.SubZoneFraction.Deciminute) object);
                {
                    int lhsEastingDeciminute;
                    lhsEastingDeciminute = this.getEastingDeciminute();
                    int rhsEastingDeciminute;
                    rhsEastingDeciminute = that.getEastingDeciminute();
                    if (!strategy.equals(LocatorUtils.property(thisLocator, "eastingDeciminute", lhsEastingDeciminute), LocatorUtils.property(thatLocator, "eastingDeciminute", rhsEastingDeciminute), lhsEastingDeciminute, rhsEastingDeciminute, true, true)) {
                        return false;
                    }
                }
                {
                    int lhsNorthingDeciminute;
                    lhsNorthingDeciminute = this.getNorthingDeciminute();
                    int rhsNorthingDeciminute;
                    rhsNorthingDeciminute = that.getNorthingDeciminute();
                    if (!strategy.equals(LocatorUtils.property(thisLocator, "northingDeciminute", lhsNorthingDeciminute), LocatorUtils.property(thatLocator, "northingDeciminute", rhsNorthingDeciminute), lhsNorthingDeciminute, rhsNorthingDeciminute, true, true)) {
                        return false;
                    }
                }
                return true;
            }

            public boolean equals(Object object) {
                final EqualsStrategy2 strategy = JAXBEqualsStrategy.INSTANCE;
                return equals(null, null, object, strategy);
            }

            public int hashCode(ObjectLocator locator, HashCodeStrategy2 strategy) {
                int currentHashCode = 1;
                {
                    int theEastingDeciminute;
                    theEastingDeciminute = this.getEastingDeciminute();
                    currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "eastingDeciminute", theEastingDeciminute), currentHashCode, theEastingDeciminute, true);
                }
                {
                    int theNorthingDeciminute;
                    theNorthingDeciminute = this.getNorthingDeciminute();
                    currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "northingDeciminute", theNorthingDeciminute), currentHashCode, theNorthingDeciminute, true);
                }
                return currentHashCode;
            }

            public int hashCode() {
                final HashCodeStrategy2 strategy = JAXBHashCodeStrategy.INSTANCE;
                return this.hashCode(null, strategy);
            }

            public Object clone() {
                return copyTo(createNewInstance());
            }

            public Object copyTo(Object target) {
                final CopyStrategy2 strategy = JAXBCopyStrategy.INSTANCE;
                return copyTo(null, target, strategy);
            }

            public Object copyTo(ObjectLocator locator, Object target, CopyStrategy2 strategy) {
                final Object draftCopy = ((target == null)?createNewInstance():target);
                if (draftCopy instanceof QuadranglePresentationType.SubZoneFraction.Deciminute) {
                    final QuadranglePresentationType.SubZoneFraction.Deciminute copy = ((QuadranglePresentationType.SubZoneFraction.Deciminute) draftCopy);
                    {
                        Boolean eastingDeciminuteShouldBeCopiedAndSet = strategy.shouldBeCopiedAndSet(locator, true);
                        if (eastingDeciminuteShouldBeCopiedAndSet == Boolean.TRUE) {
                            int sourceEastingDeciminute;
                            sourceEastingDeciminute = this.getEastingDeciminute();
                            int copyEastingDeciminute = strategy.copy(LocatorUtils.property(locator, "eastingDeciminute", sourceEastingDeciminute), sourceEastingDeciminute, true);
                            copy.setEastingDeciminute(copyEastingDeciminute);
                        } else {
                            if (eastingDeciminuteShouldBeCopiedAndSet == Boolean.FALSE) {
                            }
                        }
                    }
                    {
                        Boolean northingDeciminuteShouldBeCopiedAndSet = strategy.shouldBeCopiedAndSet(locator, true);
                        if (northingDeciminuteShouldBeCopiedAndSet == Boolean.TRUE) {
                            int sourceNorthingDeciminute;
                            sourceNorthingDeciminute = this.getNorthingDeciminute();
                            int copyNorthingDeciminute = strategy.copy(LocatorUtils.property(locator, "northingDeciminute", sourceNorthingDeciminute), sourceNorthingDeciminute, true);
                            copy.setNorthingDeciminute(copyNorthingDeciminute);
                        } else {
                            if (northingDeciminuteShouldBeCopiedAndSet == Boolean.FALSE) {
                            }
                        }
                    }
                }
                return draftCopy;
            }

            public Object createNewInstance() {
                return new QuadranglePresentationType.SubZoneFraction.Deciminute();
            }

            public void mergeFrom(Object left, Object right) {
                final MergeStrategy2 strategy = JAXBMergeStrategy.INSTANCE;
                mergeFrom(null, null, left, right, strategy);
            }

            public void mergeFrom(ObjectLocator leftLocator, ObjectLocator rightLocator, Object left, Object right, MergeStrategy2 strategy) {
                if (right instanceof QuadranglePresentationType.SubZoneFraction.Deciminute) {
                    final QuadranglePresentationType.SubZoneFraction.Deciminute target = this;
                    final QuadranglePresentationType.SubZoneFraction.Deciminute leftObject = ((QuadranglePresentationType.SubZoneFraction.Deciminute) left);
                    final QuadranglePresentationType.SubZoneFraction.Deciminute rightObject = ((QuadranglePresentationType.SubZoneFraction.Deciminute) right);
                    {
                        Boolean eastingDeciminuteShouldBeMergedAndSet = strategy.shouldBeMergedAndSet(leftLocator, rightLocator, true, true);
                        if (eastingDeciminuteShouldBeMergedAndSet == Boolean.TRUE) {
                            int lhsEastingDeciminute;
                            lhsEastingDeciminute = leftObject.getEastingDeciminute();
                            int rhsEastingDeciminute;
                            rhsEastingDeciminute = rightObject.getEastingDeciminute();
                            int mergedEastingDeciminute = ((int) strategy.merge(LocatorUtils.property(leftLocator, "eastingDeciminute", lhsEastingDeciminute), LocatorUtils.property(rightLocator, "eastingDeciminute", rhsEastingDeciminute), lhsEastingDeciminute, rhsEastingDeciminute, true, true));
                            target.setEastingDeciminute(mergedEastingDeciminute);
                        } else {
                            if (eastingDeciminuteShouldBeMergedAndSet == Boolean.FALSE) {
                            }
                        }
                    }
                    {
                        Boolean northingDeciminuteShouldBeMergedAndSet = strategy.shouldBeMergedAndSet(leftLocator, rightLocator, true, true);
                        if (northingDeciminuteShouldBeMergedAndSet == Boolean.TRUE) {
                            int lhsNorthingDeciminute;
                            lhsNorthingDeciminute = leftObject.getNorthingDeciminute();
                            int rhsNorthingDeciminute;
                            rhsNorthingDeciminute = rightObject.getNorthingDeciminute();
                            int mergedNorthingDeciminute = ((int) strategy.merge(LocatorUtils.property(leftLocator, "northingDeciminute", lhsNorthingDeciminute), LocatorUtils.property(rightLocator, "northingDeciminute", rhsNorthingDeciminute), lhsNorthingDeciminute, rhsNorthingDeciminute, true, true));
                            target.setNorthingDeciminute(mergedNorthingDeciminute);
                        } else {
                            if (northingDeciminuteShouldBeMergedAndSet == Boolean.FALSE) {
                            }
                        }
                    }
                }
            }

        }

    }


    /**
     * <p>Java class for anonymous complex type.
     * 
     * <p>The following schema fragment specifies the expected content contained within this class.
     * 
     * <pre>
     * &lt;complexType&gt;
     *   &lt;complexContent&gt;
     *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
     *       &lt;sequence&gt;
     *         &lt;element name="eastingMinute" type="{http://metadata.ces.mil/mdr/ns/GSIP/tspi/2.0/core}SexagesimalType"/&gt;
     *         &lt;element name="northingMinute" type="{http://metadata.ces.mil/mdr/ns/GSIP/tspi/2.0/core}SexagesimalType"/&gt;
     *       &lt;/sequence&gt;
     *     &lt;/restriction&gt;
     *   &lt;/complexContent&gt;
     * &lt;/complexType&gt;
     * </pre>
     * 
     * 
     */
    @XmlAccessorType(XmlAccessType.FIELD)
    @XmlType(name = "", propOrder = {
        "eastingMinute",
        "northingMinute"
    })
    public static class SubZoneMinute implements Serializable, Cloneable, CopyTo2, Equals2, HashCode2, MergeFrom2, ToString2
    {

        private final static long serialVersionUID = 1L;
        @XmlSchemaType(name = "integer")
        @NotNull(message = "SubZoneMinute.eastingMinute {javax.validation.constraints.NotNull.message}")
        @DecimalMax("59")
        @DecimalMin("00")
        protected int eastingMinute;
        @XmlSchemaType(name = "integer")
        @NotNull(message = "SubZoneMinute.northingMinute {javax.validation.constraints.NotNull.message}")
        @DecimalMax("59")
        @DecimalMin("00")
        protected int northingMinute;

        /**
         * Gets the value of the eastingMinute property.
         * 
         */
        public int getEastingMinute() {
            return eastingMinute;
        }

        /**
         * Sets the value of the eastingMinute property.
         * 
         */
        public void setEastingMinute(int value) {
            this.eastingMinute = value;
        }

        public boolean isSetEastingMinute() {
            return true;
        }

        /**
         * Gets the value of the northingMinute property.
         * 
         */
        public int getNorthingMinute() {
            return northingMinute;
        }

        /**
         * Sets the value of the northingMinute property.
         * 
         */
        public void setNorthingMinute(int value) {
            this.northingMinute = value;
        }

        public boolean isSetNorthingMinute() {
            return true;
        }

        public String toString() {
            final ToStringStrategy2 strategy = JAXBToStringStrategy.INSTANCE;
            final StringBuilder buffer = new StringBuilder();
            append(null, buffer, strategy);
            return buffer.toString();
        }

        public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy2 strategy) {
            strategy.appendStart(locator, this, buffer);
            appendFields(locator, buffer, strategy);
            strategy.appendEnd(locator, this, buffer);
            return buffer;
        }

        public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy2 strategy) {
            {
                int theEastingMinute;
                theEastingMinute = this.getEastingMinute();
                strategy.appendField(locator, this, "eastingMinute", buffer, theEastingMinute, true);
            }
            {
                int theNorthingMinute;
                theNorthingMinute = this.getNorthingMinute();
                strategy.appendField(locator, this, "northingMinute", buffer, theNorthingMinute, true);
            }
            return buffer;
        }

        public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy2 strategy) {
            if ((object == null)||(this.getClass()!= object.getClass())) {
                return false;
            }
            if (this == object) {
                return true;
            }
            final QuadranglePresentationType.SubZoneMinute that = ((QuadranglePresentationType.SubZoneMinute) object);
            {
                int lhsEastingMinute;
                lhsEastingMinute = this.getEastingMinute();
                int rhsEastingMinute;
                rhsEastingMinute = that.getEastingMinute();
                if (!strategy.equals(LocatorUtils.property(thisLocator, "eastingMinute", lhsEastingMinute), LocatorUtils.property(thatLocator, "eastingMinute", rhsEastingMinute), lhsEastingMinute, rhsEastingMinute, true, true)) {
                    return false;
                }
            }
            {
                int lhsNorthingMinute;
                lhsNorthingMinute = this.getNorthingMinute();
                int rhsNorthingMinute;
                rhsNorthingMinute = that.getNorthingMinute();
                if (!strategy.equals(LocatorUtils.property(thisLocator, "northingMinute", lhsNorthingMinute), LocatorUtils.property(thatLocator, "northingMinute", rhsNorthingMinute), lhsNorthingMinute, rhsNorthingMinute, true, true)) {
                    return false;
                }
            }
            return true;
        }

        public boolean equals(Object object) {
            final EqualsStrategy2 strategy = JAXBEqualsStrategy.INSTANCE;
            return equals(null, null, object, strategy);
        }

        public int hashCode(ObjectLocator locator, HashCodeStrategy2 strategy) {
            int currentHashCode = 1;
            {
                int theEastingMinute;
                theEastingMinute = this.getEastingMinute();
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "eastingMinute", theEastingMinute), currentHashCode, theEastingMinute, true);
            }
            {
                int theNorthingMinute;
                theNorthingMinute = this.getNorthingMinute();
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "northingMinute", theNorthingMinute), currentHashCode, theNorthingMinute, true);
            }
            return currentHashCode;
        }

        public int hashCode() {
            final HashCodeStrategy2 strategy = JAXBHashCodeStrategy.INSTANCE;
            return this.hashCode(null, strategy);
        }

        public Object clone() {
            return copyTo(createNewInstance());
        }

        public Object copyTo(Object target) {
            final CopyStrategy2 strategy = JAXBCopyStrategy.INSTANCE;
            return copyTo(null, target, strategy);
        }

        public Object copyTo(ObjectLocator locator, Object target, CopyStrategy2 strategy) {
            final Object draftCopy = ((target == null)?createNewInstance():target);
            if (draftCopy instanceof QuadranglePresentationType.SubZoneMinute) {
                final QuadranglePresentationType.SubZoneMinute copy = ((QuadranglePresentationType.SubZoneMinute) draftCopy);
                {
                    Boolean eastingMinuteShouldBeCopiedAndSet = strategy.shouldBeCopiedAndSet(locator, true);
                    if (eastingMinuteShouldBeCopiedAndSet == Boolean.TRUE) {
                        int sourceEastingMinute;
                        sourceEastingMinute = this.getEastingMinute();
                        int copyEastingMinute = strategy.copy(LocatorUtils.property(locator, "eastingMinute", sourceEastingMinute), sourceEastingMinute, true);
                        copy.setEastingMinute(copyEastingMinute);
                    } else {
                        if (eastingMinuteShouldBeCopiedAndSet == Boolean.FALSE) {
                        }
                    }
                }
                {
                    Boolean northingMinuteShouldBeCopiedAndSet = strategy.shouldBeCopiedAndSet(locator, true);
                    if (northingMinuteShouldBeCopiedAndSet == Boolean.TRUE) {
                        int sourceNorthingMinute;
                        sourceNorthingMinute = this.getNorthingMinute();
                        int copyNorthingMinute = strategy.copy(LocatorUtils.property(locator, "northingMinute", sourceNorthingMinute), sourceNorthingMinute, true);
                        copy.setNorthingMinute(copyNorthingMinute);
                    } else {
                        if (northingMinuteShouldBeCopiedAndSet == Boolean.FALSE) {
                        }
                    }
                }
            }
            return draftCopy;
        }

        public Object createNewInstance() {
            return new QuadranglePresentationType.SubZoneMinute();
        }

        public void mergeFrom(Object left, Object right) {
            final MergeStrategy2 strategy = JAXBMergeStrategy.INSTANCE;
            mergeFrom(null, null, left, right, strategy);
        }

        public void mergeFrom(ObjectLocator leftLocator, ObjectLocator rightLocator, Object left, Object right, MergeStrategy2 strategy) {
            if (right instanceof QuadranglePresentationType.SubZoneMinute) {
                final QuadranglePresentationType.SubZoneMinute target = this;
                final QuadranglePresentationType.SubZoneMinute leftObject = ((QuadranglePresentationType.SubZoneMinute) left);
                final QuadranglePresentationType.SubZoneMinute rightObject = ((QuadranglePresentationType.SubZoneMinute) right);
                {
                    Boolean eastingMinuteShouldBeMergedAndSet = strategy.shouldBeMergedAndSet(leftLocator, rightLocator, true, true);
                    if (eastingMinuteShouldBeMergedAndSet == Boolean.TRUE) {
                        int lhsEastingMinute;
                        lhsEastingMinute = leftObject.getEastingMinute();
                        int rhsEastingMinute;
                        rhsEastingMinute = rightObject.getEastingMinute();
                        int mergedEastingMinute = ((int) strategy.merge(LocatorUtils.property(leftLocator, "eastingMinute", lhsEastingMinute), LocatorUtils.property(rightLocator, "eastingMinute", rhsEastingMinute), lhsEastingMinute, rhsEastingMinute, true, true));
                        target.setEastingMinute(mergedEastingMinute);
                    } else {
                        if (eastingMinuteShouldBeMergedAndSet == Boolean.FALSE) {
                        }
                    }
                }
                {
                    Boolean northingMinuteShouldBeMergedAndSet = strategy.shouldBeMergedAndSet(leftLocator, rightLocator, true, true);
                    if (northingMinuteShouldBeMergedAndSet == Boolean.TRUE) {
                        int lhsNorthingMinute;
                        lhsNorthingMinute = leftObject.getNorthingMinute();
                        int rhsNorthingMinute;
                        rhsNorthingMinute = rightObject.getNorthingMinute();
                        int mergedNorthingMinute = ((int) strategy.merge(LocatorUtils.property(leftLocator, "northingMinute", lhsNorthingMinute), LocatorUtils.property(rightLocator, "northingMinute", rhsNorthingMinute), lhsNorthingMinute, rhsNorthingMinute, true, true));
                        target.setNorthingMinute(mergedNorthingMinute);
                    } else {
                        if (northingMinuteShouldBeMergedAndSet == Boolean.FALSE) {
                        }
                    }
                }
            }
        }

    }

}
