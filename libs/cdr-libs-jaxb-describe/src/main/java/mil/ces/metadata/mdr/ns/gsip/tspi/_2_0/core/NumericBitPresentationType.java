//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.11 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2016.07.27 at 04:06:37 PM EDT 
//


package mil.ces.metadata.mdr.ns.gsip.tspi._2_0.core;

import java.io.Serializable;
import javax.validation.Valid;
import javax.validation.constraints.NotNull;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlSchemaType;
import javax.xml.bind.annotation.XmlType;
import org.jvnet.jaxb2_commons.lang.CopyStrategy2;
import org.jvnet.jaxb2_commons.lang.CopyTo2;
import org.jvnet.jaxb2_commons.lang.Equals2;
import org.jvnet.jaxb2_commons.lang.EqualsStrategy2;
import org.jvnet.jaxb2_commons.lang.HashCode2;
import org.jvnet.jaxb2_commons.lang.HashCodeStrategy2;
import org.jvnet.jaxb2_commons.lang.JAXBCopyStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBEqualsStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBHashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBMergeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBToStringStrategy;
import org.jvnet.jaxb2_commons.lang.MergeFrom2;
import org.jvnet.jaxb2_commons.lang.MergeStrategy2;
import org.jvnet.jaxb2_commons.lang.ToString2;
import org.jvnet.jaxb2_commons.lang.ToStringStrategy2;
import org.jvnet.jaxb2_commons.locator.ObjectLocator;
import org.jvnet.jaxb2_commons.locator.util.LocatorUtils;


/**
 * Numeric Bit Presentation Type: A datatype representing a numeric-bit position presentation based on the requirements of the Variable Message Format (VMF). [desc] VMF encodes values of geodetic latitude and longitude as multi-bit fields whose bit configurations represent actual numeric values. The least significant bit value and range are described in the applicable message description. A negative number is coded and transmitted with twos complement coding and identified by the number one in the most significant bit of the data field.
 * 
 * <p>Java class for NumericBitPresentationType complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="NumericBitPresentationType"&gt;
 *   &lt;complexContent&gt;
 *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
 *       &lt;sequence&gt;
 *         &lt;choice&gt;
 *           &lt;element name="encoded20Bit"&gt;
 *             &lt;complexType&gt;
 *               &lt;complexContent&gt;
 *                 &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
 *                   &lt;sequence&gt;
 *                     &lt;element name="latitude" type="{http://metadata.ces.mil/mdr/ns/GSIP/tspi/2.0/core}Latitude20BitType"/&gt;
 *                     &lt;element name="longitude" type="{http://metadata.ces.mil/mdr/ns/GSIP/tspi/2.0/core}Longitude21BitType"/&gt;
 *                   &lt;/sequence&gt;
 *                 &lt;/restriction&gt;
 *               &lt;/complexContent&gt;
 *             &lt;/complexType&gt;
 *           &lt;/element&gt;
 *           &lt;element name="encoded21Bit"&gt;
 *             &lt;complexType&gt;
 *               &lt;complexContent&gt;
 *                 &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
 *                   &lt;sequence&gt;
 *                     &lt;element name="latitude" type="{http://metadata.ces.mil/mdr/ns/GSIP/tspi/2.0/core}Latitude21BitType"/&gt;
 *                     &lt;element name="longitude" type="{http://metadata.ces.mil/mdr/ns/GSIP/tspi/2.0/core}Longitude22BitType"/&gt;
 *                   &lt;/sequence&gt;
 *                 &lt;/restriction&gt;
 *               &lt;/complexContent&gt;
 *             &lt;/complexType&gt;
 *           &lt;/element&gt;
 *           &lt;element name="encoded23Bit"&gt;
 *             &lt;complexType&gt;
 *               &lt;complexContent&gt;
 *                 &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
 *                   &lt;sequence&gt;
 *                     &lt;element name="latitude" type="{http://metadata.ces.mil/mdr/ns/GSIP/tspi/2.0/core}Latitude23BitType"/&gt;
 *                     &lt;element name="longitude" type="{http://metadata.ces.mil/mdr/ns/GSIP/tspi/2.0/core}Longitude24BitType"/&gt;
 *                   &lt;/sequence&gt;
 *                 &lt;/restriction&gt;
 *               &lt;/complexContent&gt;
 *             &lt;/complexType&gt;
 *           &lt;/element&gt;
 *           &lt;element name="encoded25Bit"&gt;
 *             &lt;complexType&gt;
 *               &lt;complexContent&gt;
 *                 &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
 *                   &lt;sequence&gt;
 *                     &lt;element name="latitude" type="{http://metadata.ces.mil/mdr/ns/GSIP/tspi/2.0/core}Latitude25BitType"/&gt;
 *                     &lt;element name="longitude" type="{http://metadata.ces.mil/mdr/ns/GSIP/tspi/2.0/core}Longitude26BitType"/&gt;
 *                   &lt;/sequence&gt;
 *                 &lt;/restriction&gt;
 *               &lt;/complexContent&gt;
 *             &lt;/complexType&gt;
 *           &lt;/element&gt;
 *           &lt;element name="encoded31Bit"&gt;
 *             &lt;complexType&gt;
 *               &lt;complexContent&gt;
 *                 &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
 *                   &lt;sequence&gt;
 *                     &lt;element name="latitude" type="{http://metadata.ces.mil/mdr/ns/GSIP/tspi/2.0/core}Latitude31BitType"/&gt;
 *                     &lt;element name="longitude" type="{http://metadata.ces.mil/mdr/ns/GSIP/tspi/2.0/core}Longitude32BitType"/&gt;
 *                   &lt;/sequence&gt;
 *                 &lt;/restriction&gt;
 *               &lt;/complexContent&gt;
 *             &lt;/complexType&gt;
 *           &lt;/element&gt;
 *         &lt;/choice&gt;
 *       &lt;/sequence&gt;
 *     &lt;/restriction&gt;
 *   &lt;/complexContent&gt;
 * &lt;/complexType&gt;
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "NumericBitPresentationType", propOrder = {
    "encoded20Bit",
    "encoded21Bit",
    "encoded23Bit",
    "encoded25Bit",
    "encoded31Bit"
})
public class NumericBitPresentationType implements Serializable, Cloneable, CopyTo2, Equals2, HashCode2, MergeFrom2, ToString2
{

    private final static long serialVersionUID = 1L;
    @Valid
    protected NumericBitPresentationType.Encoded20Bit encoded20Bit;
    @Valid
    protected NumericBitPresentationType.Encoded21Bit encoded21Bit;
    @Valid
    protected NumericBitPresentationType.Encoded23Bit encoded23Bit;
    @Valid
    protected NumericBitPresentationType.Encoded25Bit encoded25Bit;
    @Valid
    protected NumericBitPresentationType.Encoded31Bit encoded31Bit;

    /**
     * Gets the value of the encoded20Bit property.
     * 
     * @return
     *     possible object is
     *     {@link NumericBitPresentationType.Encoded20Bit }
     *     
     */
    public NumericBitPresentationType.Encoded20Bit getEncoded20Bit() {
        return encoded20Bit;
    }

    /**
     * Sets the value of the encoded20Bit property.
     * 
     * @param value
     *     allowed object is
     *     {@link NumericBitPresentationType.Encoded20Bit }
     *     
     */
    public void setEncoded20Bit(NumericBitPresentationType.Encoded20Bit value) {
        this.encoded20Bit = value;
    }

    public boolean isSetEncoded20Bit() {
        return (this.encoded20Bit!= null);
    }

    /**
     * Gets the value of the encoded21Bit property.
     * 
     * @return
     *     possible object is
     *     {@link NumericBitPresentationType.Encoded21Bit }
     *     
     */
    public NumericBitPresentationType.Encoded21Bit getEncoded21Bit() {
        return encoded21Bit;
    }

    /**
     * Sets the value of the encoded21Bit property.
     * 
     * @param value
     *     allowed object is
     *     {@link NumericBitPresentationType.Encoded21Bit }
     *     
     */
    public void setEncoded21Bit(NumericBitPresentationType.Encoded21Bit value) {
        this.encoded21Bit = value;
    }

    public boolean isSetEncoded21Bit() {
        return (this.encoded21Bit!= null);
    }

    /**
     * Gets the value of the encoded23Bit property.
     * 
     * @return
     *     possible object is
     *     {@link NumericBitPresentationType.Encoded23Bit }
     *     
     */
    public NumericBitPresentationType.Encoded23Bit getEncoded23Bit() {
        return encoded23Bit;
    }

    /**
     * Sets the value of the encoded23Bit property.
     * 
     * @param value
     *     allowed object is
     *     {@link NumericBitPresentationType.Encoded23Bit }
     *     
     */
    public void setEncoded23Bit(NumericBitPresentationType.Encoded23Bit value) {
        this.encoded23Bit = value;
    }

    public boolean isSetEncoded23Bit() {
        return (this.encoded23Bit!= null);
    }

    /**
     * Gets the value of the encoded25Bit property.
     * 
     * @return
     *     possible object is
     *     {@link NumericBitPresentationType.Encoded25Bit }
     *     
     */
    public NumericBitPresentationType.Encoded25Bit getEncoded25Bit() {
        return encoded25Bit;
    }

    /**
     * Sets the value of the encoded25Bit property.
     * 
     * @param value
     *     allowed object is
     *     {@link NumericBitPresentationType.Encoded25Bit }
     *     
     */
    public void setEncoded25Bit(NumericBitPresentationType.Encoded25Bit value) {
        this.encoded25Bit = value;
    }

    public boolean isSetEncoded25Bit() {
        return (this.encoded25Bit!= null);
    }

    /**
     * Gets the value of the encoded31Bit property.
     * 
     * @return
     *     possible object is
     *     {@link NumericBitPresentationType.Encoded31Bit }
     *     
     */
    public NumericBitPresentationType.Encoded31Bit getEncoded31Bit() {
        return encoded31Bit;
    }

    /**
     * Sets the value of the encoded31Bit property.
     * 
     * @param value
     *     allowed object is
     *     {@link NumericBitPresentationType.Encoded31Bit }
     *     
     */
    public void setEncoded31Bit(NumericBitPresentationType.Encoded31Bit value) {
        this.encoded31Bit = value;
    }

    public boolean isSetEncoded31Bit() {
        return (this.encoded31Bit!= null);
    }

    public String toString() {
        final ToStringStrategy2 strategy = JAXBToStringStrategy.INSTANCE;
        final StringBuilder buffer = new StringBuilder();
        append(null, buffer, strategy);
        return buffer.toString();
    }

    public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy2 strategy) {
        strategy.appendStart(locator, this, buffer);
        appendFields(locator, buffer, strategy);
        strategy.appendEnd(locator, this, buffer);
        return buffer;
    }

    public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy2 strategy) {
        {
            NumericBitPresentationType.Encoded20Bit theEncoded20Bit;
            theEncoded20Bit = this.getEncoded20Bit();
            strategy.appendField(locator, this, "encoded20Bit", buffer, theEncoded20Bit, this.isSetEncoded20Bit());
        }
        {
            NumericBitPresentationType.Encoded21Bit theEncoded21Bit;
            theEncoded21Bit = this.getEncoded21Bit();
            strategy.appendField(locator, this, "encoded21Bit", buffer, theEncoded21Bit, this.isSetEncoded21Bit());
        }
        {
            NumericBitPresentationType.Encoded23Bit theEncoded23Bit;
            theEncoded23Bit = this.getEncoded23Bit();
            strategy.appendField(locator, this, "encoded23Bit", buffer, theEncoded23Bit, this.isSetEncoded23Bit());
        }
        {
            NumericBitPresentationType.Encoded25Bit theEncoded25Bit;
            theEncoded25Bit = this.getEncoded25Bit();
            strategy.appendField(locator, this, "encoded25Bit", buffer, theEncoded25Bit, this.isSetEncoded25Bit());
        }
        {
            NumericBitPresentationType.Encoded31Bit theEncoded31Bit;
            theEncoded31Bit = this.getEncoded31Bit();
            strategy.appendField(locator, this, "encoded31Bit", buffer, theEncoded31Bit, this.isSetEncoded31Bit());
        }
        return buffer;
    }

    public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy2 strategy) {
        if ((object == null)||(this.getClass()!= object.getClass())) {
            return false;
        }
        if (this == object) {
            return true;
        }
        final NumericBitPresentationType that = ((NumericBitPresentationType) object);
        {
            NumericBitPresentationType.Encoded20Bit lhsEncoded20Bit;
            lhsEncoded20Bit = this.getEncoded20Bit();
            NumericBitPresentationType.Encoded20Bit rhsEncoded20Bit;
            rhsEncoded20Bit = that.getEncoded20Bit();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "encoded20Bit", lhsEncoded20Bit), LocatorUtils.property(thatLocator, "encoded20Bit", rhsEncoded20Bit), lhsEncoded20Bit, rhsEncoded20Bit, this.isSetEncoded20Bit(), that.isSetEncoded20Bit())) {
                return false;
            }
        }
        {
            NumericBitPresentationType.Encoded21Bit lhsEncoded21Bit;
            lhsEncoded21Bit = this.getEncoded21Bit();
            NumericBitPresentationType.Encoded21Bit rhsEncoded21Bit;
            rhsEncoded21Bit = that.getEncoded21Bit();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "encoded21Bit", lhsEncoded21Bit), LocatorUtils.property(thatLocator, "encoded21Bit", rhsEncoded21Bit), lhsEncoded21Bit, rhsEncoded21Bit, this.isSetEncoded21Bit(), that.isSetEncoded21Bit())) {
                return false;
            }
        }
        {
            NumericBitPresentationType.Encoded23Bit lhsEncoded23Bit;
            lhsEncoded23Bit = this.getEncoded23Bit();
            NumericBitPresentationType.Encoded23Bit rhsEncoded23Bit;
            rhsEncoded23Bit = that.getEncoded23Bit();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "encoded23Bit", lhsEncoded23Bit), LocatorUtils.property(thatLocator, "encoded23Bit", rhsEncoded23Bit), lhsEncoded23Bit, rhsEncoded23Bit, this.isSetEncoded23Bit(), that.isSetEncoded23Bit())) {
                return false;
            }
        }
        {
            NumericBitPresentationType.Encoded25Bit lhsEncoded25Bit;
            lhsEncoded25Bit = this.getEncoded25Bit();
            NumericBitPresentationType.Encoded25Bit rhsEncoded25Bit;
            rhsEncoded25Bit = that.getEncoded25Bit();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "encoded25Bit", lhsEncoded25Bit), LocatorUtils.property(thatLocator, "encoded25Bit", rhsEncoded25Bit), lhsEncoded25Bit, rhsEncoded25Bit, this.isSetEncoded25Bit(), that.isSetEncoded25Bit())) {
                return false;
            }
        }
        {
            NumericBitPresentationType.Encoded31Bit lhsEncoded31Bit;
            lhsEncoded31Bit = this.getEncoded31Bit();
            NumericBitPresentationType.Encoded31Bit rhsEncoded31Bit;
            rhsEncoded31Bit = that.getEncoded31Bit();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "encoded31Bit", lhsEncoded31Bit), LocatorUtils.property(thatLocator, "encoded31Bit", rhsEncoded31Bit), lhsEncoded31Bit, rhsEncoded31Bit, this.isSetEncoded31Bit(), that.isSetEncoded31Bit())) {
                return false;
            }
        }
        return true;
    }

    public boolean equals(Object object) {
        final EqualsStrategy2 strategy = JAXBEqualsStrategy.INSTANCE;
        return equals(null, null, object, strategy);
    }

    public int hashCode(ObjectLocator locator, HashCodeStrategy2 strategy) {
        int currentHashCode = 1;
        {
            NumericBitPresentationType.Encoded20Bit theEncoded20Bit;
            theEncoded20Bit = this.getEncoded20Bit();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "encoded20Bit", theEncoded20Bit), currentHashCode, theEncoded20Bit, this.isSetEncoded20Bit());
        }
        {
            NumericBitPresentationType.Encoded21Bit theEncoded21Bit;
            theEncoded21Bit = this.getEncoded21Bit();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "encoded21Bit", theEncoded21Bit), currentHashCode, theEncoded21Bit, this.isSetEncoded21Bit());
        }
        {
            NumericBitPresentationType.Encoded23Bit theEncoded23Bit;
            theEncoded23Bit = this.getEncoded23Bit();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "encoded23Bit", theEncoded23Bit), currentHashCode, theEncoded23Bit, this.isSetEncoded23Bit());
        }
        {
            NumericBitPresentationType.Encoded25Bit theEncoded25Bit;
            theEncoded25Bit = this.getEncoded25Bit();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "encoded25Bit", theEncoded25Bit), currentHashCode, theEncoded25Bit, this.isSetEncoded25Bit());
        }
        {
            NumericBitPresentationType.Encoded31Bit theEncoded31Bit;
            theEncoded31Bit = this.getEncoded31Bit();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "encoded31Bit", theEncoded31Bit), currentHashCode, theEncoded31Bit, this.isSetEncoded31Bit());
        }
        return currentHashCode;
    }

    public int hashCode() {
        final HashCodeStrategy2 strategy = JAXBHashCodeStrategy.INSTANCE;
        return this.hashCode(null, strategy);
    }

    public Object clone() {
        return copyTo(createNewInstance());
    }

    public Object copyTo(Object target) {
        final CopyStrategy2 strategy = JAXBCopyStrategy.INSTANCE;
        return copyTo(null, target, strategy);
    }

    public Object copyTo(ObjectLocator locator, Object target, CopyStrategy2 strategy) {
        final Object draftCopy = ((target == null)?createNewInstance():target);
        if (draftCopy instanceof NumericBitPresentationType) {
            final NumericBitPresentationType copy = ((NumericBitPresentationType) draftCopy);
            {
                Boolean encoded20BitShouldBeCopiedAndSet = strategy.shouldBeCopiedAndSet(locator, this.isSetEncoded20Bit());
                if (encoded20BitShouldBeCopiedAndSet == Boolean.TRUE) {
                    NumericBitPresentationType.Encoded20Bit sourceEncoded20Bit;
                    sourceEncoded20Bit = this.getEncoded20Bit();
                    NumericBitPresentationType.Encoded20Bit copyEncoded20Bit = ((NumericBitPresentationType.Encoded20Bit) strategy.copy(LocatorUtils.property(locator, "encoded20Bit", sourceEncoded20Bit), sourceEncoded20Bit, this.isSetEncoded20Bit()));
                    copy.setEncoded20Bit(copyEncoded20Bit);
                } else {
                    if (encoded20BitShouldBeCopiedAndSet == Boolean.FALSE) {
                        copy.encoded20Bit = null;
                    }
                }
            }
            {
                Boolean encoded21BitShouldBeCopiedAndSet = strategy.shouldBeCopiedAndSet(locator, this.isSetEncoded21Bit());
                if (encoded21BitShouldBeCopiedAndSet == Boolean.TRUE) {
                    NumericBitPresentationType.Encoded21Bit sourceEncoded21Bit;
                    sourceEncoded21Bit = this.getEncoded21Bit();
                    NumericBitPresentationType.Encoded21Bit copyEncoded21Bit = ((NumericBitPresentationType.Encoded21Bit) strategy.copy(LocatorUtils.property(locator, "encoded21Bit", sourceEncoded21Bit), sourceEncoded21Bit, this.isSetEncoded21Bit()));
                    copy.setEncoded21Bit(copyEncoded21Bit);
                } else {
                    if (encoded21BitShouldBeCopiedAndSet == Boolean.FALSE) {
                        copy.encoded21Bit = null;
                    }
                }
            }
            {
                Boolean encoded23BitShouldBeCopiedAndSet = strategy.shouldBeCopiedAndSet(locator, this.isSetEncoded23Bit());
                if (encoded23BitShouldBeCopiedAndSet == Boolean.TRUE) {
                    NumericBitPresentationType.Encoded23Bit sourceEncoded23Bit;
                    sourceEncoded23Bit = this.getEncoded23Bit();
                    NumericBitPresentationType.Encoded23Bit copyEncoded23Bit = ((NumericBitPresentationType.Encoded23Bit) strategy.copy(LocatorUtils.property(locator, "encoded23Bit", sourceEncoded23Bit), sourceEncoded23Bit, this.isSetEncoded23Bit()));
                    copy.setEncoded23Bit(copyEncoded23Bit);
                } else {
                    if (encoded23BitShouldBeCopiedAndSet == Boolean.FALSE) {
                        copy.encoded23Bit = null;
                    }
                }
            }
            {
                Boolean encoded25BitShouldBeCopiedAndSet = strategy.shouldBeCopiedAndSet(locator, this.isSetEncoded25Bit());
                if (encoded25BitShouldBeCopiedAndSet == Boolean.TRUE) {
                    NumericBitPresentationType.Encoded25Bit sourceEncoded25Bit;
                    sourceEncoded25Bit = this.getEncoded25Bit();
                    NumericBitPresentationType.Encoded25Bit copyEncoded25Bit = ((NumericBitPresentationType.Encoded25Bit) strategy.copy(LocatorUtils.property(locator, "encoded25Bit", sourceEncoded25Bit), sourceEncoded25Bit, this.isSetEncoded25Bit()));
                    copy.setEncoded25Bit(copyEncoded25Bit);
                } else {
                    if (encoded25BitShouldBeCopiedAndSet == Boolean.FALSE) {
                        copy.encoded25Bit = null;
                    }
                }
            }
            {
                Boolean encoded31BitShouldBeCopiedAndSet = strategy.shouldBeCopiedAndSet(locator, this.isSetEncoded31Bit());
                if (encoded31BitShouldBeCopiedAndSet == Boolean.TRUE) {
                    NumericBitPresentationType.Encoded31Bit sourceEncoded31Bit;
                    sourceEncoded31Bit = this.getEncoded31Bit();
                    NumericBitPresentationType.Encoded31Bit copyEncoded31Bit = ((NumericBitPresentationType.Encoded31Bit) strategy.copy(LocatorUtils.property(locator, "encoded31Bit", sourceEncoded31Bit), sourceEncoded31Bit, this.isSetEncoded31Bit()));
                    copy.setEncoded31Bit(copyEncoded31Bit);
                } else {
                    if (encoded31BitShouldBeCopiedAndSet == Boolean.FALSE) {
                        copy.encoded31Bit = null;
                    }
                }
            }
        }
        return draftCopy;
    }

    public Object createNewInstance() {
        return new NumericBitPresentationType();
    }

    public void mergeFrom(Object left, Object right) {
        final MergeStrategy2 strategy = JAXBMergeStrategy.INSTANCE;
        mergeFrom(null, null, left, right, strategy);
    }

    public void mergeFrom(ObjectLocator leftLocator, ObjectLocator rightLocator, Object left, Object right, MergeStrategy2 strategy) {
        if (right instanceof NumericBitPresentationType) {
            final NumericBitPresentationType target = this;
            final NumericBitPresentationType leftObject = ((NumericBitPresentationType) left);
            final NumericBitPresentationType rightObject = ((NumericBitPresentationType) right);
            {
                Boolean encoded20BitShouldBeMergedAndSet = strategy.shouldBeMergedAndSet(leftLocator, rightLocator, leftObject.isSetEncoded20Bit(), rightObject.isSetEncoded20Bit());
                if (encoded20BitShouldBeMergedAndSet == Boolean.TRUE) {
                    NumericBitPresentationType.Encoded20Bit lhsEncoded20Bit;
                    lhsEncoded20Bit = leftObject.getEncoded20Bit();
                    NumericBitPresentationType.Encoded20Bit rhsEncoded20Bit;
                    rhsEncoded20Bit = rightObject.getEncoded20Bit();
                    NumericBitPresentationType.Encoded20Bit mergedEncoded20Bit = ((NumericBitPresentationType.Encoded20Bit) strategy.merge(LocatorUtils.property(leftLocator, "encoded20Bit", lhsEncoded20Bit), LocatorUtils.property(rightLocator, "encoded20Bit", rhsEncoded20Bit), lhsEncoded20Bit, rhsEncoded20Bit, leftObject.isSetEncoded20Bit(), rightObject.isSetEncoded20Bit()));
                    target.setEncoded20Bit(mergedEncoded20Bit);
                } else {
                    if (encoded20BitShouldBeMergedAndSet == Boolean.FALSE) {
                        target.encoded20Bit = null;
                    }
                }
            }
            {
                Boolean encoded21BitShouldBeMergedAndSet = strategy.shouldBeMergedAndSet(leftLocator, rightLocator, leftObject.isSetEncoded21Bit(), rightObject.isSetEncoded21Bit());
                if (encoded21BitShouldBeMergedAndSet == Boolean.TRUE) {
                    NumericBitPresentationType.Encoded21Bit lhsEncoded21Bit;
                    lhsEncoded21Bit = leftObject.getEncoded21Bit();
                    NumericBitPresentationType.Encoded21Bit rhsEncoded21Bit;
                    rhsEncoded21Bit = rightObject.getEncoded21Bit();
                    NumericBitPresentationType.Encoded21Bit mergedEncoded21Bit = ((NumericBitPresentationType.Encoded21Bit) strategy.merge(LocatorUtils.property(leftLocator, "encoded21Bit", lhsEncoded21Bit), LocatorUtils.property(rightLocator, "encoded21Bit", rhsEncoded21Bit), lhsEncoded21Bit, rhsEncoded21Bit, leftObject.isSetEncoded21Bit(), rightObject.isSetEncoded21Bit()));
                    target.setEncoded21Bit(mergedEncoded21Bit);
                } else {
                    if (encoded21BitShouldBeMergedAndSet == Boolean.FALSE) {
                        target.encoded21Bit = null;
                    }
                }
            }
            {
                Boolean encoded23BitShouldBeMergedAndSet = strategy.shouldBeMergedAndSet(leftLocator, rightLocator, leftObject.isSetEncoded23Bit(), rightObject.isSetEncoded23Bit());
                if (encoded23BitShouldBeMergedAndSet == Boolean.TRUE) {
                    NumericBitPresentationType.Encoded23Bit lhsEncoded23Bit;
                    lhsEncoded23Bit = leftObject.getEncoded23Bit();
                    NumericBitPresentationType.Encoded23Bit rhsEncoded23Bit;
                    rhsEncoded23Bit = rightObject.getEncoded23Bit();
                    NumericBitPresentationType.Encoded23Bit mergedEncoded23Bit = ((NumericBitPresentationType.Encoded23Bit) strategy.merge(LocatorUtils.property(leftLocator, "encoded23Bit", lhsEncoded23Bit), LocatorUtils.property(rightLocator, "encoded23Bit", rhsEncoded23Bit), lhsEncoded23Bit, rhsEncoded23Bit, leftObject.isSetEncoded23Bit(), rightObject.isSetEncoded23Bit()));
                    target.setEncoded23Bit(mergedEncoded23Bit);
                } else {
                    if (encoded23BitShouldBeMergedAndSet == Boolean.FALSE) {
                        target.encoded23Bit = null;
                    }
                }
            }
            {
                Boolean encoded25BitShouldBeMergedAndSet = strategy.shouldBeMergedAndSet(leftLocator, rightLocator, leftObject.isSetEncoded25Bit(), rightObject.isSetEncoded25Bit());
                if (encoded25BitShouldBeMergedAndSet == Boolean.TRUE) {
                    NumericBitPresentationType.Encoded25Bit lhsEncoded25Bit;
                    lhsEncoded25Bit = leftObject.getEncoded25Bit();
                    NumericBitPresentationType.Encoded25Bit rhsEncoded25Bit;
                    rhsEncoded25Bit = rightObject.getEncoded25Bit();
                    NumericBitPresentationType.Encoded25Bit mergedEncoded25Bit = ((NumericBitPresentationType.Encoded25Bit) strategy.merge(LocatorUtils.property(leftLocator, "encoded25Bit", lhsEncoded25Bit), LocatorUtils.property(rightLocator, "encoded25Bit", rhsEncoded25Bit), lhsEncoded25Bit, rhsEncoded25Bit, leftObject.isSetEncoded25Bit(), rightObject.isSetEncoded25Bit()));
                    target.setEncoded25Bit(mergedEncoded25Bit);
                } else {
                    if (encoded25BitShouldBeMergedAndSet == Boolean.FALSE) {
                        target.encoded25Bit = null;
                    }
                }
            }
            {
                Boolean encoded31BitShouldBeMergedAndSet = strategy.shouldBeMergedAndSet(leftLocator, rightLocator, leftObject.isSetEncoded31Bit(), rightObject.isSetEncoded31Bit());
                if (encoded31BitShouldBeMergedAndSet == Boolean.TRUE) {
                    NumericBitPresentationType.Encoded31Bit lhsEncoded31Bit;
                    lhsEncoded31Bit = leftObject.getEncoded31Bit();
                    NumericBitPresentationType.Encoded31Bit rhsEncoded31Bit;
                    rhsEncoded31Bit = rightObject.getEncoded31Bit();
                    NumericBitPresentationType.Encoded31Bit mergedEncoded31Bit = ((NumericBitPresentationType.Encoded31Bit) strategy.merge(LocatorUtils.property(leftLocator, "encoded31Bit", lhsEncoded31Bit), LocatorUtils.property(rightLocator, "encoded31Bit", rhsEncoded31Bit), lhsEncoded31Bit, rhsEncoded31Bit, leftObject.isSetEncoded31Bit(), rightObject.isSetEncoded31Bit()));
                    target.setEncoded31Bit(mergedEncoded31Bit);
                } else {
                    if (encoded31BitShouldBeMergedAndSet == Boolean.FALSE) {
                        target.encoded31Bit = null;
                    }
                }
            }
        }
    }


    /**
     * <p>Java class for anonymous complex type.
     * 
     * <p>The following schema fragment specifies the expected content contained within this class.
     * 
     * <pre>
     * &lt;complexType&gt;
     *   &lt;complexContent&gt;
     *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
     *       &lt;sequence&gt;
     *         &lt;element name="latitude" type="{http://metadata.ces.mil/mdr/ns/GSIP/tspi/2.0/core}Latitude20BitType"/&gt;
     *         &lt;element name="longitude" type="{http://metadata.ces.mil/mdr/ns/GSIP/tspi/2.0/core}Longitude21BitType"/&gt;
     *       &lt;/sequence&gt;
     *     &lt;/restriction&gt;
     *   &lt;/complexContent&gt;
     * &lt;/complexType&gt;
     * </pre>
     * 
     * 
     */
    @XmlAccessorType(XmlAccessType.FIELD)
    @XmlType(name = "", propOrder = {
        "latitude",
        "longitude"
    })
    public static class Encoded20Bit implements Serializable, Cloneable, CopyTo2, Equals2, HashCode2, MergeFrom2, ToString2
    {

        private final static long serialVersionUID = 1L;
        @XmlElement(required = true)
        @XmlSchemaType(name = "anySimpleType")
        @NotNull(message = "Encoded20Bit.latitude {javax.validation.constraints.NotNull.message}")
        protected String latitude;
        @XmlElement(required = true)
        @XmlSchemaType(name = "anySimpleType")
        @NotNull(message = "Encoded20Bit.longitude {javax.validation.constraints.NotNull.message}")
        protected String longitude;

        /**
         * Gets the value of the latitude property.
         * 
         * @return
         *     possible object is
         *     {@link String }
         *     
         */
        public String getLatitude() {
            return latitude;
        }

        /**
         * Sets the value of the latitude property.
         * 
         * @param value
         *     allowed object is
         *     {@link String }
         *     
         */
        public void setLatitude(String value) {
            this.latitude = value;
        }

        public boolean isSetLatitude() {
            return (this.latitude!= null);
        }

        /**
         * Gets the value of the longitude property.
         * 
         * @return
         *     possible object is
         *     {@link String }
         *     
         */
        public String getLongitude() {
            return longitude;
        }

        /**
         * Sets the value of the longitude property.
         * 
         * @param value
         *     allowed object is
         *     {@link String }
         *     
         */
        public void setLongitude(String value) {
            this.longitude = value;
        }

        public boolean isSetLongitude() {
            return (this.longitude!= null);
        }

        public String toString() {
            final ToStringStrategy2 strategy = JAXBToStringStrategy.INSTANCE;
            final StringBuilder buffer = new StringBuilder();
            append(null, buffer, strategy);
            return buffer.toString();
        }

        public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy2 strategy) {
            strategy.appendStart(locator, this, buffer);
            appendFields(locator, buffer, strategy);
            strategy.appendEnd(locator, this, buffer);
            return buffer;
        }

        public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy2 strategy) {
            {
                String theLatitude;
                theLatitude = this.getLatitude();
                strategy.appendField(locator, this, "latitude", buffer, theLatitude, this.isSetLatitude());
            }
            {
                String theLongitude;
                theLongitude = this.getLongitude();
                strategy.appendField(locator, this, "longitude", buffer, theLongitude, this.isSetLongitude());
            }
            return buffer;
        }

        public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy2 strategy) {
            if ((object == null)||(this.getClass()!= object.getClass())) {
                return false;
            }
            if (this == object) {
                return true;
            }
            final NumericBitPresentationType.Encoded20Bit that = ((NumericBitPresentationType.Encoded20Bit) object);
            {
                String lhsLatitude;
                lhsLatitude = this.getLatitude();
                String rhsLatitude;
                rhsLatitude = that.getLatitude();
                if (!strategy.equals(LocatorUtils.property(thisLocator, "latitude", lhsLatitude), LocatorUtils.property(thatLocator, "latitude", rhsLatitude), lhsLatitude, rhsLatitude, this.isSetLatitude(), that.isSetLatitude())) {
                    return false;
                }
            }
            {
                String lhsLongitude;
                lhsLongitude = this.getLongitude();
                String rhsLongitude;
                rhsLongitude = that.getLongitude();
                if (!strategy.equals(LocatorUtils.property(thisLocator, "longitude", lhsLongitude), LocatorUtils.property(thatLocator, "longitude", rhsLongitude), lhsLongitude, rhsLongitude, this.isSetLongitude(), that.isSetLongitude())) {
                    return false;
                }
            }
            return true;
        }

        public boolean equals(Object object) {
            final EqualsStrategy2 strategy = JAXBEqualsStrategy.INSTANCE;
            return equals(null, null, object, strategy);
        }

        public int hashCode(ObjectLocator locator, HashCodeStrategy2 strategy) {
            int currentHashCode = 1;
            {
                String theLatitude;
                theLatitude = this.getLatitude();
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "latitude", theLatitude), currentHashCode, theLatitude, this.isSetLatitude());
            }
            {
                String theLongitude;
                theLongitude = this.getLongitude();
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "longitude", theLongitude), currentHashCode, theLongitude, this.isSetLongitude());
            }
            return currentHashCode;
        }

        public int hashCode() {
            final HashCodeStrategy2 strategy = JAXBHashCodeStrategy.INSTANCE;
            return this.hashCode(null, strategy);
        }

        public Object clone() {
            return copyTo(createNewInstance());
        }

        public Object copyTo(Object target) {
            final CopyStrategy2 strategy = JAXBCopyStrategy.INSTANCE;
            return copyTo(null, target, strategy);
        }

        public Object copyTo(ObjectLocator locator, Object target, CopyStrategy2 strategy) {
            final Object draftCopy = ((target == null)?createNewInstance():target);
            if (draftCopy instanceof NumericBitPresentationType.Encoded20Bit) {
                final NumericBitPresentationType.Encoded20Bit copy = ((NumericBitPresentationType.Encoded20Bit) draftCopy);
                {
                    Boolean latitudeShouldBeCopiedAndSet = strategy.shouldBeCopiedAndSet(locator, this.isSetLatitude());
                    if (latitudeShouldBeCopiedAndSet == Boolean.TRUE) {
                        String sourceLatitude;
                        sourceLatitude = this.getLatitude();
                        String copyLatitude = ((String) strategy.copy(LocatorUtils.property(locator, "latitude", sourceLatitude), sourceLatitude, this.isSetLatitude()));
                        copy.setLatitude(copyLatitude);
                    } else {
                        if (latitudeShouldBeCopiedAndSet == Boolean.FALSE) {
                            copy.latitude = null;
                        }
                    }
                }
                {
                    Boolean longitudeShouldBeCopiedAndSet = strategy.shouldBeCopiedAndSet(locator, this.isSetLongitude());
                    if (longitudeShouldBeCopiedAndSet == Boolean.TRUE) {
                        String sourceLongitude;
                        sourceLongitude = this.getLongitude();
                        String copyLongitude = ((String) strategy.copy(LocatorUtils.property(locator, "longitude", sourceLongitude), sourceLongitude, this.isSetLongitude()));
                        copy.setLongitude(copyLongitude);
                    } else {
                        if (longitudeShouldBeCopiedAndSet == Boolean.FALSE) {
                            copy.longitude = null;
                        }
                    }
                }
            }
            return draftCopy;
        }

        public Object createNewInstance() {
            return new NumericBitPresentationType.Encoded20Bit();
        }

        public void mergeFrom(Object left, Object right) {
            final MergeStrategy2 strategy = JAXBMergeStrategy.INSTANCE;
            mergeFrom(null, null, left, right, strategy);
        }

        public void mergeFrom(ObjectLocator leftLocator, ObjectLocator rightLocator, Object left, Object right, MergeStrategy2 strategy) {
            if (right instanceof NumericBitPresentationType.Encoded20Bit) {
                final NumericBitPresentationType.Encoded20Bit target = this;
                final NumericBitPresentationType.Encoded20Bit leftObject = ((NumericBitPresentationType.Encoded20Bit) left);
                final NumericBitPresentationType.Encoded20Bit rightObject = ((NumericBitPresentationType.Encoded20Bit) right);
                {
                    Boolean latitudeShouldBeMergedAndSet = strategy.shouldBeMergedAndSet(leftLocator, rightLocator, leftObject.isSetLatitude(), rightObject.isSetLatitude());
                    if (latitudeShouldBeMergedAndSet == Boolean.TRUE) {
                        String lhsLatitude;
                        lhsLatitude = leftObject.getLatitude();
                        String rhsLatitude;
                        rhsLatitude = rightObject.getLatitude();
                        String mergedLatitude = ((String) strategy.merge(LocatorUtils.property(leftLocator, "latitude", lhsLatitude), LocatorUtils.property(rightLocator, "latitude", rhsLatitude), lhsLatitude, rhsLatitude, leftObject.isSetLatitude(), rightObject.isSetLatitude()));
                        target.setLatitude(mergedLatitude);
                    } else {
                        if (latitudeShouldBeMergedAndSet == Boolean.FALSE) {
                            target.latitude = null;
                        }
                    }
                }
                {
                    Boolean longitudeShouldBeMergedAndSet = strategy.shouldBeMergedAndSet(leftLocator, rightLocator, leftObject.isSetLongitude(), rightObject.isSetLongitude());
                    if (longitudeShouldBeMergedAndSet == Boolean.TRUE) {
                        String lhsLongitude;
                        lhsLongitude = leftObject.getLongitude();
                        String rhsLongitude;
                        rhsLongitude = rightObject.getLongitude();
                        String mergedLongitude = ((String) strategy.merge(LocatorUtils.property(leftLocator, "longitude", lhsLongitude), LocatorUtils.property(rightLocator, "longitude", rhsLongitude), lhsLongitude, rhsLongitude, leftObject.isSetLongitude(), rightObject.isSetLongitude()));
                        target.setLongitude(mergedLongitude);
                    } else {
                        if (longitudeShouldBeMergedAndSet == Boolean.FALSE) {
                            target.longitude = null;
                        }
                    }
                }
            }
        }

    }


    /**
     * <p>Java class for anonymous complex type.
     * 
     * <p>The following schema fragment specifies the expected content contained within this class.
     * 
     * <pre>
     * &lt;complexType&gt;
     *   &lt;complexContent&gt;
     *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
     *       &lt;sequence&gt;
     *         &lt;element name="latitude" type="{http://metadata.ces.mil/mdr/ns/GSIP/tspi/2.0/core}Latitude21BitType"/&gt;
     *         &lt;element name="longitude" type="{http://metadata.ces.mil/mdr/ns/GSIP/tspi/2.0/core}Longitude22BitType"/&gt;
     *       &lt;/sequence&gt;
     *     &lt;/restriction&gt;
     *   &lt;/complexContent&gt;
     * &lt;/complexType&gt;
     * </pre>
     * 
     * 
     */
    @XmlAccessorType(XmlAccessType.FIELD)
    @XmlType(name = "", propOrder = {
        "latitude",
        "longitude"
    })
    public static class Encoded21Bit implements Serializable, Cloneable, CopyTo2, Equals2, HashCode2, MergeFrom2, ToString2
    {

        private final static long serialVersionUID = 1L;
        @XmlElement(required = true)
        @XmlSchemaType(name = "anySimpleType")
        @NotNull(message = "Encoded21Bit.latitude {javax.validation.constraints.NotNull.message}")
        protected String latitude;
        @XmlElement(required = true)
        @XmlSchemaType(name = "anySimpleType")
        @NotNull(message = "Encoded21Bit.longitude {javax.validation.constraints.NotNull.message}")
        protected String longitude;

        /**
         * Gets the value of the latitude property.
         * 
         * @return
         *     possible object is
         *     {@link String }
         *     
         */
        public String getLatitude() {
            return latitude;
        }

        /**
         * Sets the value of the latitude property.
         * 
         * @param value
         *     allowed object is
         *     {@link String }
         *     
         */
        public void setLatitude(String value) {
            this.latitude = value;
        }

        public boolean isSetLatitude() {
            return (this.latitude!= null);
        }

        /**
         * Gets the value of the longitude property.
         * 
         * @return
         *     possible object is
         *     {@link String }
         *     
         */
        public String getLongitude() {
            return longitude;
        }

        /**
         * Sets the value of the longitude property.
         * 
         * @param value
         *     allowed object is
         *     {@link String }
         *     
         */
        public void setLongitude(String value) {
            this.longitude = value;
        }

        public boolean isSetLongitude() {
            return (this.longitude!= null);
        }

        public String toString() {
            final ToStringStrategy2 strategy = JAXBToStringStrategy.INSTANCE;
            final StringBuilder buffer = new StringBuilder();
            append(null, buffer, strategy);
            return buffer.toString();
        }

        public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy2 strategy) {
            strategy.appendStart(locator, this, buffer);
            appendFields(locator, buffer, strategy);
            strategy.appendEnd(locator, this, buffer);
            return buffer;
        }

        public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy2 strategy) {
            {
                String theLatitude;
                theLatitude = this.getLatitude();
                strategy.appendField(locator, this, "latitude", buffer, theLatitude, this.isSetLatitude());
            }
            {
                String theLongitude;
                theLongitude = this.getLongitude();
                strategy.appendField(locator, this, "longitude", buffer, theLongitude, this.isSetLongitude());
            }
            return buffer;
        }

        public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy2 strategy) {
            if ((object == null)||(this.getClass()!= object.getClass())) {
                return false;
            }
            if (this == object) {
                return true;
            }
            final NumericBitPresentationType.Encoded21Bit that = ((NumericBitPresentationType.Encoded21Bit) object);
            {
                String lhsLatitude;
                lhsLatitude = this.getLatitude();
                String rhsLatitude;
                rhsLatitude = that.getLatitude();
                if (!strategy.equals(LocatorUtils.property(thisLocator, "latitude", lhsLatitude), LocatorUtils.property(thatLocator, "latitude", rhsLatitude), lhsLatitude, rhsLatitude, this.isSetLatitude(), that.isSetLatitude())) {
                    return false;
                }
            }
            {
                String lhsLongitude;
                lhsLongitude = this.getLongitude();
                String rhsLongitude;
                rhsLongitude = that.getLongitude();
                if (!strategy.equals(LocatorUtils.property(thisLocator, "longitude", lhsLongitude), LocatorUtils.property(thatLocator, "longitude", rhsLongitude), lhsLongitude, rhsLongitude, this.isSetLongitude(), that.isSetLongitude())) {
                    return false;
                }
            }
            return true;
        }

        public boolean equals(Object object) {
            final EqualsStrategy2 strategy = JAXBEqualsStrategy.INSTANCE;
            return equals(null, null, object, strategy);
        }

        public int hashCode(ObjectLocator locator, HashCodeStrategy2 strategy) {
            int currentHashCode = 1;
            {
                String theLatitude;
                theLatitude = this.getLatitude();
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "latitude", theLatitude), currentHashCode, theLatitude, this.isSetLatitude());
            }
            {
                String theLongitude;
                theLongitude = this.getLongitude();
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "longitude", theLongitude), currentHashCode, theLongitude, this.isSetLongitude());
            }
            return currentHashCode;
        }

        public int hashCode() {
            final HashCodeStrategy2 strategy = JAXBHashCodeStrategy.INSTANCE;
            return this.hashCode(null, strategy);
        }

        public Object clone() {
            return copyTo(createNewInstance());
        }

        public Object copyTo(Object target) {
            final CopyStrategy2 strategy = JAXBCopyStrategy.INSTANCE;
            return copyTo(null, target, strategy);
        }

        public Object copyTo(ObjectLocator locator, Object target, CopyStrategy2 strategy) {
            final Object draftCopy = ((target == null)?createNewInstance():target);
            if (draftCopy instanceof NumericBitPresentationType.Encoded21Bit) {
                final NumericBitPresentationType.Encoded21Bit copy = ((NumericBitPresentationType.Encoded21Bit) draftCopy);
                {
                    Boolean latitudeShouldBeCopiedAndSet = strategy.shouldBeCopiedAndSet(locator, this.isSetLatitude());
                    if (latitudeShouldBeCopiedAndSet == Boolean.TRUE) {
                        String sourceLatitude;
                        sourceLatitude = this.getLatitude();
                        String copyLatitude = ((String) strategy.copy(LocatorUtils.property(locator, "latitude", sourceLatitude), sourceLatitude, this.isSetLatitude()));
                        copy.setLatitude(copyLatitude);
                    } else {
                        if (latitudeShouldBeCopiedAndSet == Boolean.FALSE) {
                            copy.latitude = null;
                        }
                    }
                }
                {
                    Boolean longitudeShouldBeCopiedAndSet = strategy.shouldBeCopiedAndSet(locator, this.isSetLongitude());
                    if (longitudeShouldBeCopiedAndSet == Boolean.TRUE) {
                        String sourceLongitude;
                        sourceLongitude = this.getLongitude();
                        String copyLongitude = ((String) strategy.copy(LocatorUtils.property(locator, "longitude", sourceLongitude), sourceLongitude, this.isSetLongitude()));
                        copy.setLongitude(copyLongitude);
                    } else {
                        if (longitudeShouldBeCopiedAndSet == Boolean.FALSE) {
                            copy.longitude = null;
                        }
                    }
                }
            }
            return draftCopy;
        }

        public Object createNewInstance() {
            return new NumericBitPresentationType.Encoded21Bit();
        }

        public void mergeFrom(Object left, Object right) {
            final MergeStrategy2 strategy = JAXBMergeStrategy.INSTANCE;
            mergeFrom(null, null, left, right, strategy);
        }

        public void mergeFrom(ObjectLocator leftLocator, ObjectLocator rightLocator, Object left, Object right, MergeStrategy2 strategy) {
            if (right instanceof NumericBitPresentationType.Encoded21Bit) {
                final NumericBitPresentationType.Encoded21Bit target = this;
                final NumericBitPresentationType.Encoded21Bit leftObject = ((NumericBitPresentationType.Encoded21Bit) left);
                final NumericBitPresentationType.Encoded21Bit rightObject = ((NumericBitPresentationType.Encoded21Bit) right);
                {
                    Boolean latitudeShouldBeMergedAndSet = strategy.shouldBeMergedAndSet(leftLocator, rightLocator, leftObject.isSetLatitude(), rightObject.isSetLatitude());
                    if (latitudeShouldBeMergedAndSet == Boolean.TRUE) {
                        String lhsLatitude;
                        lhsLatitude = leftObject.getLatitude();
                        String rhsLatitude;
                        rhsLatitude = rightObject.getLatitude();
                        String mergedLatitude = ((String) strategy.merge(LocatorUtils.property(leftLocator, "latitude", lhsLatitude), LocatorUtils.property(rightLocator, "latitude", rhsLatitude), lhsLatitude, rhsLatitude, leftObject.isSetLatitude(), rightObject.isSetLatitude()));
                        target.setLatitude(mergedLatitude);
                    } else {
                        if (latitudeShouldBeMergedAndSet == Boolean.FALSE) {
                            target.latitude = null;
                        }
                    }
                }
                {
                    Boolean longitudeShouldBeMergedAndSet = strategy.shouldBeMergedAndSet(leftLocator, rightLocator, leftObject.isSetLongitude(), rightObject.isSetLongitude());
                    if (longitudeShouldBeMergedAndSet == Boolean.TRUE) {
                        String lhsLongitude;
                        lhsLongitude = leftObject.getLongitude();
                        String rhsLongitude;
                        rhsLongitude = rightObject.getLongitude();
                        String mergedLongitude = ((String) strategy.merge(LocatorUtils.property(leftLocator, "longitude", lhsLongitude), LocatorUtils.property(rightLocator, "longitude", rhsLongitude), lhsLongitude, rhsLongitude, leftObject.isSetLongitude(), rightObject.isSetLongitude()));
                        target.setLongitude(mergedLongitude);
                    } else {
                        if (longitudeShouldBeMergedAndSet == Boolean.FALSE) {
                            target.longitude = null;
                        }
                    }
                }
            }
        }

    }


    /**
     * <p>Java class for anonymous complex type.
     * 
     * <p>The following schema fragment specifies the expected content contained within this class.
     * 
     * <pre>
     * &lt;complexType&gt;
     *   &lt;complexContent&gt;
     *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
     *       &lt;sequence&gt;
     *         &lt;element name="latitude" type="{http://metadata.ces.mil/mdr/ns/GSIP/tspi/2.0/core}Latitude23BitType"/&gt;
     *         &lt;element name="longitude" type="{http://metadata.ces.mil/mdr/ns/GSIP/tspi/2.0/core}Longitude24BitType"/&gt;
     *       &lt;/sequence&gt;
     *     &lt;/restriction&gt;
     *   &lt;/complexContent&gt;
     * &lt;/complexType&gt;
     * </pre>
     * 
     * 
     */
    @XmlAccessorType(XmlAccessType.FIELD)
    @XmlType(name = "", propOrder = {
        "latitude",
        "longitude"
    })
    public static class Encoded23Bit implements Serializable, Cloneable, CopyTo2, Equals2, HashCode2, MergeFrom2, ToString2
    {

        private final static long serialVersionUID = 1L;
        @XmlElement(required = true)
        @XmlSchemaType(name = "anySimpleType")
        @NotNull(message = "Encoded23Bit.latitude {javax.validation.constraints.NotNull.message}")
        protected String latitude;
        @XmlElement(required = true)
        @XmlSchemaType(name = "anySimpleType")
        @NotNull(message = "Encoded23Bit.longitude {javax.validation.constraints.NotNull.message}")
        protected String longitude;

        /**
         * Gets the value of the latitude property.
         * 
         * @return
         *     possible object is
         *     {@link String }
         *     
         */
        public String getLatitude() {
            return latitude;
        }

        /**
         * Sets the value of the latitude property.
         * 
         * @param value
         *     allowed object is
         *     {@link String }
         *     
         */
        public void setLatitude(String value) {
            this.latitude = value;
        }

        public boolean isSetLatitude() {
            return (this.latitude!= null);
        }

        /**
         * Gets the value of the longitude property.
         * 
         * @return
         *     possible object is
         *     {@link String }
         *     
         */
        public String getLongitude() {
            return longitude;
        }

        /**
         * Sets the value of the longitude property.
         * 
         * @param value
         *     allowed object is
         *     {@link String }
         *     
         */
        public void setLongitude(String value) {
            this.longitude = value;
        }

        public boolean isSetLongitude() {
            return (this.longitude!= null);
        }

        public String toString() {
            final ToStringStrategy2 strategy = JAXBToStringStrategy.INSTANCE;
            final StringBuilder buffer = new StringBuilder();
            append(null, buffer, strategy);
            return buffer.toString();
        }

        public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy2 strategy) {
            strategy.appendStart(locator, this, buffer);
            appendFields(locator, buffer, strategy);
            strategy.appendEnd(locator, this, buffer);
            return buffer;
        }

        public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy2 strategy) {
            {
                String theLatitude;
                theLatitude = this.getLatitude();
                strategy.appendField(locator, this, "latitude", buffer, theLatitude, this.isSetLatitude());
            }
            {
                String theLongitude;
                theLongitude = this.getLongitude();
                strategy.appendField(locator, this, "longitude", buffer, theLongitude, this.isSetLongitude());
            }
            return buffer;
        }

        public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy2 strategy) {
            if ((object == null)||(this.getClass()!= object.getClass())) {
                return false;
            }
            if (this == object) {
                return true;
            }
            final NumericBitPresentationType.Encoded23Bit that = ((NumericBitPresentationType.Encoded23Bit) object);
            {
                String lhsLatitude;
                lhsLatitude = this.getLatitude();
                String rhsLatitude;
                rhsLatitude = that.getLatitude();
                if (!strategy.equals(LocatorUtils.property(thisLocator, "latitude", lhsLatitude), LocatorUtils.property(thatLocator, "latitude", rhsLatitude), lhsLatitude, rhsLatitude, this.isSetLatitude(), that.isSetLatitude())) {
                    return false;
                }
            }
            {
                String lhsLongitude;
                lhsLongitude = this.getLongitude();
                String rhsLongitude;
                rhsLongitude = that.getLongitude();
                if (!strategy.equals(LocatorUtils.property(thisLocator, "longitude", lhsLongitude), LocatorUtils.property(thatLocator, "longitude", rhsLongitude), lhsLongitude, rhsLongitude, this.isSetLongitude(), that.isSetLongitude())) {
                    return false;
                }
            }
            return true;
        }

        public boolean equals(Object object) {
            final EqualsStrategy2 strategy = JAXBEqualsStrategy.INSTANCE;
            return equals(null, null, object, strategy);
        }

        public int hashCode(ObjectLocator locator, HashCodeStrategy2 strategy) {
            int currentHashCode = 1;
            {
                String theLatitude;
                theLatitude = this.getLatitude();
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "latitude", theLatitude), currentHashCode, theLatitude, this.isSetLatitude());
            }
            {
                String theLongitude;
                theLongitude = this.getLongitude();
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "longitude", theLongitude), currentHashCode, theLongitude, this.isSetLongitude());
            }
            return currentHashCode;
        }

        public int hashCode() {
            final HashCodeStrategy2 strategy = JAXBHashCodeStrategy.INSTANCE;
            return this.hashCode(null, strategy);
        }

        public Object clone() {
            return copyTo(createNewInstance());
        }

        public Object copyTo(Object target) {
            final CopyStrategy2 strategy = JAXBCopyStrategy.INSTANCE;
            return copyTo(null, target, strategy);
        }

        public Object copyTo(ObjectLocator locator, Object target, CopyStrategy2 strategy) {
            final Object draftCopy = ((target == null)?createNewInstance():target);
            if (draftCopy instanceof NumericBitPresentationType.Encoded23Bit) {
                final NumericBitPresentationType.Encoded23Bit copy = ((NumericBitPresentationType.Encoded23Bit) draftCopy);
                {
                    Boolean latitudeShouldBeCopiedAndSet = strategy.shouldBeCopiedAndSet(locator, this.isSetLatitude());
                    if (latitudeShouldBeCopiedAndSet == Boolean.TRUE) {
                        String sourceLatitude;
                        sourceLatitude = this.getLatitude();
                        String copyLatitude = ((String) strategy.copy(LocatorUtils.property(locator, "latitude", sourceLatitude), sourceLatitude, this.isSetLatitude()));
                        copy.setLatitude(copyLatitude);
                    } else {
                        if (latitudeShouldBeCopiedAndSet == Boolean.FALSE) {
                            copy.latitude = null;
                        }
                    }
                }
                {
                    Boolean longitudeShouldBeCopiedAndSet = strategy.shouldBeCopiedAndSet(locator, this.isSetLongitude());
                    if (longitudeShouldBeCopiedAndSet == Boolean.TRUE) {
                        String sourceLongitude;
                        sourceLongitude = this.getLongitude();
                        String copyLongitude = ((String) strategy.copy(LocatorUtils.property(locator, "longitude", sourceLongitude), sourceLongitude, this.isSetLongitude()));
                        copy.setLongitude(copyLongitude);
                    } else {
                        if (longitudeShouldBeCopiedAndSet == Boolean.FALSE) {
                            copy.longitude = null;
                        }
                    }
                }
            }
            return draftCopy;
        }

        public Object createNewInstance() {
            return new NumericBitPresentationType.Encoded23Bit();
        }

        public void mergeFrom(Object left, Object right) {
            final MergeStrategy2 strategy = JAXBMergeStrategy.INSTANCE;
            mergeFrom(null, null, left, right, strategy);
        }

        public void mergeFrom(ObjectLocator leftLocator, ObjectLocator rightLocator, Object left, Object right, MergeStrategy2 strategy) {
            if (right instanceof NumericBitPresentationType.Encoded23Bit) {
                final NumericBitPresentationType.Encoded23Bit target = this;
                final NumericBitPresentationType.Encoded23Bit leftObject = ((NumericBitPresentationType.Encoded23Bit) left);
                final NumericBitPresentationType.Encoded23Bit rightObject = ((NumericBitPresentationType.Encoded23Bit) right);
                {
                    Boolean latitudeShouldBeMergedAndSet = strategy.shouldBeMergedAndSet(leftLocator, rightLocator, leftObject.isSetLatitude(), rightObject.isSetLatitude());
                    if (latitudeShouldBeMergedAndSet == Boolean.TRUE) {
                        String lhsLatitude;
                        lhsLatitude = leftObject.getLatitude();
                        String rhsLatitude;
                        rhsLatitude = rightObject.getLatitude();
                        String mergedLatitude = ((String) strategy.merge(LocatorUtils.property(leftLocator, "latitude", lhsLatitude), LocatorUtils.property(rightLocator, "latitude", rhsLatitude), lhsLatitude, rhsLatitude, leftObject.isSetLatitude(), rightObject.isSetLatitude()));
                        target.setLatitude(mergedLatitude);
                    } else {
                        if (latitudeShouldBeMergedAndSet == Boolean.FALSE) {
                            target.latitude = null;
                        }
                    }
                }
                {
                    Boolean longitudeShouldBeMergedAndSet = strategy.shouldBeMergedAndSet(leftLocator, rightLocator, leftObject.isSetLongitude(), rightObject.isSetLongitude());
                    if (longitudeShouldBeMergedAndSet == Boolean.TRUE) {
                        String lhsLongitude;
                        lhsLongitude = leftObject.getLongitude();
                        String rhsLongitude;
                        rhsLongitude = rightObject.getLongitude();
                        String mergedLongitude = ((String) strategy.merge(LocatorUtils.property(leftLocator, "longitude", lhsLongitude), LocatorUtils.property(rightLocator, "longitude", rhsLongitude), lhsLongitude, rhsLongitude, leftObject.isSetLongitude(), rightObject.isSetLongitude()));
                        target.setLongitude(mergedLongitude);
                    } else {
                        if (longitudeShouldBeMergedAndSet == Boolean.FALSE) {
                            target.longitude = null;
                        }
                    }
                }
            }
        }

    }


    /**
     * <p>Java class for anonymous complex type.
     * 
     * <p>The following schema fragment specifies the expected content contained within this class.
     * 
     * <pre>
     * &lt;complexType&gt;
     *   &lt;complexContent&gt;
     *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
     *       &lt;sequence&gt;
     *         &lt;element name="latitude" type="{http://metadata.ces.mil/mdr/ns/GSIP/tspi/2.0/core}Latitude25BitType"/&gt;
     *         &lt;element name="longitude" type="{http://metadata.ces.mil/mdr/ns/GSIP/tspi/2.0/core}Longitude26BitType"/&gt;
     *       &lt;/sequence&gt;
     *     &lt;/restriction&gt;
     *   &lt;/complexContent&gt;
     * &lt;/complexType&gt;
     * </pre>
     * 
     * 
     */
    @XmlAccessorType(XmlAccessType.FIELD)
    @XmlType(name = "", propOrder = {
        "latitude",
        "longitude"
    })
    public static class Encoded25Bit implements Serializable, Cloneable, CopyTo2, Equals2, HashCode2, MergeFrom2, ToString2
    {

        private final static long serialVersionUID = 1L;
        @XmlElement(required = true)
        @XmlSchemaType(name = "anySimpleType")
        @NotNull(message = "Encoded25Bit.latitude {javax.validation.constraints.NotNull.message}")
        protected String latitude;
        @XmlElement(required = true)
        @XmlSchemaType(name = "anySimpleType")
        @NotNull(message = "Encoded25Bit.longitude {javax.validation.constraints.NotNull.message}")
        protected String longitude;

        /**
         * Gets the value of the latitude property.
         * 
         * @return
         *     possible object is
         *     {@link String }
         *     
         */
        public String getLatitude() {
            return latitude;
        }

        /**
         * Sets the value of the latitude property.
         * 
         * @param value
         *     allowed object is
         *     {@link String }
         *     
         */
        public void setLatitude(String value) {
            this.latitude = value;
        }

        public boolean isSetLatitude() {
            return (this.latitude!= null);
        }

        /**
         * Gets the value of the longitude property.
         * 
         * @return
         *     possible object is
         *     {@link String }
         *     
         */
        public String getLongitude() {
            return longitude;
        }

        /**
         * Sets the value of the longitude property.
         * 
         * @param value
         *     allowed object is
         *     {@link String }
         *     
         */
        public void setLongitude(String value) {
            this.longitude = value;
        }

        public boolean isSetLongitude() {
            return (this.longitude!= null);
        }

        public String toString() {
            final ToStringStrategy2 strategy = JAXBToStringStrategy.INSTANCE;
            final StringBuilder buffer = new StringBuilder();
            append(null, buffer, strategy);
            return buffer.toString();
        }

        public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy2 strategy) {
            strategy.appendStart(locator, this, buffer);
            appendFields(locator, buffer, strategy);
            strategy.appendEnd(locator, this, buffer);
            return buffer;
        }

        public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy2 strategy) {
            {
                String theLatitude;
                theLatitude = this.getLatitude();
                strategy.appendField(locator, this, "latitude", buffer, theLatitude, this.isSetLatitude());
            }
            {
                String theLongitude;
                theLongitude = this.getLongitude();
                strategy.appendField(locator, this, "longitude", buffer, theLongitude, this.isSetLongitude());
            }
            return buffer;
        }

        public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy2 strategy) {
            if ((object == null)||(this.getClass()!= object.getClass())) {
                return false;
            }
            if (this == object) {
                return true;
            }
            final NumericBitPresentationType.Encoded25Bit that = ((NumericBitPresentationType.Encoded25Bit) object);
            {
                String lhsLatitude;
                lhsLatitude = this.getLatitude();
                String rhsLatitude;
                rhsLatitude = that.getLatitude();
                if (!strategy.equals(LocatorUtils.property(thisLocator, "latitude", lhsLatitude), LocatorUtils.property(thatLocator, "latitude", rhsLatitude), lhsLatitude, rhsLatitude, this.isSetLatitude(), that.isSetLatitude())) {
                    return false;
                }
            }
            {
                String lhsLongitude;
                lhsLongitude = this.getLongitude();
                String rhsLongitude;
                rhsLongitude = that.getLongitude();
                if (!strategy.equals(LocatorUtils.property(thisLocator, "longitude", lhsLongitude), LocatorUtils.property(thatLocator, "longitude", rhsLongitude), lhsLongitude, rhsLongitude, this.isSetLongitude(), that.isSetLongitude())) {
                    return false;
                }
            }
            return true;
        }

        public boolean equals(Object object) {
            final EqualsStrategy2 strategy = JAXBEqualsStrategy.INSTANCE;
            return equals(null, null, object, strategy);
        }

        public int hashCode(ObjectLocator locator, HashCodeStrategy2 strategy) {
            int currentHashCode = 1;
            {
                String theLatitude;
                theLatitude = this.getLatitude();
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "latitude", theLatitude), currentHashCode, theLatitude, this.isSetLatitude());
            }
            {
                String theLongitude;
                theLongitude = this.getLongitude();
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "longitude", theLongitude), currentHashCode, theLongitude, this.isSetLongitude());
            }
            return currentHashCode;
        }

        public int hashCode() {
            final HashCodeStrategy2 strategy = JAXBHashCodeStrategy.INSTANCE;
            return this.hashCode(null, strategy);
        }

        public Object clone() {
            return copyTo(createNewInstance());
        }

        public Object copyTo(Object target) {
            final CopyStrategy2 strategy = JAXBCopyStrategy.INSTANCE;
            return copyTo(null, target, strategy);
        }

        public Object copyTo(ObjectLocator locator, Object target, CopyStrategy2 strategy) {
            final Object draftCopy = ((target == null)?createNewInstance():target);
            if (draftCopy instanceof NumericBitPresentationType.Encoded25Bit) {
                final NumericBitPresentationType.Encoded25Bit copy = ((NumericBitPresentationType.Encoded25Bit) draftCopy);
                {
                    Boolean latitudeShouldBeCopiedAndSet = strategy.shouldBeCopiedAndSet(locator, this.isSetLatitude());
                    if (latitudeShouldBeCopiedAndSet == Boolean.TRUE) {
                        String sourceLatitude;
                        sourceLatitude = this.getLatitude();
                        String copyLatitude = ((String) strategy.copy(LocatorUtils.property(locator, "latitude", sourceLatitude), sourceLatitude, this.isSetLatitude()));
                        copy.setLatitude(copyLatitude);
                    } else {
                        if (latitudeShouldBeCopiedAndSet == Boolean.FALSE) {
                            copy.latitude = null;
                        }
                    }
                }
                {
                    Boolean longitudeShouldBeCopiedAndSet = strategy.shouldBeCopiedAndSet(locator, this.isSetLongitude());
                    if (longitudeShouldBeCopiedAndSet == Boolean.TRUE) {
                        String sourceLongitude;
                        sourceLongitude = this.getLongitude();
                        String copyLongitude = ((String) strategy.copy(LocatorUtils.property(locator, "longitude", sourceLongitude), sourceLongitude, this.isSetLongitude()));
                        copy.setLongitude(copyLongitude);
                    } else {
                        if (longitudeShouldBeCopiedAndSet == Boolean.FALSE) {
                            copy.longitude = null;
                        }
                    }
                }
            }
            return draftCopy;
        }

        public Object createNewInstance() {
            return new NumericBitPresentationType.Encoded25Bit();
        }

        public void mergeFrom(Object left, Object right) {
            final MergeStrategy2 strategy = JAXBMergeStrategy.INSTANCE;
            mergeFrom(null, null, left, right, strategy);
        }

        public void mergeFrom(ObjectLocator leftLocator, ObjectLocator rightLocator, Object left, Object right, MergeStrategy2 strategy) {
            if (right instanceof NumericBitPresentationType.Encoded25Bit) {
                final NumericBitPresentationType.Encoded25Bit target = this;
                final NumericBitPresentationType.Encoded25Bit leftObject = ((NumericBitPresentationType.Encoded25Bit) left);
                final NumericBitPresentationType.Encoded25Bit rightObject = ((NumericBitPresentationType.Encoded25Bit) right);
                {
                    Boolean latitudeShouldBeMergedAndSet = strategy.shouldBeMergedAndSet(leftLocator, rightLocator, leftObject.isSetLatitude(), rightObject.isSetLatitude());
                    if (latitudeShouldBeMergedAndSet == Boolean.TRUE) {
                        String lhsLatitude;
                        lhsLatitude = leftObject.getLatitude();
                        String rhsLatitude;
                        rhsLatitude = rightObject.getLatitude();
                        String mergedLatitude = ((String) strategy.merge(LocatorUtils.property(leftLocator, "latitude", lhsLatitude), LocatorUtils.property(rightLocator, "latitude", rhsLatitude), lhsLatitude, rhsLatitude, leftObject.isSetLatitude(), rightObject.isSetLatitude()));
                        target.setLatitude(mergedLatitude);
                    } else {
                        if (latitudeShouldBeMergedAndSet == Boolean.FALSE) {
                            target.latitude = null;
                        }
                    }
                }
                {
                    Boolean longitudeShouldBeMergedAndSet = strategy.shouldBeMergedAndSet(leftLocator, rightLocator, leftObject.isSetLongitude(), rightObject.isSetLongitude());
                    if (longitudeShouldBeMergedAndSet == Boolean.TRUE) {
                        String lhsLongitude;
                        lhsLongitude = leftObject.getLongitude();
                        String rhsLongitude;
                        rhsLongitude = rightObject.getLongitude();
                        String mergedLongitude = ((String) strategy.merge(LocatorUtils.property(leftLocator, "longitude", lhsLongitude), LocatorUtils.property(rightLocator, "longitude", rhsLongitude), lhsLongitude, rhsLongitude, leftObject.isSetLongitude(), rightObject.isSetLongitude()));
                        target.setLongitude(mergedLongitude);
                    } else {
                        if (longitudeShouldBeMergedAndSet == Boolean.FALSE) {
                            target.longitude = null;
                        }
                    }
                }
            }
        }

    }


    /**
     * <p>Java class for anonymous complex type.
     * 
     * <p>The following schema fragment specifies the expected content contained within this class.
     * 
     * <pre>
     * &lt;complexType&gt;
     *   &lt;complexContent&gt;
     *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
     *       &lt;sequence&gt;
     *         &lt;element name="latitude" type="{http://metadata.ces.mil/mdr/ns/GSIP/tspi/2.0/core}Latitude31BitType"/&gt;
     *         &lt;element name="longitude" type="{http://metadata.ces.mil/mdr/ns/GSIP/tspi/2.0/core}Longitude32BitType"/&gt;
     *       &lt;/sequence&gt;
     *     &lt;/restriction&gt;
     *   &lt;/complexContent&gt;
     * &lt;/complexType&gt;
     * </pre>
     * 
     * 
     */
    @XmlAccessorType(XmlAccessType.FIELD)
    @XmlType(name = "", propOrder = {
        "latitude",
        "longitude"
    })
    public static class Encoded31Bit implements Serializable, Cloneable, CopyTo2, Equals2, HashCode2, MergeFrom2, ToString2
    {

        private final static long serialVersionUID = 1L;
        @XmlElement(required = true)
        @XmlSchemaType(name = "anySimpleType")
        @NotNull(message = "Encoded31Bit.latitude {javax.validation.constraints.NotNull.message}")
        protected String latitude;
        @XmlElement(required = true)
        @XmlSchemaType(name = "anySimpleType")
        @NotNull(message = "Encoded31Bit.longitude {javax.validation.constraints.NotNull.message}")
        protected String longitude;

        /**
         * Gets the value of the latitude property.
         * 
         * @return
         *     possible object is
         *     {@link String }
         *     
         */
        public String getLatitude() {
            return latitude;
        }

        /**
         * Sets the value of the latitude property.
         * 
         * @param value
         *     allowed object is
         *     {@link String }
         *     
         */
        public void setLatitude(String value) {
            this.latitude = value;
        }

        public boolean isSetLatitude() {
            return (this.latitude!= null);
        }

        /**
         * Gets the value of the longitude property.
         * 
         * @return
         *     possible object is
         *     {@link String }
         *     
         */
        public String getLongitude() {
            return longitude;
        }

        /**
         * Sets the value of the longitude property.
         * 
         * @param value
         *     allowed object is
         *     {@link String }
         *     
         */
        public void setLongitude(String value) {
            this.longitude = value;
        }

        public boolean isSetLongitude() {
            return (this.longitude!= null);
        }

        public String toString() {
            final ToStringStrategy2 strategy = JAXBToStringStrategy.INSTANCE;
            final StringBuilder buffer = new StringBuilder();
            append(null, buffer, strategy);
            return buffer.toString();
        }

        public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy2 strategy) {
            strategy.appendStart(locator, this, buffer);
            appendFields(locator, buffer, strategy);
            strategy.appendEnd(locator, this, buffer);
            return buffer;
        }

        public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy2 strategy) {
            {
                String theLatitude;
                theLatitude = this.getLatitude();
                strategy.appendField(locator, this, "latitude", buffer, theLatitude, this.isSetLatitude());
            }
            {
                String theLongitude;
                theLongitude = this.getLongitude();
                strategy.appendField(locator, this, "longitude", buffer, theLongitude, this.isSetLongitude());
            }
            return buffer;
        }

        public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy2 strategy) {
            if ((object == null)||(this.getClass()!= object.getClass())) {
                return false;
            }
            if (this == object) {
                return true;
            }
            final NumericBitPresentationType.Encoded31Bit that = ((NumericBitPresentationType.Encoded31Bit) object);
            {
                String lhsLatitude;
                lhsLatitude = this.getLatitude();
                String rhsLatitude;
                rhsLatitude = that.getLatitude();
                if (!strategy.equals(LocatorUtils.property(thisLocator, "latitude", lhsLatitude), LocatorUtils.property(thatLocator, "latitude", rhsLatitude), lhsLatitude, rhsLatitude, this.isSetLatitude(), that.isSetLatitude())) {
                    return false;
                }
            }
            {
                String lhsLongitude;
                lhsLongitude = this.getLongitude();
                String rhsLongitude;
                rhsLongitude = that.getLongitude();
                if (!strategy.equals(LocatorUtils.property(thisLocator, "longitude", lhsLongitude), LocatorUtils.property(thatLocator, "longitude", rhsLongitude), lhsLongitude, rhsLongitude, this.isSetLongitude(), that.isSetLongitude())) {
                    return false;
                }
            }
            return true;
        }

        public boolean equals(Object object) {
            final EqualsStrategy2 strategy = JAXBEqualsStrategy.INSTANCE;
            return equals(null, null, object, strategy);
        }

        public int hashCode(ObjectLocator locator, HashCodeStrategy2 strategy) {
            int currentHashCode = 1;
            {
                String theLatitude;
                theLatitude = this.getLatitude();
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "latitude", theLatitude), currentHashCode, theLatitude, this.isSetLatitude());
            }
            {
                String theLongitude;
                theLongitude = this.getLongitude();
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "longitude", theLongitude), currentHashCode, theLongitude, this.isSetLongitude());
            }
            return currentHashCode;
        }

        public int hashCode() {
            final HashCodeStrategy2 strategy = JAXBHashCodeStrategy.INSTANCE;
            return this.hashCode(null, strategy);
        }

        public Object clone() {
            return copyTo(createNewInstance());
        }

        public Object copyTo(Object target) {
            final CopyStrategy2 strategy = JAXBCopyStrategy.INSTANCE;
            return copyTo(null, target, strategy);
        }

        public Object copyTo(ObjectLocator locator, Object target, CopyStrategy2 strategy) {
            final Object draftCopy = ((target == null)?createNewInstance():target);
            if (draftCopy instanceof NumericBitPresentationType.Encoded31Bit) {
                final NumericBitPresentationType.Encoded31Bit copy = ((NumericBitPresentationType.Encoded31Bit) draftCopy);
                {
                    Boolean latitudeShouldBeCopiedAndSet = strategy.shouldBeCopiedAndSet(locator, this.isSetLatitude());
                    if (latitudeShouldBeCopiedAndSet == Boolean.TRUE) {
                        String sourceLatitude;
                        sourceLatitude = this.getLatitude();
                        String copyLatitude = ((String) strategy.copy(LocatorUtils.property(locator, "latitude", sourceLatitude), sourceLatitude, this.isSetLatitude()));
                        copy.setLatitude(copyLatitude);
                    } else {
                        if (latitudeShouldBeCopiedAndSet == Boolean.FALSE) {
                            copy.latitude = null;
                        }
                    }
                }
                {
                    Boolean longitudeShouldBeCopiedAndSet = strategy.shouldBeCopiedAndSet(locator, this.isSetLongitude());
                    if (longitudeShouldBeCopiedAndSet == Boolean.TRUE) {
                        String sourceLongitude;
                        sourceLongitude = this.getLongitude();
                        String copyLongitude = ((String) strategy.copy(LocatorUtils.property(locator, "longitude", sourceLongitude), sourceLongitude, this.isSetLongitude()));
                        copy.setLongitude(copyLongitude);
                    } else {
                        if (longitudeShouldBeCopiedAndSet == Boolean.FALSE) {
                            copy.longitude = null;
                        }
                    }
                }
            }
            return draftCopy;
        }

        public Object createNewInstance() {
            return new NumericBitPresentationType.Encoded31Bit();
        }

        public void mergeFrom(Object left, Object right) {
            final MergeStrategy2 strategy = JAXBMergeStrategy.INSTANCE;
            mergeFrom(null, null, left, right, strategy);
        }

        public void mergeFrom(ObjectLocator leftLocator, ObjectLocator rightLocator, Object left, Object right, MergeStrategy2 strategy) {
            if (right instanceof NumericBitPresentationType.Encoded31Bit) {
                final NumericBitPresentationType.Encoded31Bit target = this;
                final NumericBitPresentationType.Encoded31Bit leftObject = ((NumericBitPresentationType.Encoded31Bit) left);
                final NumericBitPresentationType.Encoded31Bit rightObject = ((NumericBitPresentationType.Encoded31Bit) right);
                {
                    Boolean latitudeShouldBeMergedAndSet = strategy.shouldBeMergedAndSet(leftLocator, rightLocator, leftObject.isSetLatitude(), rightObject.isSetLatitude());
                    if (latitudeShouldBeMergedAndSet == Boolean.TRUE) {
                        String lhsLatitude;
                        lhsLatitude = leftObject.getLatitude();
                        String rhsLatitude;
                        rhsLatitude = rightObject.getLatitude();
                        String mergedLatitude = ((String) strategy.merge(LocatorUtils.property(leftLocator, "latitude", lhsLatitude), LocatorUtils.property(rightLocator, "latitude", rhsLatitude), lhsLatitude, rhsLatitude, leftObject.isSetLatitude(), rightObject.isSetLatitude()));
                        target.setLatitude(mergedLatitude);
                    } else {
                        if (latitudeShouldBeMergedAndSet == Boolean.FALSE) {
                            target.latitude = null;
                        }
                    }
                }
                {
                    Boolean longitudeShouldBeMergedAndSet = strategy.shouldBeMergedAndSet(leftLocator, rightLocator, leftObject.isSetLongitude(), rightObject.isSetLongitude());
                    if (longitudeShouldBeMergedAndSet == Boolean.TRUE) {
                        String lhsLongitude;
                        lhsLongitude = leftObject.getLongitude();
                        String rhsLongitude;
                        rhsLongitude = rightObject.getLongitude();
                        String mergedLongitude = ((String) strategy.merge(LocatorUtils.property(leftLocator, "longitude", lhsLongitude), LocatorUtils.property(rightLocator, "longitude", rhsLongitude), lhsLongitude, rhsLongitude, leftObject.isSetLongitude(), rightObject.isSetLongitude()));
                        target.setLongitude(mergedLongitude);
                    } else {
                        if (longitudeShouldBeMergedAndSet == Boolean.FALSE) {
                            target.longitude = null;
                        }
                    }
                }
            }
        }

    }

}
