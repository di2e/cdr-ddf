//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.11 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2016.07.27 at 04:06:37 PM EDT 
//


package mil.ces.metadata.mdr.ns.gsip.tspi._2_0.ext;

import java.io.Serializable;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlType;
import org.isotc211._19112.SILocationInstanceType;
import org.jvnet.jaxb2_commons.lang.CopyStrategy2;
import org.jvnet.jaxb2_commons.lang.CopyTo2;
import org.jvnet.jaxb2_commons.lang.Equals2;
import org.jvnet.jaxb2_commons.lang.EqualsStrategy2;
import org.jvnet.jaxb2_commons.lang.HashCode2;
import org.jvnet.jaxb2_commons.lang.HashCodeStrategy2;
import org.jvnet.jaxb2_commons.lang.JAXBCopyStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBEqualsStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBHashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBMergeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBToStringStrategy;
import org.jvnet.jaxb2_commons.lang.MergeFrom2;
import org.jvnet.jaxb2_commons.lang.MergeStrategy2;
import org.jvnet.jaxb2_commons.lang.ToString2;
import org.jvnet.jaxb2_commons.lang.ToStringStrategy2;
import org.jvnet.jaxb2_commons.locator.ObjectLocator;
import org.jvnet.jaxb2_commons.locator.util.LocatorUtils;


/**
 * ....
 * 
 * <p>Java class for GEOLOCInstanceType complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="GEOLOCInstanceType"&gt;
 *   &lt;complexContent&gt;
 *     &lt;extension base="{http://www.isotc211.org/19112}SI_LocationInstanceType"&gt;
 *       &lt;sequence&gt;
 *         &lt;element name="myProperty" type="{http://www.w3.org/2001/XMLSchema}string" minOccurs="0"/&gt;
 *       &lt;/sequence&gt;
 *     &lt;/extension&gt;
 *   &lt;/complexContent&gt;
 * &lt;/complexType&gt;
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "GEOLOCInstanceType", propOrder = {
    "myProperty"
})
public class GEOLOCInstanceType
    extends SILocationInstanceType
    implements Serializable, Cloneable, CopyTo2, Equals2, HashCode2, MergeFrom2, ToString2
{

    private final static long serialVersionUID = 1L;
    protected String myProperty;

    /**
     * Gets the value of the myProperty property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getMyProperty() {
        return myProperty;
    }

    /**
     * Sets the value of the myProperty property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setMyProperty(String value) {
        this.myProperty = value;
    }

    public boolean isSetMyProperty() {
        return (this.myProperty!= null);
    }

    public String toString() {
        final ToStringStrategy2 strategy = JAXBToStringStrategy.INSTANCE;
        final StringBuilder buffer = new StringBuilder();
        append(null, buffer, strategy);
        return buffer.toString();
    }

    public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy2 strategy) {
        strategy.appendStart(locator, this, buffer);
        appendFields(locator, buffer, strategy);
        strategy.appendEnd(locator, this, buffer);
        return buffer;
    }

    public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy2 strategy) {
        super.appendFields(locator, buffer, strategy);
        {
            String theMyProperty;
            theMyProperty = this.getMyProperty();
            strategy.appendField(locator, this, "myProperty", buffer, theMyProperty, this.isSetMyProperty());
        }
        return buffer;
    }

    public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy2 strategy) {
        if ((object == null)||(this.getClass()!= object.getClass())) {
            return false;
        }
        if (this == object) {
            return true;
        }
        if (!super.equals(thisLocator, thatLocator, object, strategy)) {
            return false;
        }
        final GEOLOCInstanceType that = ((GEOLOCInstanceType) object);
        {
            String lhsMyProperty;
            lhsMyProperty = this.getMyProperty();
            String rhsMyProperty;
            rhsMyProperty = that.getMyProperty();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "myProperty", lhsMyProperty), LocatorUtils.property(thatLocator, "myProperty", rhsMyProperty), lhsMyProperty, rhsMyProperty, this.isSetMyProperty(), that.isSetMyProperty())) {
                return false;
            }
        }
        return true;
    }

    public boolean equals(Object object) {
        final EqualsStrategy2 strategy = JAXBEqualsStrategy.INSTANCE;
        return equals(null, null, object, strategy);
    }

    public int hashCode(ObjectLocator locator, HashCodeStrategy2 strategy) {
        int currentHashCode = super.hashCode(locator, strategy);
        {
            String theMyProperty;
            theMyProperty = this.getMyProperty();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "myProperty", theMyProperty), currentHashCode, theMyProperty, this.isSetMyProperty());
        }
        return currentHashCode;
    }

    public int hashCode() {
        final HashCodeStrategy2 strategy = JAXBHashCodeStrategy.INSTANCE;
        return this.hashCode(null, strategy);
    }

    public Object clone() {
        return copyTo(createNewInstance());
    }

    public Object copyTo(Object target) {
        final CopyStrategy2 strategy = JAXBCopyStrategy.INSTANCE;
        return copyTo(null, target, strategy);
    }

    public Object copyTo(ObjectLocator locator, Object target, CopyStrategy2 strategy) {
        final Object draftCopy = ((target == null)?createNewInstance():target);
        super.copyTo(locator, draftCopy, strategy);
        if (draftCopy instanceof GEOLOCInstanceType) {
            final GEOLOCInstanceType copy = ((GEOLOCInstanceType) draftCopy);
            {
                Boolean myPropertyShouldBeCopiedAndSet = strategy.shouldBeCopiedAndSet(locator, this.isSetMyProperty());
                if (myPropertyShouldBeCopiedAndSet == Boolean.TRUE) {
                    String sourceMyProperty;
                    sourceMyProperty = this.getMyProperty();
                    String copyMyProperty = ((String) strategy.copy(LocatorUtils.property(locator, "myProperty", sourceMyProperty), sourceMyProperty, this.isSetMyProperty()));
                    copy.setMyProperty(copyMyProperty);
                } else {
                    if (myPropertyShouldBeCopiedAndSet == Boolean.FALSE) {
                        copy.myProperty = null;
                    }
                }
            }
        }
        return draftCopy;
    }

    public Object createNewInstance() {
        return new GEOLOCInstanceType();
    }

    public void mergeFrom(Object left, Object right) {
        final MergeStrategy2 strategy = JAXBMergeStrategy.INSTANCE;
        mergeFrom(null, null, left, right, strategy);
    }

    public void mergeFrom(ObjectLocator leftLocator, ObjectLocator rightLocator, Object left, Object right, MergeStrategy2 strategy) {
        super.mergeFrom(leftLocator, rightLocator, left, right, strategy);
        if (right instanceof GEOLOCInstanceType) {
            final GEOLOCInstanceType target = this;
            final GEOLOCInstanceType leftObject = ((GEOLOCInstanceType) left);
            final GEOLOCInstanceType rightObject = ((GEOLOCInstanceType) right);
            {
                Boolean myPropertyShouldBeMergedAndSet = strategy.shouldBeMergedAndSet(leftLocator, rightLocator, leftObject.isSetMyProperty(), rightObject.isSetMyProperty());
                if (myPropertyShouldBeMergedAndSet == Boolean.TRUE) {
                    String lhsMyProperty;
                    lhsMyProperty = leftObject.getMyProperty();
                    String rhsMyProperty;
                    rhsMyProperty = rightObject.getMyProperty();
                    String mergedMyProperty = ((String) strategy.merge(LocatorUtils.property(leftLocator, "myProperty", lhsMyProperty), LocatorUtils.property(rightLocator, "myProperty", rhsMyProperty), lhsMyProperty, rhsMyProperty, leftObject.isSetMyProperty(), rightObject.isSetMyProperty()));
                    target.setMyProperty(mergedMyProperty);
                } else {
                    if (myPropertyShouldBeMergedAndSet == Boolean.FALSE) {
                        target.myProperty = null;
                    }
                }
            }
        }
    }

}
