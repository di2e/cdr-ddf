//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.11 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2016.07.27 at 04:06:37 PM EDT 
//


package org.isotc211._2005.gmd;

import java.io.Serializable;
import javax.validation.Valid;
import javax.validation.constraints.NotNull;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlSeeAlso;
import javax.xml.bind.annotation.XmlType;
import org.isotc211._2005.gco.AbstractObjectType;
import org.isotc211._2005.gco.CharacterStringPropertyType;
import org.jvnet.jaxb2_commons.lang.CopyStrategy2;
import org.jvnet.jaxb2_commons.lang.CopyTo2;
import org.jvnet.jaxb2_commons.lang.Equals2;
import org.jvnet.jaxb2_commons.lang.EqualsStrategy2;
import org.jvnet.jaxb2_commons.lang.HashCode2;
import org.jvnet.jaxb2_commons.lang.HashCodeStrategy2;
import org.jvnet.jaxb2_commons.lang.JAXBCopyStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBEqualsStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBHashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBMergeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBToStringStrategy;
import org.jvnet.jaxb2_commons.lang.MergeFrom2;
import org.jvnet.jaxb2_commons.lang.MergeStrategy2;
import org.jvnet.jaxb2_commons.lang.ToString2;
import org.jvnet.jaxb2_commons.lang.ToStringStrategy2;
import org.jvnet.jaxb2_commons.locator.ObjectLocator;
import org.jvnet.jaxb2_commons.locator.util.LocatorUtils;


/**
 * <p>Java class for MD_Identifier_Type complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="MD_Identifier_Type"&gt;
 *   &lt;complexContent&gt;
 *     &lt;extension base="{http://www.isotc211.org/2005/gco}AbstractObject_Type"&gt;
 *       &lt;sequence&gt;
 *         &lt;element name="authority" type="{http://www.isotc211.org/2005/gmd}CI_Citation_PropertyType" minOccurs="0"/&gt;
 *         &lt;element name="code" type="{http://www.isotc211.org/2005/gco}CharacterString_PropertyType"/&gt;
 *       &lt;/sequence&gt;
 *     &lt;/extension&gt;
 *   &lt;/complexContent&gt;
 * &lt;/complexType&gt;
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "MD_Identifier_Type", propOrder = {
    "authority",
    "code"
})
@XmlSeeAlso({
    RSIdentifierType.class
})
public class MDIdentifierType
    extends AbstractObjectType
    implements Serializable, Cloneable, CopyTo2, Equals2, HashCode2, MergeFrom2, ToString2
{

    private final static long serialVersionUID = 1L;
    @Valid
    protected CICitationPropertyType authority;
    @XmlElement(required = true)
    @NotNull(message = "MDIdentifierType.code {javax.validation.constraints.NotNull.message}")
    @Valid
    protected CharacterStringPropertyType code;

    /**
     * Gets the value of the authority property.
     * 
     * @return
     *     possible object is
     *     {@link CICitationPropertyType }
     *     
     */
    public CICitationPropertyType getAuthority() {
        return authority;
    }

    /**
     * Sets the value of the authority property.
     * 
     * @param value
     *     allowed object is
     *     {@link CICitationPropertyType }
     *     
     */
    public void setAuthority(CICitationPropertyType value) {
        this.authority = value;
    }

    public boolean isSetAuthority() {
        return (this.authority!= null);
    }

    /**
     * Gets the value of the code property.
     * 
     * @return
     *     possible object is
     *     {@link CharacterStringPropertyType }
     *     
     */
    public CharacterStringPropertyType getCode() {
        return code;
    }

    /**
     * Sets the value of the code property.
     * 
     * @param value
     *     allowed object is
     *     {@link CharacterStringPropertyType }
     *     
     */
    public void setCode(CharacterStringPropertyType value) {
        this.code = value;
    }

    public boolean isSetCode() {
        return (this.code!= null);
    }

    public String toString() {
        final ToStringStrategy2 strategy = JAXBToStringStrategy.INSTANCE;
        final StringBuilder buffer = new StringBuilder();
        append(null, buffer, strategy);
        return buffer.toString();
    }

    public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy2 strategy) {
        strategy.appendStart(locator, this, buffer);
        appendFields(locator, buffer, strategy);
        strategy.appendEnd(locator, this, buffer);
        return buffer;
    }

    public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy2 strategy) {
        super.appendFields(locator, buffer, strategy);
        {
            CICitationPropertyType theAuthority;
            theAuthority = this.getAuthority();
            strategy.appendField(locator, this, "authority", buffer, theAuthority, this.isSetAuthority());
        }
        {
            CharacterStringPropertyType theCode;
            theCode = this.getCode();
            strategy.appendField(locator, this, "code", buffer, theCode, this.isSetCode());
        }
        return buffer;
    }

    public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy2 strategy) {
        if ((object == null)||(this.getClass()!= object.getClass())) {
            return false;
        }
        if (this == object) {
            return true;
        }
        if (!super.equals(thisLocator, thatLocator, object, strategy)) {
            return false;
        }
        final MDIdentifierType that = ((MDIdentifierType) object);
        {
            CICitationPropertyType lhsAuthority;
            lhsAuthority = this.getAuthority();
            CICitationPropertyType rhsAuthority;
            rhsAuthority = that.getAuthority();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "authority", lhsAuthority), LocatorUtils.property(thatLocator, "authority", rhsAuthority), lhsAuthority, rhsAuthority, this.isSetAuthority(), that.isSetAuthority())) {
                return false;
            }
        }
        {
            CharacterStringPropertyType lhsCode;
            lhsCode = this.getCode();
            CharacterStringPropertyType rhsCode;
            rhsCode = that.getCode();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "code", lhsCode), LocatorUtils.property(thatLocator, "code", rhsCode), lhsCode, rhsCode, this.isSetCode(), that.isSetCode())) {
                return false;
            }
        }
        return true;
    }

    public boolean equals(Object object) {
        final EqualsStrategy2 strategy = JAXBEqualsStrategy.INSTANCE;
        return equals(null, null, object, strategy);
    }

    public int hashCode(ObjectLocator locator, HashCodeStrategy2 strategy) {
        int currentHashCode = super.hashCode(locator, strategy);
        {
            CICitationPropertyType theAuthority;
            theAuthority = this.getAuthority();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "authority", theAuthority), currentHashCode, theAuthority, this.isSetAuthority());
        }
        {
            CharacterStringPropertyType theCode;
            theCode = this.getCode();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "code", theCode), currentHashCode, theCode, this.isSetCode());
        }
        return currentHashCode;
    }

    public int hashCode() {
        final HashCodeStrategy2 strategy = JAXBHashCodeStrategy.INSTANCE;
        return this.hashCode(null, strategy);
    }

    public Object clone() {
        return copyTo(createNewInstance());
    }

    public Object copyTo(Object target) {
        final CopyStrategy2 strategy = JAXBCopyStrategy.INSTANCE;
        return copyTo(null, target, strategy);
    }

    public Object copyTo(ObjectLocator locator, Object target, CopyStrategy2 strategy) {
        final Object draftCopy = ((target == null)?createNewInstance():target);
        super.copyTo(locator, draftCopy, strategy);
        if (draftCopy instanceof MDIdentifierType) {
            final MDIdentifierType copy = ((MDIdentifierType) draftCopy);
            {
                Boolean authorityShouldBeCopiedAndSet = strategy.shouldBeCopiedAndSet(locator, this.isSetAuthority());
                if (authorityShouldBeCopiedAndSet == Boolean.TRUE) {
                    CICitationPropertyType sourceAuthority;
                    sourceAuthority = this.getAuthority();
                    CICitationPropertyType copyAuthority = ((CICitationPropertyType) strategy.copy(LocatorUtils.property(locator, "authority", sourceAuthority), sourceAuthority, this.isSetAuthority()));
                    copy.setAuthority(copyAuthority);
                } else {
                    if (authorityShouldBeCopiedAndSet == Boolean.FALSE) {
                        copy.authority = null;
                    }
                }
            }
            {
                Boolean codeShouldBeCopiedAndSet = strategy.shouldBeCopiedAndSet(locator, this.isSetCode());
                if (codeShouldBeCopiedAndSet == Boolean.TRUE) {
                    CharacterStringPropertyType sourceCode;
                    sourceCode = this.getCode();
                    CharacterStringPropertyType copyCode = ((CharacterStringPropertyType) strategy.copy(LocatorUtils.property(locator, "code", sourceCode), sourceCode, this.isSetCode()));
                    copy.setCode(copyCode);
                } else {
                    if (codeShouldBeCopiedAndSet == Boolean.FALSE) {
                        copy.code = null;
                    }
                }
            }
        }
        return draftCopy;
    }

    public Object createNewInstance() {
        return new MDIdentifierType();
    }

    public void mergeFrom(Object left, Object right) {
        final MergeStrategy2 strategy = JAXBMergeStrategy.INSTANCE;
        mergeFrom(null, null, left, right, strategy);
    }

    public void mergeFrom(ObjectLocator leftLocator, ObjectLocator rightLocator, Object left, Object right, MergeStrategy2 strategy) {
        super.mergeFrom(leftLocator, rightLocator, left, right, strategy);
        if (right instanceof MDIdentifierType) {
            final MDIdentifierType target = this;
            final MDIdentifierType leftObject = ((MDIdentifierType) left);
            final MDIdentifierType rightObject = ((MDIdentifierType) right);
            {
                Boolean authorityShouldBeMergedAndSet = strategy.shouldBeMergedAndSet(leftLocator, rightLocator, leftObject.isSetAuthority(), rightObject.isSetAuthority());
                if (authorityShouldBeMergedAndSet == Boolean.TRUE) {
                    CICitationPropertyType lhsAuthority;
                    lhsAuthority = leftObject.getAuthority();
                    CICitationPropertyType rhsAuthority;
                    rhsAuthority = rightObject.getAuthority();
                    CICitationPropertyType mergedAuthority = ((CICitationPropertyType) strategy.merge(LocatorUtils.property(leftLocator, "authority", lhsAuthority), LocatorUtils.property(rightLocator, "authority", rhsAuthority), lhsAuthority, rhsAuthority, leftObject.isSetAuthority(), rightObject.isSetAuthority()));
                    target.setAuthority(mergedAuthority);
                } else {
                    if (authorityShouldBeMergedAndSet == Boolean.FALSE) {
                        target.authority = null;
                    }
                }
            }
            {
                Boolean codeShouldBeMergedAndSet = strategy.shouldBeMergedAndSet(leftLocator, rightLocator, leftObject.isSetCode(), rightObject.isSetCode());
                if (codeShouldBeMergedAndSet == Boolean.TRUE) {
                    CharacterStringPropertyType lhsCode;
                    lhsCode = leftObject.getCode();
                    CharacterStringPropertyType rhsCode;
                    rhsCode = rightObject.getCode();
                    CharacterStringPropertyType mergedCode = ((CharacterStringPropertyType) strategy.merge(LocatorUtils.property(leftLocator, "code", lhsCode), LocatorUtils.property(rightLocator, "code", rhsCode), lhsCode, rhsCode, leftObject.isSetCode(), rightObject.isSetCode()));
                    target.setCode(mergedCode);
                } else {
                    if (codeShouldBeMergedAndSet == Boolean.FALSE) {
                        target.code = null;
                    }
                }
            }
        }
    }

}
