//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.11 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2016.07.27 at 04:06:37 PM EDT 
//


package org.isotc211._2005.gmd;

import java.io.Serializable;
import javax.validation.Valid;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlType;
import org.isotc211._2005.gco.AbstractObjectType;
import org.isotc211._2005.gco.CharacterStringPropertyType;
import org.jvnet.jaxb2_commons.lang.CopyStrategy2;
import org.jvnet.jaxb2_commons.lang.CopyTo2;
import org.jvnet.jaxb2_commons.lang.Equals2;
import org.jvnet.jaxb2_commons.lang.EqualsStrategy2;
import org.jvnet.jaxb2_commons.lang.HashCode2;
import org.jvnet.jaxb2_commons.lang.HashCodeStrategy2;
import org.jvnet.jaxb2_commons.lang.JAXBCopyStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBEqualsStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBHashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBMergeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBToStringStrategy;
import org.jvnet.jaxb2_commons.lang.MergeFrom2;
import org.jvnet.jaxb2_commons.lang.MergeStrategy2;
import org.jvnet.jaxb2_commons.lang.ToString2;
import org.jvnet.jaxb2_commons.lang.ToStringStrategy2;
import org.jvnet.jaxb2_commons.locator.ObjectLocator;
import org.jvnet.jaxb2_commons.locator.util.LocatorUtils;


/**
 * <p>Java class for CI_Series_Type complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="CI_Series_Type"&gt;
 *   &lt;complexContent&gt;
 *     &lt;extension base="{http://www.isotc211.org/2005/gco}AbstractObject_Type"&gt;
 *       &lt;sequence&gt;
 *         &lt;element name="name" type="{http://www.isotc211.org/2005/gco}CharacterString_PropertyType" minOccurs="0"/&gt;
 *         &lt;element name="issueIdentification" type="{http://www.isotc211.org/2005/gco}CharacterString_PropertyType" minOccurs="0"/&gt;
 *         &lt;element name="page" type="{http://www.isotc211.org/2005/gco}CharacterString_PropertyType" minOccurs="0"/&gt;
 *       &lt;/sequence&gt;
 *     &lt;/extension&gt;
 *   &lt;/complexContent&gt;
 * &lt;/complexType&gt;
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "CI_Series_Type", propOrder = {
    "name",
    "issueIdentification",
    "page"
})
public class CISeriesType
    extends AbstractObjectType
    implements Serializable, Cloneable, CopyTo2, Equals2, HashCode2, MergeFrom2, ToString2
{

    private final static long serialVersionUID = 1L;
    @Valid
    protected CharacterStringPropertyType name;
    @Valid
    protected CharacterStringPropertyType issueIdentification;
    @Valid
    protected CharacterStringPropertyType page;

    /**
     * Gets the value of the name property.
     * 
     * @return
     *     possible object is
     *     {@link CharacterStringPropertyType }
     *     
     */
    public CharacterStringPropertyType getName() {
        return name;
    }

    /**
     * Sets the value of the name property.
     * 
     * @param value
     *     allowed object is
     *     {@link CharacterStringPropertyType }
     *     
     */
    public void setName(CharacterStringPropertyType value) {
        this.name = value;
    }

    public boolean isSetName() {
        return (this.name!= null);
    }

    /**
     * Gets the value of the issueIdentification property.
     * 
     * @return
     *     possible object is
     *     {@link CharacterStringPropertyType }
     *     
     */
    public CharacterStringPropertyType getIssueIdentification() {
        return issueIdentification;
    }

    /**
     * Sets the value of the issueIdentification property.
     * 
     * @param value
     *     allowed object is
     *     {@link CharacterStringPropertyType }
     *     
     */
    public void setIssueIdentification(CharacterStringPropertyType value) {
        this.issueIdentification = value;
    }

    public boolean isSetIssueIdentification() {
        return (this.issueIdentification!= null);
    }

    /**
     * Gets the value of the page property.
     * 
     * @return
     *     possible object is
     *     {@link CharacterStringPropertyType }
     *     
     */
    public CharacterStringPropertyType getPage() {
        return page;
    }

    /**
     * Sets the value of the page property.
     * 
     * @param value
     *     allowed object is
     *     {@link CharacterStringPropertyType }
     *     
     */
    public void setPage(CharacterStringPropertyType value) {
        this.page = value;
    }

    public boolean isSetPage() {
        return (this.page!= null);
    }

    public String toString() {
        final ToStringStrategy2 strategy = JAXBToStringStrategy.INSTANCE;
        final StringBuilder buffer = new StringBuilder();
        append(null, buffer, strategy);
        return buffer.toString();
    }

    public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy2 strategy) {
        strategy.appendStart(locator, this, buffer);
        appendFields(locator, buffer, strategy);
        strategy.appendEnd(locator, this, buffer);
        return buffer;
    }

    public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy2 strategy) {
        super.appendFields(locator, buffer, strategy);
        {
            CharacterStringPropertyType theName;
            theName = this.getName();
            strategy.appendField(locator, this, "name", buffer, theName, this.isSetName());
        }
        {
            CharacterStringPropertyType theIssueIdentification;
            theIssueIdentification = this.getIssueIdentification();
            strategy.appendField(locator, this, "issueIdentification", buffer, theIssueIdentification, this.isSetIssueIdentification());
        }
        {
            CharacterStringPropertyType thePage;
            thePage = this.getPage();
            strategy.appendField(locator, this, "page", buffer, thePage, this.isSetPage());
        }
        return buffer;
    }

    public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy2 strategy) {
        if ((object == null)||(this.getClass()!= object.getClass())) {
            return false;
        }
        if (this == object) {
            return true;
        }
        if (!super.equals(thisLocator, thatLocator, object, strategy)) {
            return false;
        }
        final CISeriesType that = ((CISeriesType) object);
        {
            CharacterStringPropertyType lhsName;
            lhsName = this.getName();
            CharacterStringPropertyType rhsName;
            rhsName = that.getName();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "name", lhsName), LocatorUtils.property(thatLocator, "name", rhsName), lhsName, rhsName, this.isSetName(), that.isSetName())) {
                return false;
            }
        }
        {
            CharacterStringPropertyType lhsIssueIdentification;
            lhsIssueIdentification = this.getIssueIdentification();
            CharacterStringPropertyType rhsIssueIdentification;
            rhsIssueIdentification = that.getIssueIdentification();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "issueIdentification", lhsIssueIdentification), LocatorUtils.property(thatLocator, "issueIdentification", rhsIssueIdentification), lhsIssueIdentification, rhsIssueIdentification, this.isSetIssueIdentification(), that.isSetIssueIdentification())) {
                return false;
            }
        }
        {
            CharacterStringPropertyType lhsPage;
            lhsPage = this.getPage();
            CharacterStringPropertyType rhsPage;
            rhsPage = that.getPage();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "page", lhsPage), LocatorUtils.property(thatLocator, "page", rhsPage), lhsPage, rhsPage, this.isSetPage(), that.isSetPage())) {
                return false;
            }
        }
        return true;
    }

    public boolean equals(Object object) {
        final EqualsStrategy2 strategy = JAXBEqualsStrategy.INSTANCE;
        return equals(null, null, object, strategy);
    }

    public int hashCode(ObjectLocator locator, HashCodeStrategy2 strategy) {
        int currentHashCode = super.hashCode(locator, strategy);
        {
            CharacterStringPropertyType theName;
            theName = this.getName();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "name", theName), currentHashCode, theName, this.isSetName());
        }
        {
            CharacterStringPropertyType theIssueIdentification;
            theIssueIdentification = this.getIssueIdentification();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "issueIdentification", theIssueIdentification), currentHashCode, theIssueIdentification, this.isSetIssueIdentification());
        }
        {
            CharacterStringPropertyType thePage;
            thePage = this.getPage();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "page", thePage), currentHashCode, thePage, this.isSetPage());
        }
        return currentHashCode;
    }

    public int hashCode() {
        final HashCodeStrategy2 strategy = JAXBHashCodeStrategy.INSTANCE;
        return this.hashCode(null, strategy);
    }

    public Object clone() {
        return copyTo(createNewInstance());
    }

    public Object copyTo(Object target) {
        final CopyStrategy2 strategy = JAXBCopyStrategy.INSTANCE;
        return copyTo(null, target, strategy);
    }

    public Object copyTo(ObjectLocator locator, Object target, CopyStrategy2 strategy) {
        final Object draftCopy = ((target == null)?createNewInstance():target);
        super.copyTo(locator, draftCopy, strategy);
        if (draftCopy instanceof CISeriesType) {
            final CISeriesType copy = ((CISeriesType) draftCopy);
            {
                Boolean nameShouldBeCopiedAndSet = strategy.shouldBeCopiedAndSet(locator, this.isSetName());
                if (nameShouldBeCopiedAndSet == Boolean.TRUE) {
                    CharacterStringPropertyType sourceName;
                    sourceName = this.getName();
                    CharacterStringPropertyType copyName = ((CharacterStringPropertyType) strategy.copy(LocatorUtils.property(locator, "name", sourceName), sourceName, this.isSetName()));
                    copy.setName(copyName);
                } else {
                    if (nameShouldBeCopiedAndSet == Boolean.FALSE) {
                        copy.name = null;
                    }
                }
            }
            {
                Boolean issueIdentificationShouldBeCopiedAndSet = strategy.shouldBeCopiedAndSet(locator, this.isSetIssueIdentification());
                if (issueIdentificationShouldBeCopiedAndSet == Boolean.TRUE) {
                    CharacterStringPropertyType sourceIssueIdentification;
                    sourceIssueIdentification = this.getIssueIdentification();
                    CharacterStringPropertyType copyIssueIdentification = ((CharacterStringPropertyType) strategy.copy(LocatorUtils.property(locator, "issueIdentification", sourceIssueIdentification), sourceIssueIdentification, this.isSetIssueIdentification()));
                    copy.setIssueIdentification(copyIssueIdentification);
                } else {
                    if (issueIdentificationShouldBeCopiedAndSet == Boolean.FALSE) {
                        copy.issueIdentification = null;
                    }
                }
            }
            {
                Boolean pageShouldBeCopiedAndSet = strategy.shouldBeCopiedAndSet(locator, this.isSetPage());
                if (pageShouldBeCopiedAndSet == Boolean.TRUE) {
                    CharacterStringPropertyType sourcePage;
                    sourcePage = this.getPage();
                    CharacterStringPropertyType copyPage = ((CharacterStringPropertyType) strategy.copy(LocatorUtils.property(locator, "page", sourcePage), sourcePage, this.isSetPage()));
                    copy.setPage(copyPage);
                } else {
                    if (pageShouldBeCopiedAndSet == Boolean.FALSE) {
                        copy.page = null;
                    }
                }
            }
        }
        return draftCopy;
    }

    public Object createNewInstance() {
        return new CISeriesType();
    }

    public void mergeFrom(Object left, Object right) {
        final MergeStrategy2 strategy = JAXBMergeStrategy.INSTANCE;
        mergeFrom(null, null, left, right, strategy);
    }

    public void mergeFrom(ObjectLocator leftLocator, ObjectLocator rightLocator, Object left, Object right, MergeStrategy2 strategy) {
        super.mergeFrom(leftLocator, rightLocator, left, right, strategy);
        if (right instanceof CISeriesType) {
            final CISeriesType target = this;
            final CISeriesType leftObject = ((CISeriesType) left);
            final CISeriesType rightObject = ((CISeriesType) right);
            {
                Boolean nameShouldBeMergedAndSet = strategy.shouldBeMergedAndSet(leftLocator, rightLocator, leftObject.isSetName(), rightObject.isSetName());
                if (nameShouldBeMergedAndSet == Boolean.TRUE) {
                    CharacterStringPropertyType lhsName;
                    lhsName = leftObject.getName();
                    CharacterStringPropertyType rhsName;
                    rhsName = rightObject.getName();
                    CharacterStringPropertyType mergedName = ((CharacterStringPropertyType) strategy.merge(LocatorUtils.property(leftLocator, "name", lhsName), LocatorUtils.property(rightLocator, "name", rhsName), lhsName, rhsName, leftObject.isSetName(), rightObject.isSetName()));
                    target.setName(mergedName);
                } else {
                    if (nameShouldBeMergedAndSet == Boolean.FALSE) {
                        target.name = null;
                    }
                }
            }
            {
                Boolean issueIdentificationShouldBeMergedAndSet = strategy.shouldBeMergedAndSet(leftLocator, rightLocator, leftObject.isSetIssueIdentification(), rightObject.isSetIssueIdentification());
                if (issueIdentificationShouldBeMergedAndSet == Boolean.TRUE) {
                    CharacterStringPropertyType lhsIssueIdentification;
                    lhsIssueIdentification = leftObject.getIssueIdentification();
                    CharacterStringPropertyType rhsIssueIdentification;
                    rhsIssueIdentification = rightObject.getIssueIdentification();
                    CharacterStringPropertyType mergedIssueIdentification = ((CharacterStringPropertyType) strategy.merge(LocatorUtils.property(leftLocator, "issueIdentification", lhsIssueIdentification), LocatorUtils.property(rightLocator, "issueIdentification", rhsIssueIdentification), lhsIssueIdentification, rhsIssueIdentification, leftObject.isSetIssueIdentification(), rightObject.isSetIssueIdentification()));
                    target.setIssueIdentification(mergedIssueIdentification);
                } else {
                    if (issueIdentificationShouldBeMergedAndSet == Boolean.FALSE) {
                        target.issueIdentification = null;
                    }
                }
            }
            {
                Boolean pageShouldBeMergedAndSet = strategy.shouldBeMergedAndSet(leftLocator, rightLocator, leftObject.isSetPage(), rightObject.isSetPage());
                if (pageShouldBeMergedAndSet == Boolean.TRUE) {
                    CharacterStringPropertyType lhsPage;
                    lhsPage = leftObject.getPage();
                    CharacterStringPropertyType rhsPage;
                    rhsPage = rightObject.getPage();
                    CharacterStringPropertyType mergedPage = ((CharacterStringPropertyType) strategy.merge(LocatorUtils.property(leftLocator, "page", lhsPage), LocatorUtils.property(rightLocator, "page", rhsPage), lhsPage, rhsPage, leftObject.isSetPage(), rightObject.isSetPage()));
                    target.setPage(mergedPage);
                } else {
                    if (pageShouldBeMergedAndSet == Boolean.FALSE) {
                        target.page = null;
                    }
                }
            }
        }
    }

}
