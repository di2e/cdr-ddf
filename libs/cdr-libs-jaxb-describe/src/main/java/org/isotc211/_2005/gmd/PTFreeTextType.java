//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.11 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2016.07.27 at 04:06:37 PM EDT 
//


package org.isotc211._2005.gmd;

import java.io.Serializable;
import java.util.ArrayList;
import java.util.List;
import javax.validation.Valid;
import javax.validation.constraints.NotNull;
import javax.validation.constraints.Size;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlType;
import org.isotc211._2005.gco.AbstractObjectType;
import org.jvnet.jaxb2_commons.lang.CopyStrategy2;
import org.jvnet.jaxb2_commons.lang.CopyTo2;
import org.jvnet.jaxb2_commons.lang.Equals2;
import org.jvnet.jaxb2_commons.lang.EqualsStrategy2;
import org.jvnet.jaxb2_commons.lang.HashCode2;
import org.jvnet.jaxb2_commons.lang.HashCodeStrategy2;
import org.jvnet.jaxb2_commons.lang.JAXBCopyStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBEqualsStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBHashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBMergeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBToStringStrategy;
import org.jvnet.jaxb2_commons.lang.MergeFrom2;
import org.jvnet.jaxb2_commons.lang.MergeStrategy2;
import org.jvnet.jaxb2_commons.lang.ToString2;
import org.jvnet.jaxb2_commons.lang.ToStringStrategy2;
import org.jvnet.jaxb2_commons.locator.ObjectLocator;
import org.jvnet.jaxb2_commons.locator.util.LocatorUtils;


/**
 * <p>Java class for PT_FreeText_Type complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="PT_FreeText_Type"&gt;
 *   &lt;complexContent&gt;
 *     &lt;extension base="{http://www.isotc211.org/2005/gco}AbstractObject_Type"&gt;
 *       &lt;sequence&gt;
 *         &lt;element name="textGroup" type="{http://www.isotc211.org/2005/gmd}LocalisedCharacterString_PropertyType" maxOccurs="unbounded"/&gt;
 *       &lt;/sequence&gt;
 *     &lt;/extension&gt;
 *   &lt;/complexContent&gt;
 * &lt;/complexType&gt;
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "PT_FreeText_Type", propOrder = {
    "textGroup"
})
public class PTFreeTextType
    extends AbstractObjectType
    implements Serializable, Cloneable, CopyTo2, Equals2, HashCode2, MergeFrom2, ToString2
{

    private final static long serialVersionUID = 1L;
    @XmlElement(required = true)
    @NotNull(message = "PTFreeTextType.textGroup {javax.validation.constraints.NotNull.message}")
    @Size(min = 1)
    @Valid
    protected List<LocalisedCharacterStringPropertyType> textGroup;

    /**
     * Gets the value of the textGroup property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the textGroup property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getTextGroup().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link LocalisedCharacterStringPropertyType }
     * 
     * 
     */
    public List<LocalisedCharacterStringPropertyType> getTextGroup() {
        if (textGroup == null) {
            textGroup = new ArrayList<LocalisedCharacterStringPropertyType>();
        }
        return this.textGroup;
    }

    public boolean isSetTextGroup() {
        return ((this.textGroup!= null)&&(!this.textGroup.isEmpty()));
    }

    public void unsetTextGroup() {
        this.textGroup = null;
    }

    public String toString() {
        final ToStringStrategy2 strategy = JAXBToStringStrategy.INSTANCE;
        final StringBuilder buffer = new StringBuilder();
        append(null, buffer, strategy);
        return buffer.toString();
    }

    public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy2 strategy) {
        strategy.appendStart(locator, this, buffer);
        appendFields(locator, buffer, strategy);
        strategy.appendEnd(locator, this, buffer);
        return buffer;
    }

    public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy2 strategy) {
        super.appendFields(locator, buffer, strategy);
        {
            List<LocalisedCharacterStringPropertyType> theTextGroup;
            theTextGroup = (this.isSetTextGroup()?this.getTextGroup():null);
            strategy.appendField(locator, this, "textGroup", buffer, theTextGroup, this.isSetTextGroup());
        }
        return buffer;
    }

    public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy2 strategy) {
        if ((object == null)||(this.getClass()!= object.getClass())) {
            return false;
        }
        if (this == object) {
            return true;
        }
        if (!super.equals(thisLocator, thatLocator, object, strategy)) {
            return false;
        }
        final PTFreeTextType that = ((PTFreeTextType) object);
        {
            List<LocalisedCharacterStringPropertyType> lhsTextGroup;
            lhsTextGroup = (this.isSetTextGroup()?this.getTextGroup():null);
            List<LocalisedCharacterStringPropertyType> rhsTextGroup;
            rhsTextGroup = (that.isSetTextGroup()?that.getTextGroup():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "textGroup", lhsTextGroup), LocatorUtils.property(thatLocator, "textGroup", rhsTextGroup), lhsTextGroup, rhsTextGroup, this.isSetTextGroup(), that.isSetTextGroup())) {
                return false;
            }
        }
        return true;
    }

    public boolean equals(Object object) {
        final EqualsStrategy2 strategy = JAXBEqualsStrategy.INSTANCE;
        return equals(null, null, object, strategy);
    }

    public int hashCode(ObjectLocator locator, HashCodeStrategy2 strategy) {
        int currentHashCode = super.hashCode(locator, strategy);
        {
            List<LocalisedCharacterStringPropertyType> theTextGroup;
            theTextGroup = (this.isSetTextGroup()?this.getTextGroup():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "textGroup", theTextGroup), currentHashCode, theTextGroup, this.isSetTextGroup());
        }
        return currentHashCode;
    }

    public int hashCode() {
        final HashCodeStrategy2 strategy = JAXBHashCodeStrategy.INSTANCE;
        return this.hashCode(null, strategy);
    }

    public Object clone() {
        return copyTo(createNewInstance());
    }

    public Object copyTo(Object target) {
        final CopyStrategy2 strategy = JAXBCopyStrategy.INSTANCE;
        return copyTo(null, target, strategy);
    }

    public Object copyTo(ObjectLocator locator, Object target, CopyStrategy2 strategy) {
        final Object draftCopy = ((target == null)?createNewInstance():target);
        super.copyTo(locator, draftCopy, strategy);
        if (draftCopy instanceof PTFreeTextType) {
            final PTFreeTextType copy = ((PTFreeTextType) draftCopy);
            {
                Boolean textGroupShouldBeCopiedAndSet = strategy.shouldBeCopiedAndSet(locator, this.isSetTextGroup());
                if (textGroupShouldBeCopiedAndSet == Boolean.TRUE) {
                    List<LocalisedCharacterStringPropertyType> sourceTextGroup;
                    sourceTextGroup = (this.isSetTextGroup()?this.getTextGroup():null);
                    @SuppressWarnings("unchecked")
                    List<LocalisedCharacterStringPropertyType> copyTextGroup = ((List<LocalisedCharacterStringPropertyType> ) strategy.copy(LocatorUtils.property(locator, "textGroup", sourceTextGroup), sourceTextGroup, this.isSetTextGroup()));
                    copy.unsetTextGroup();
                    if (copyTextGroup!= null) {
                        List<LocalisedCharacterStringPropertyType> uniqueTextGroupl = copy.getTextGroup();
                        uniqueTextGroupl.addAll(copyTextGroup);
                    }
                } else {
                    if (textGroupShouldBeCopiedAndSet == Boolean.FALSE) {
                        copy.unsetTextGroup();
                    }
                }
            }
        }
        return draftCopy;
    }

    public Object createNewInstance() {
        return new PTFreeTextType();
    }

    public void mergeFrom(Object left, Object right) {
        final MergeStrategy2 strategy = JAXBMergeStrategy.INSTANCE;
        mergeFrom(null, null, left, right, strategy);
    }

    public void mergeFrom(ObjectLocator leftLocator, ObjectLocator rightLocator, Object left, Object right, MergeStrategy2 strategy) {
        super.mergeFrom(leftLocator, rightLocator, left, right, strategy);
        if (right instanceof PTFreeTextType) {
            final PTFreeTextType target = this;
            final PTFreeTextType leftObject = ((PTFreeTextType) left);
            final PTFreeTextType rightObject = ((PTFreeTextType) right);
            {
                Boolean textGroupShouldBeMergedAndSet = strategy.shouldBeMergedAndSet(leftLocator, rightLocator, leftObject.isSetTextGroup(), rightObject.isSetTextGroup());
                if (textGroupShouldBeMergedAndSet == Boolean.TRUE) {
                    List<LocalisedCharacterStringPropertyType> lhsTextGroup;
                    lhsTextGroup = (leftObject.isSetTextGroup()?leftObject.getTextGroup():null);
                    List<LocalisedCharacterStringPropertyType> rhsTextGroup;
                    rhsTextGroup = (rightObject.isSetTextGroup()?rightObject.getTextGroup():null);
                    List<LocalisedCharacterStringPropertyType> mergedTextGroup = ((List<LocalisedCharacterStringPropertyType> ) strategy.merge(LocatorUtils.property(leftLocator, "textGroup", lhsTextGroup), LocatorUtils.property(rightLocator, "textGroup", rhsTextGroup), lhsTextGroup, rhsTextGroup, leftObject.isSetTextGroup(), rightObject.isSetTextGroup()));
                    target.unsetTextGroup();
                    if (mergedTextGroup!= null) {
                        List<LocalisedCharacterStringPropertyType> uniqueTextGroupl = target.getTextGroup();
                        uniqueTextGroupl.addAll(mergedTextGroup);
                    }
                } else {
                    if (textGroupShouldBeMergedAndSet == Boolean.FALSE) {
                        target.unsetTextGroup();
                    }
                }
            }
        }
    }

    public void setTextGroup(List<LocalisedCharacterStringPropertyType> value) {
        this.textGroup = null;
        if (value!= null) {
            List<LocalisedCharacterStringPropertyType> draftl = this.getTextGroup();
            draftl.addAll(value);
        }
    }

}
