//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.11 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2016.07.27 at 04:06:37 PM EDT 
//


package org.isotc211._2005.gco;

import java.io.Serializable;
import javax.validation.Valid;
import javax.validation.constraints.NotNull;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlType;
import org.jvnet.jaxb2_commons.lang.CopyStrategy2;
import org.jvnet.jaxb2_commons.lang.CopyTo2;
import org.jvnet.jaxb2_commons.lang.Equals2;
import org.jvnet.jaxb2_commons.lang.EqualsStrategy2;
import org.jvnet.jaxb2_commons.lang.HashCode2;
import org.jvnet.jaxb2_commons.lang.HashCodeStrategy2;
import org.jvnet.jaxb2_commons.lang.JAXBCopyStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBEqualsStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBHashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBMergeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBToStringStrategy;
import org.jvnet.jaxb2_commons.lang.MergeFrom2;
import org.jvnet.jaxb2_commons.lang.MergeStrategy2;
import org.jvnet.jaxb2_commons.lang.ToString2;
import org.jvnet.jaxb2_commons.lang.ToStringStrategy2;
import org.jvnet.jaxb2_commons.locator.ObjectLocator;
import org.jvnet.jaxb2_commons.locator.util.LocatorUtils;


/**
 * A component of a multiplicity, consisting of an non-negative lower bound, and a potentially infinite upper bound.
 * 
 * <p>Java class for MultiplicityRange_Type complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="MultiplicityRange_Type"&gt;
 *   &lt;complexContent&gt;
 *     &lt;extension base="{http://www.isotc211.org/2005/gco}AbstractObject_Type"&gt;
 *       &lt;sequence&gt;
 *         &lt;element name="lower" type="{http://www.isotc211.org/2005/gco}Integer_PropertyType"/&gt;
 *         &lt;element name="upper" type="{http://www.isotc211.org/2005/gco}UnlimitedInteger_PropertyType"/&gt;
 *       &lt;/sequence&gt;
 *     &lt;/extension&gt;
 *   &lt;/complexContent&gt;
 * &lt;/complexType&gt;
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "MultiplicityRange_Type", propOrder = {
    "lower",
    "upper"
})
public class MultiplicityRangeType
    extends AbstractObjectType
    implements Serializable, Cloneable, CopyTo2, Equals2, HashCode2, MergeFrom2, ToString2
{

    private final static long serialVersionUID = 1L;
    @XmlElement(required = true)
    @NotNull(message = "MultiplicityRangeType.lower {javax.validation.constraints.NotNull.message}")
    @Valid
    protected IntegerPropertyType lower;
    @XmlElement(required = true)
    @NotNull(message = "MultiplicityRangeType.upper {javax.validation.constraints.NotNull.message}")
    @Valid
    protected UnlimitedIntegerPropertyType upper;

    /**
     * Gets the value of the lower property.
     * 
     * @return
     *     possible object is
     *     {@link IntegerPropertyType }
     *     
     */
    public IntegerPropertyType getLower() {
        return lower;
    }

    /**
     * Sets the value of the lower property.
     * 
     * @param value
     *     allowed object is
     *     {@link IntegerPropertyType }
     *     
     */
    public void setLower(IntegerPropertyType value) {
        this.lower = value;
    }

    public boolean isSetLower() {
        return (this.lower!= null);
    }

    /**
     * Gets the value of the upper property.
     * 
     * @return
     *     possible object is
     *     {@link UnlimitedIntegerPropertyType }
     *     
     */
    public UnlimitedIntegerPropertyType getUpper() {
        return upper;
    }

    /**
     * Sets the value of the upper property.
     * 
     * @param value
     *     allowed object is
     *     {@link UnlimitedIntegerPropertyType }
     *     
     */
    public void setUpper(UnlimitedIntegerPropertyType value) {
        this.upper = value;
    }

    public boolean isSetUpper() {
        return (this.upper!= null);
    }

    public String toString() {
        final ToStringStrategy2 strategy = JAXBToStringStrategy.INSTANCE;
        final StringBuilder buffer = new StringBuilder();
        append(null, buffer, strategy);
        return buffer.toString();
    }

    public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy2 strategy) {
        strategy.appendStart(locator, this, buffer);
        appendFields(locator, buffer, strategy);
        strategy.appendEnd(locator, this, buffer);
        return buffer;
    }

    public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy2 strategy) {
        super.appendFields(locator, buffer, strategy);
        {
            IntegerPropertyType theLower;
            theLower = this.getLower();
            strategy.appendField(locator, this, "lower", buffer, theLower, this.isSetLower());
        }
        {
            UnlimitedIntegerPropertyType theUpper;
            theUpper = this.getUpper();
            strategy.appendField(locator, this, "upper", buffer, theUpper, this.isSetUpper());
        }
        return buffer;
    }

    public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy2 strategy) {
        if ((object == null)||(this.getClass()!= object.getClass())) {
            return false;
        }
        if (this == object) {
            return true;
        }
        if (!super.equals(thisLocator, thatLocator, object, strategy)) {
            return false;
        }
        final MultiplicityRangeType that = ((MultiplicityRangeType) object);
        {
            IntegerPropertyType lhsLower;
            lhsLower = this.getLower();
            IntegerPropertyType rhsLower;
            rhsLower = that.getLower();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "lower", lhsLower), LocatorUtils.property(thatLocator, "lower", rhsLower), lhsLower, rhsLower, this.isSetLower(), that.isSetLower())) {
                return false;
            }
        }
        {
            UnlimitedIntegerPropertyType lhsUpper;
            lhsUpper = this.getUpper();
            UnlimitedIntegerPropertyType rhsUpper;
            rhsUpper = that.getUpper();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "upper", lhsUpper), LocatorUtils.property(thatLocator, "upper", rhsUpper), lhsUpper, rhsUpper, this.isSetUpper(), that.isSetUpper())) {
                return false;
            }
        }
        return true;
    }

    public boolean equals(Object object) {
        final EqualsStrategy2 strategy = JAXBEqualsStrategy.INSTANCE;
        return equals(null, null, object, strategy);
    }

    public int hashCode(ObjectLocator locator, HashCodeStrategy2 strategy) {
        int currentHashCode = super.hashCode(locator, strategy);
        {
            IntegerPropertyType theLower;
            theLower = this.getLower();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "lower", theLower), currentHashCode, theLower, this.isSetLower());
        }
        {
            UnlimitedIntegerPropertyType theUpper;
            theUpper = this.getUpper();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "upper", theUpper), currentHashCode, theUpper, this.isSetUpper());
        }
        return currentHashCode;
    }

    public int hashCode() {
        final HashCodeStrategy2 strategy = JAXBHashCodeStrategy.INSTANCE;
        return this.hashCode(null, strategy);
    }

    public Object clone() {
        return copyTo(createNewInstance());
    }

    public Object copyTo(Object target) {
        final CopyStrategy2 strategy = JAXBCopyStrategy.INSTANCE;
        return copyTo(null, target, strategy);
    }

    public Object copyTo(ObjectLocator locator, Object target, CopyStrategy2 strategy) {
        final Object draftCopy = ((target == null)?createNewInstance():target);
        super.copyTo(locator, draftCopy, strategy);
        if (draftCopy instanceof MultiplicityRangeType) {
            final MultiplicityRangeType copy = ((MultiplicityRangeType) draftCopy);
            {
                Boolean lowerShouldBeCopiedAndSet = strategy.shouldBeCopiedAndSet(locator, this.isSetLower());
                if (lowerShouldBeCopiedAndSet == Boolean.TRUE) {
                    IntegerPropertyType sourceLower;
                    sourceLower = this.getLower();
                    IntegerPropertyType copyLower = ((IntegerPropertyType) strategy.copy(LocatorUtils.property(locator, "lower", sourceLower), sourceLower, this.isSetLower()));
                    copy.setLower(copyLower);
                } else {
                    if (lowerShouldBeCopiedAndSet == Boolean.FALSE) {
                        copy.lower = null;
                    }
                }
            }
            {
                Boolean upperShouldBeCopiedAndSet = strategy.shouldBeCopiedAndSet(locator, this.isSetUpper());
                if (upperShouldBeCopiedAndSet == Boolean.TRUE) {
                    UnlimitedIntegerPropertyType sourceUpper;
                    sourceUpper = this.getUpper();
                    UnlimitedIntegerPropertyType copyUpper = ((UnlimitedIntegerPropertyType) strategy.copy(LocatorUtils.property(locator, "upper", sourceUpper), sourceUpper, this.isSetUpper()));
                    copy.setUpper(copyUpper);
                } else {
                    if (upperShouldBeCopiedAndSet == Boolean.FALSE) {
                        copy.upper = null;
                    }
                }
            }
        }
        return draftCopy;
    }

    public Object createNewInstance() {
        return new MultiplicityRangeType();
    }

    public void mergeFrom(Object left, Object right) {
        final MergeStrategy2 strategy = JAXBMergeStrategy.INSTANCE;
        mergeFrom(null, null, left, right, strategy);
    }

    public void mergeFrom(ObjectLocator leftLocator, ObjectLocator rightLocator, Object left, Object right, MergeStrategy2 strategy) {
        super.mergeFrom(leftLocator, rightLocator, left, right, strategy);
        if (right instanceof MultiplicityRangeType) {
            final MultiplicityRangeType target = this;
            final MultiplicityRangeType leftObject = ((MultiplicityRangeType) left);
            final MultiplicityRangeType rightObject = ((MultiplicityRangeType) right);
            {
                Boolean lowerShouldBeMergedAndSet = strategy.shouldBeMergedAndSet(leftLocator, rightLocator, leftObject.isSetLower(), rightObject.isSetLower());
                if (lowerShouldBeMergedAndSet == Boolean.TRUE) {
                    IntegerPropertyType lhsLower;
                    lhsLower = leftObject.getLower();
                    IntegerPropertyType rhsLower;
                    rhsLower = rightObject.getLower();
                    IntegerPropertyType mergedLower = ((IntegerPropertyType) strategy.merge(LocatorUtils.property(leftLocator, "lower", lhsLower), LocatorUtils.property(rightLocator, "lower", rhsLower), lhsLower, rhsLower, leftObject.isSetLower(), rightObject.isSetLower()));
                    target.setLower(mergedLower);
                } else {
                    if (lowerShouldBeMergedAndSet == Boolean.FALSE) {
                        target.lower = null;
                    }
                }
            }
            {
                Boolean upperShouldBeMergedAndSet = strategy.shouldBeMergedAndSet(leftLocator, rightLocator, leftObject.isSetUpper(), rightObject.isSetUpper());
                if (upperShouldBeMergedAndSet == Boolean.TRUE) {
                    UnlimitedIntegerPropertyType lhsUpper;
                    lhsUpper = leftObject.getUpper();
                    UnlimitedIntegerPropertyType rhsUpper;
                    rhsUpper = rightObject.getUpper();
                    UnlimitedIntegerPropertyType mergedUpper = ((UnlimitedIntegerPropertyType) strategy.merge(LocatorUtils.property(leftLocator, "upper", lhsUpper), LocatorUtils.property(rightLocator, "upper", rhsUpper), lhsUpper, rhsUpper, leftObject.isSetUpper(), rightObject.isSetUpper()));
                    target.setUpper(mergedUpper);
                } else {
                    if (upperShouldBeMergedAndSet == Boolean.FALSE) {
                        target.upper = null;
                    }
                }
            }
        }
    }

}
