//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.11 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2016.07.27 at 04:06:37 PM EDT 
//


package org.isotc211._2005.gmd;

import java.io.Serializable;
import java.util.ArrayList;
import java.util.List;
import javax.validation.Valid;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlType;
import org.isotc211._2005.gco.AbstractObjectType;
import org.isotc211._2005.gco.CharacterStringPropertyType;
import org.jvnet.jaxb2_commons.lang.CopyStrategy2;
import org.jvnet.jaxb2_commons.lang.CopyTo2;
import org.jvnet.jaxb2_commons.lang.Equals2;
import org.jvnet.jaxb2_commons.lang.EqualsStrategy2;
import org.jvnet.jaxb2_commons.lang.HashCode2;
import org.jvnet.jaxb2_commons.lang.HashCodeStrategy2;
import org.jvnet.jaxb2_commons.lang.JAXBCopyStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBEqualsStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBHashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBMergeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBToStringStrategy;
import org.jvnet.jaxb2_commons.lang.MergeFrom2;
import org.jvnet.jaxb2_commons.lang.MergeStrategy2;
import org.jvnet.jaxb2_commons.lang.ToString2;
import org.jvnet.jaxb2_commons.lang.ToStringStrategy2;
import org.jvnet.jaxb2_commons.locator.ObjectLocator;
import org.jvnet.jaxb2_commons.locator.util.LocatorUtils;


/**
 * Telephone numbers for contacting the responsible individual or organisation
 * 
 * <p>Java class for CI_Telephone_Type complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="CI_Telephone_Type"&gt;
 *   &lt;complexContent&gt;
 *     &lt;extension base="{http://www.isotc211.org/2005/gco}AbstractObject_Type"&gt;
 *       &lt;sequence&gt;
 *         &lt;element name="voice" type="{http://www.isotc211.org/2005/gco}CharacterString_PropertyType" maxOccurs="unbounded" minOccurs="0"/&gt;
 *         &lt;element name="facsimile" type="{http://www.isotc211.org/2005/gco}CharacterString_PropertyType" maxOccurs="unbounded" minOccurs="0"/&gt;
 *       &lt;/sequence&gt;
 *     &lt;/extension&gt;
 *   &lt;/complexContent&gt;
 * &lt;/complexType&gt;
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "CI_Telephone_Type", propOrder = {
    "voice",
    "facsimile"
})
public class CITelephoneType
    extends AbstractObjectType
    implements Serializable, Cloneable, CopyTo2, Equals2, HashCode2, MergeFrom2, ToString2
{

    private final static long serialVersionUID = 1L;
    @Valid
    protected List<CharacterStringPropertyType> voice;
    @Valid
    protected List<CharacterStringPropertyType> facsimile;

    /**
     * Gets the value of the voice property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the voice property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getVoice().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link CharacterStringPropertyType }
     * 
     * 
     */
    public List<CharacterStringPropertyType> getVoice() {
        if (voice == null) {
            voice = new ArrayList<CharacterStringPropertyType>();
        }
        return this.voice;
    }

    public boolean isSetVoice() {
        return ((this.voice!= null)&&(!this.voice.isEmpty()));
    }

    public void unsetVoice() {
        this.voice = null;
    }

    /**
     * Gets the value of the facsimile property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the facsimile property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getFacsimile().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link CharacterStringPropertyType }
     * 
     * 
     */
    public List<CharacterStringPropertyType> getFacsimile() {
        if (facsimile == null) {
            facsimile = new ArrayList<CharacterStringPropertyType>();
        }
        return this.facsimile;
    }

    public boolean isSetFacsimile() {
        return ((this.facsimile!= null)&&(!this.facsimile.isEmpty()));
    }

    public void unsetFacsimile() {
        this.facsimile = null;
    }

    public String toString() {
        final ToStringStrategy2 strategy = JAXBToStringStrategy.INSTANCE;
        final StringBuilder buffer = new StringBuilder();
        append(null, buffer, strategy);
        return buffer.toString();
    }

    public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy2 strategy) {
        strategy.appendStart(locator, this, buffer);
        appendFields(locator, buffer, strategy);
        strategy.appendEnd(locator, this, buffer);
        return buffer;
    }

    public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy2 strategy) {
        super.appendFields(locator, buffer, strategy);
        {
            List<CharacterStringPropertyType> theVoice;
            theVoice = (this.isSetVoice()?this.getVoice():null);
            strategy.appendField(locator, this, "voice", buffer, theVoice, this.isSetVoice());
        }
        {
            List<CharacterStringPropertyType> theFacsimile;
            theFacsimile = (this.isSetFacsimile()?this.getFacsimile():null);
            strategy.appendField(locator, this, "facsimile", buffer, theFacsimile, this.isSetFacsimile());
        }
        return buffer;
    }

    public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy2 strategy) {
        if ((object == null)||(this.getClass()!= object.getClass())) {
            return false;
        }
        if (this == object) {
            return true;
        }
        if (!super.equals(thisLocator, thatLocator, object, strategy)) {
            return false;
        }
        final CITelephoneType that = ((CITelephoneType) object);
        {
            List<CharacterStringPropertyType> lhsVoice;
            lhsVoice = (this.isSetVoice()?this.getVoice():null);
            List<CharacterStringPropertyType> rhsVoice;
            rhsVoice = (that.isSetVoice()?that.getVoice():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "voice", lhsVoice), LocatorUtils.property(thatLocator, "voice", rhsVoice), lhsVoice, rhsVoice, this.isSetVoice(), that.isSetVoice())) {
                return false;
            }
        }
        {
            List<CharacterStringPropertyType> lhsFacsimile;
            lhsFacsimile = (this.isSetFacsimile()?this.getFacsimile():null);
            List<CharacterStringPropertyType> rhsFacsimile;
            rhsFacsimile = (that.isSetFacsimile()?that.getFacsimile():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "facsimile", lhsFacsimile), LocatorUtils.property(thatLocator, "facsimile", rhsFacsimile), lhsFacsimile, rhsFacsimile, this.isSetFacsimile(), that.isSetFacsimile())) {
                return false;
            }
        }
        return true;
    }

    public boolean equals(Object object) {
        final EqualsStrategy2 strategy = JAXBEqualsStrategy.INSTANCE;
        return equals(null, null, object, strategy);
    }

    public int hashCode(ObjectLocator locator, HashCodeStrategy2 strategy) {
        int currentHashCode = super.hashCode(locator, strategy);
        {
            List<CharacterStringPropertyType> theVoice;
            theVoice = (this.isSetVoice()?this.getVoice():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "voice", theVoice), currentHashCode, theVoice, this.isSetVoice());
        }
        {
            List<CharacterStringPropertyType> theFacsimile;
            theFacsimile = (this.isSetFacsimile()?this.getFacsimile():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "facsimile", theFacsimile), currentHashCode, theFacsimile, this.isSetFacsimile());
        }
        return currentHashCode;
    }

    public int hashCode() {
        final HashCodeStrategy2 strategy = JAXBHashCodeStrategy.INSTANCE;
        return this.hashCode(null, strategy);
    }

    public Object clone() {
        return copyTo(createNewInstance());
    }

    public Object copyTo(Object target) {
        final CopyStrategy2 strategy = JAXBCopyStrategy.INSTANCE;
        return copyTo(null, target, strategy);
    }

    public Object copyTo(ObjectLocator locator, Object target, CopyStrategy2 strategy) {
        final Object draftCopy = ((target == null)?createNewInstance():target);
        super.copyTo(locator, draftCopy, strategy);
        if (draftCopy instanceof CITelephoneType) {
            final CITelephoneType copy = ((CITelephoneType) draftCopy);
            {
                Boolean voiceShouldBeCopiedAndSet = strategy.shouldBeCopiedAndSet(locator, this.isSetVoice());
                if (voiceShouldBeCopiedAndSet == Boolean.TRUE) {
                    List<CharacterStringPropertyType> sourceVoice;
                    sourceVoice = (this.isSetVoice()?this.getVoice():null);
                    @SuppressWarnings("unchecked")
                    List<CharacterStringPropertyType> copyVoice = ((List<CharacterStringPropertyType> ) strategy.copy(LocatorUtils.property(locator, "voice", sourceVoice), sourceVoice, this.isSetVoice()));
                    copy.unsetVoice();
                    if (copyVoice!= null) {
                        List<CharacterStringPropertyType> uniqueVoicel = copy.getVoice();
                        uniqueVoicel.addAll(copyVoice);
                    }
                } else {
                    if (voiceShouldBeCopiedAndSet == Boolean.FALSE) {
                        copy.unsetVoice();
                    }
                }
            }
            {
                Boolean facsimileShouldBeCopiedAndSet = strategy.shouldBeCopiedAndSet(locator, this.isSetFacsimile());
                if (facsimileShouldBeCopiedAndSet == Boolean.TRUE) {
                    List<CharacterStringPropertyType> sourceFacsimile;
                    sourceFacsimile = (this.isSetFacsimile()?this.getFacsimile():null);
                    @SuppressWarnings("unchecked")
                    List<CharacterStringPropertyType> copyFacsimile = ((List<CharacterStringPropertyType> ) strategy.copy(LocatorUtils.property(locator, "facsimile", sourceFacsimile), sourceFacsimile, this.isSetFacsimile()));
                    copy.unsetFacsimile();
                    if (copyFacsimile!= null) {
                        List<CharacterStringPropertyType> uniqueFacsimilel = copy.getFacsimile();
                        uniqueFacsimilel.addAll(copyFacsimile);
                    }
                } else {
                    if (facsimileShouldBeCopiedAndSet == Boolean.FALSE) {
                        copy.unsetFacsimile();
                    }
                }
            }
        }
        return draftCopy;
    }

    public Object createNewInstance() {
        return new CITelephoneType();
    }

    public void mergeFrom(Object left, Object right) {
        final MergeStrategy2 strategy = JAXBMergeStrategy.INSTANCE;
        mergeFrom(null, null, left, right, strategy);
    }

    public void mergeFrom(ObjectLocator leftLocator, ObjectLocator rightLocator, Object left, Object right, MergeStrategy2 strategy) {
        super.mergeFrom(leftLocator, rightLocator, left, right, strategy);
        if (right instanceof CITelephoneType) {
            final CITelephoneType target = this;
            final CITelephoneType leftObject = ((CITelephoneType) left);
            final CITelephoneType rightObject = ((CITelephoneType) right);
            {
                Boolean voiceShouldBeMergedAndSet = strategy.shouldBeMergedAndSet(leftLocator, rightLocator, leftObject.isSetVoice(), rightObject.isSetVoice());
                if (voiceShouldBeMergedAndSet == Boolean.TRUE) {
                    List<CharacterStringPropertyType> lhsVoice;
                    lhsVoice = (leftObject.isSetVoice()?leftObject.getVoice():null);
                    List<CharacterStringPropertyType> rhsVoice;
                    rhsVoice = (rightObject.isSetVoice()?rightObject.getVoice():null);
                    List<CharacterStringPropertyType> mergedVoice = ((List<CharacterStringPropertyType> ) strategy.merge(LocatorUtils.property(leftLocator, "voice", lhsVoice), LocatorUtils.property(rightLocator, "voice", rhsVoice), lhsVoice, rhsVoice, leftObject.isSetVoice(), rightObject.isSetVoice()));
                    target.unsetVoice();
                    if (mergedVoice!= null) {
                        List<CharacterStringPropertyType> uniqueVoicel = target.getVoice();
                        uniqueVoicel.addAll(mergedVoice);
                    }
                } else {
                    if (voiceShouldBeMergedAndSet == Boolean.FALSE) {
                        target.unsetVoice();
                    }
                }
            }
            {
                Boolean facsimileShouldBeMergedAndSet = strategy.shouldBeMergedAndSet(leftLocator, rightLocator, leftObject.isSetFacsimile(), rightObject.isSetFacsimile());
                if (facsimileShouldBeMergedAndSet == Boolean.TRUE) {
                    List<CharacterStringPropertyType> lhsFacsimile;
                    lhsFacsimile = (leftObject.isSetFacsimile()?leftObject.getFacsimile():null);
                    List<CharacterStringPropertyType> rhsFacsimile;
                    rhsFacsimile = (rightObject.isSetFacsimile()?rightObject.getFacsimile():null);
                    List<CharacterStringPropertyType> mergedFacsimile = ((List<CharacterStringPropertyType> ) strategy.merge(LocatorUtils.property(leftLocator, "facsimile", lhsFacsimile), LocatorUtils.property(rightLocator, "facsimile", rhsFacsimile), lhsFacsimile, rhsFacsimile, leftObject.isSetFacsimile(), rightObject.isSetFacsimile()));
                    target.unsetFacsimile();
                    if (mergedFacsimile!= null) {
                        List<CharacterStringPropertyType> uniqueFacsimilel = target.getFacsimile();
                        uniqueFacsimilel.addAll(mergedFacsimile);
                    }
                } else {
                    if (facsimileShouldBeMergedAndSet == Boolean.FALSE) {
                        target.unsetFacsimile();
                    }
                }
            }
        }
    }

    public void setVoice(List<CharacterStringPropertyType> value) {
        this.voice = null;
        if (value!= null) {
            List<CharacterStringPropertyType> draftl = this.getVoice();
            draftl.addAll(value);
        }
    }

    public void setFacsimile(List<CharacterStringPropertyType> value) {
        this.facsimile = null;
        if (value!= null) {
            List<CharacterStringPropertyType> draftl = this.getFacsimile();
            draftl.addAll(value);
        }
    }

}
