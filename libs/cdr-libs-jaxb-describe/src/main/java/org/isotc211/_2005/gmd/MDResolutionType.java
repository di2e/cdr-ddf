//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.11 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2016.07.27 at 04:06:37 PM EDT 
//


package org.isotc211._2005.gmd;

import java.io.Serializable;
import javax.validation.Valid;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlType;
import org.isotc211._2005.gco.DistancePropertyType;
import org.jvnet.jaxb2_commons.lang.CopyStrategy2;
import org.jvnet.jaxb2_commons.lang.CopyTo2;
import org.jvnet.jaxb2_commons.lang.Equals2;
import org.jvnet.jaxb2_commons.lang.EqualsStrategy2;
import org.jvnet.jaxb2_commons.lang.HashCode2;
import org.jvnet.jaxb2_commons.lang.HashCodeStrategy2;
import org.jvnet.jaxb2_commons.lang.JAXBCopyStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBEqualsStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBHashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBMergeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBToStringStrategy;
import org.jvnet.jaxb2_commons.lang.MergeFrom2;
import org.jvnet.jaxb2_commons.lang.MergeStrategy2;
import org.jvnet.jaxb2_commons.lang.ToString2;
import org.jvnet.jaxb2_commons.lang.ToStringStrategy2;
import org.jvnet.jaxb2_commons.locator.ObjectLocator;
import org.jvnet.jaxb2_commons.locator.util.LocatorUtils;


/**
 * <p>Java class for MD_Resolution_Type complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="MD_Resolution_Type"&gt;
 *   &lt;complexContent&gt;
 *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
 *       &lt;choice&gt;
 *         &lt;element name="equivalentScale" type="{http://www.isotc211.org/2005/gmd}MD_RepresentativeFraction_PropertyType"/&gt;
 *         &lt;element name="distance" type="{http://www.isotc211.org/2005/gco}Distance_PropertyType"/&gt;
 *       &lt;/choice&gt;
 *     &lt;/restriction&gt;
 *   &lt;/complexContent&gt;
 * &lt;/complexType&gt;
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "MD_Resolution_Type", propOrder = {
    "equivalentScale",
    "distance"
})
public class MDResolutionType implements Serializable, Cloneable, CopyTo2, Equals2, HashCode2, MergeFrom2, ToString2
{

    private final static long serialVersionUID = 1L;
    @Valid
    protected MDRepresentativeFractionPropertyType equivalentScale;
    @Valid
    protected DistancePropertyType distance;

    /**
     * Gets the value of the equivalentScale property.
     * 
     * @return
     *     possible object is
     *     {@link MDRepresentativeFractionPropertyType }
     *     
     */
    public MDRepresentativeFractionPropertyType getEquivalentScale() {
        return equivalentScale;
    }

    /**
     * Sets the value of the equivalentScale property.
     * 
     * @param value
     *     allowed object is
     *     {@link MDRepresentativeFractionPropertyType }
     *     
     */
    public void setEquivalentScale(MDRepresentativeFractionPropertyType value) {
        this.equivalentScale = value;
    }

    public boolean isSetEquivalentScale() {
        return (this.equivalentScale!= null);
    }

    /**
     * Gets the value of the distance property.
     * 
     * @return
     *     possible object is
     *     {@link DistancePropertyType }
     *     
     */
    public DistancePropertyType getDistance() {
        return distance;
    }

    /**
     * Sets the value of the distance property.
     * 
     * @param value
     *     allowed object is
     *     {@link DistancePropertyType }
     *     
     */
    public void setDistance(DistancePropertyType value) {
        this.distance = value;
    }

    public boolean isSetDistance() {
        return (this.distance!= null);
    }

    public String toString() {
        final ToStringStrategy2 strategy = JAXBToStringStrategy.INSTANCE;
        final StringBuilder buffer = new StringBuilder();
        append(null, buffer, strategy);
        return buffer.toString();
    }

    public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy2 strategy) {
        strategy.appendStart(locator, this, buffer);
        appendFields(locator, buffer, strategy);
        strategy.appendEnd(locator, this, buffer);
        return buffer;
    }

    public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy2 strategy) {
        {
            MDRepresentativeFractionPropertyType theEquivalentScale;
            theEquivalentScale = this.getEquivalentScale();
            strategy.appendField(locator, this, "equivalentScale", buffer, theEquivalentScale, this.isSetEquivalentScale());
        }
        {
            DistancePropertyType theDistance;
            theDistance = this.getDistance();
            strategy.appendField(locator, this, "distance", buffer, theDistance, this.isSetDistance());
        }
        return buffer;
    }

    public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy2 strategy) {
        if ((object == null)||(this.getClass()!= object.getClass())) {
            return false;
        }
        if (this == object) {
            return true;
        }
        final MDResolutionType that = ((MDResolutionType) object);
        {
            MDRepresentativeFractionPropertyType lhsEquivalentScale;
            lhsEquivalentScale = this.getEquivalentScale();
            MDRepresentativeFractionPropertyType rhsEquivalentScale;
            rhsEquivalentScale = that.getEquivalentScale();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "equivalentScale", lhsEquivalentScale), LocatorUtils.property(thatLocator, "equivalentScale", rhsEquivalentScale), lhsEquivalentScale, rhsEquivalentScale, this.isSetEquivalentScale(), that.isSetEquivalentScale())) {
                return false;
            }
        }
        {
            DistancePropertyType lhsDistance;
            lhsDistance = this.getDistance();
            DistancePropertyType rhsDistance;
            rhsDistance = that.getDistance();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "distance", lhsDistance), LocatorUtils.property(thatLocator, "distance", rhsDistance), lhsDistance, rhsDistance, this.isSetDistance(), that.isSetDistance())) {
                return false;
            }
        }
        return true;
    }

    public boolean equals(Object object) {
        final EqualsStrategy2 strategy = JAXBEqualsStrategy.INSTANCE;
        return equals(null, null, object, strategy);
    }

    public int hashCode(ObjectLocator locator, HashCodeStrategy2 strategy) {
        int currentHashCode = 1;
        {
            MDRepresentativeFractionPropertyType theEquivalentScale;
            theEquivalentScale = this.getEquivalentScale();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "equivalentScale", theEquivalentScale), currentHashCode, theEquivalentScale, this.isSetEquivalentScale());
        }
        {
            DistancePropertyType theDistance;
            theDistance = this.getDistance();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "distance", theDistance), currentHashCode, theDistance, this.isSetDistance());
        }
        return currentHashCode;
    }

    public int hashCode() {
        final HashCodeStrategy2 strategy = JAXBHashCodeStrategy.INSTANCE;
        return this.hashCode(null, strategy);
    }

    public Object clone() {
        return copyTo(createNewInstance());
    }

    public Object copyTo(Object target) {
        final CopyStrategy2 strategy = JAXBCopyStrategy.INSTANCE;
        return copyTo(null, target, strategy);
    }

    public Object copyTo(ObjectLocator locator, Object target, CopyStrategy2 strategy) {
        final Object draftCopy = ((target == null)?createNewInstance():target);
        if (draftCopy instanceof MDResolutionType) {
            final MDResolutionType copy = ((MDResolutionType) draftCopy);
            {
                Boolean equivalentScaleShouldBeCopiedAndSet = strategy.shouldBeCopiedAndSet(locator, this.isSetEquivalentScale());
                if (equivalentScaleShouldBeCopiedAndSet == Boolean.TRUE) {
                    MDRepresentativeFractionPropertyType sourceEquivalentScale;
                    sourceEquivalentScale = this.getEquivalentScale();
                    MDRepresentativeFractionPropertyType copyEquivalentScale = ((MDRepresentativeFractionPropertyType) strategy.copy(LocatorUtils.property(locator, "equivalentScale", sourceEquivalentScale), sourceEquivalentScale, this.isSetEquivalentScale()));
                    copy.setEquivalentScale(copyEquivalentScale);
                } else {
                    if (equivalentScaleShouldBeCopiedAndSet == Boolean.FALSE) {
                        copy.equivalentScale = null;
                    }
                }
            }
            {
                Boolean distanceShouldBeCopiedAndSet = strategy.shouldBeCopiedAndSet(locator, this.isSetDistance());
                if (distanceShouldBeCopiedAndSet == Boolean.TRUE) {
                    DistancePropertyType sourceDistance;
                    sourceDistance = this.getDistance();
                    DistancePropertyType copyDistance = ((DistancePropertyType) strategy.copy(LocatorUtils.property(locator, "distance", sourceDistance), sourceDistance, this.isSetDistance()));
                    copy.setDistance(copyDistance);
                } else {
                    if (distanceShouldBeCopiedAndSet == Boolean.FALSE) {
                        copy.distance = null;
                    }
                }
            }
        }
        return draftCopy;
    }

    public Object createNewInstance() {
        return new MDResolutionType();
    }

    public void mergeFrom(Object left, Object right) {
        final MergeStrategy2 strategy = JAXBMergeStrategy.INSTANCE;
        mergeFrom(null, null, left, right, strategy);
    }

    public void mergeFrom(ObjectLocator leftLocator, ObjectLocator rightLocator, Object left, Object right, MergeStrategy2 strategy) {
        if (right instanceof MDResolutionType) {
            final MDResolutionType target = this;
            final MDResolutionType leftObject = ((MDResolutionType) left);
            final MDResolutionType rightObject = ((MDResolutionType) right);
            {
                Boolean equivalentScaleShouldBeMergedAndSet = strategy.shouldBeMergedAndSet(leftLocator, rightLocator, leftObject.isSetEquivalentScale(), rightObject.isSetEquivalentScale());
                if (equivalentScaleShouldBeMergedAndSet == Boolean.TRUE) {
                    MDRepresentativeFractionPropertyType lhsEquivalentScale;
                    lhsEquivalentScale = leftObject.getEquivalentScale();
                    MDRepresentativeFractionPropertyType rhsEquivalentScale;
                    rhsEquivalentScale = rightObject.getEquivalentScale();
                    MDRepresentativeFractionPropertyType mergedEquivalentScale = ((MDRepresentativeFractionPropertyType) strategy.merge(LocatorUtils.property(leftLocator, "equivalentScale", lhsEquivalentScale), LocatorUtils.property(rightLocator, "equivalentScale", rhsEquivalentScale), lhsEquivalentScale, rhsEquivalentScale, leftObject.isSetEquivalentScale(), rightObject.isSetEquivalentScale()));
                    target.setEquivalentScale(mergedEquivalentScale);
                } else {
                    if (equivalentScaleShouldBeMergedAndSet == Boolean.FALSE) {
                        target.equivalentScale = null;
                    }
                }
            }
            {
                Boolean distanceShouldBeMergedAndSet = strategy.shouldBeMergedAndSet(leftLocator, rightLocator, leftObject.isSetDistance(), rightObject.isSetDistance());
                if (distanceShouldBeMergedAndSet == Boolean.TRUE) {
                    DistancePropertyType lhsDistance;
                    lhsDistance = leftObject.getDistance();
                    DistancePropertyType rhsDistance;
                    rhsDistance = rightObject.getDistance();
                    DistancePropertyType mergedDistance = ((DistancePropertyType) strategy.merge(LocatorUtils.property(leftLocator, "distance", lhsDistance), LocatorUtils.property(rightLocator, "distance", rhsDistance), lhsDistance, rhsDistance, leftObject.isSetDistance(), rightObject.isSetDistance()));
                    target.setDistance(mergedDistance);
                } else {
                    if (distanceShouldBeMergedAndSet == Boolean.FALSE) {
                        target.distance = null;
                    }
                }
            }
        }
    }

}
