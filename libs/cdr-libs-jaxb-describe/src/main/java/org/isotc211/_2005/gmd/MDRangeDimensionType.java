//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.11 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2016.07.27 at 04:06:37 PM EDT 
//


package org.isotc211._2005.gmd;

import java.io.Serializable;
import javax.validation.Valid;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlSeeAlso;
import javax.xml.bind.annotation.XmlType;
import org.isotc211._2005.gco.AbstractObjectType;
import org.isotc211._2005.gco.CharacterStringPropertyType;
import org.isotc211._2005.gco.MemberNamePropertyType;
import org.jvnet.jaxb2_commons.lang.CopyStrategy2;
import org.jvnet.jaxb2_commons.lang.CopyTo2;
import org.jvnet.jaxb2_commons.lang.Equals2;
import org.jvnet.jaxb2_commons.lang.EqualsStrategy2;
import org.jvnet.jaxb2_commons.lang.HashCode2;
import org.jvnet.jaxb2_commons.lang.HashCodeStrategy2;
import org.jvnet.jaxb2_commons.lang.JAXBCopyStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBEqualsStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBHashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBMergeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBToStringStrategy;
import org.jvnet.jaxb2_commons.lang.MergeFrom2;
import org.jvnet.jaxb2_commons.lang.MergeStrategy2;
import org.jvnet.jaxb2_commons.lang.ToString2;
import org.jvnet.jaxb2_commons.lang.ToStringStrategy2;
import org.jvnet.jaxb2_commons.locator.ObjectLocator;
import org.jvnet.jaxb2_commons.locator.util.LocatorUtils;


/**
 * Set of adjacent wavelengths in the electro-magnetic spectrum with a common characteristic, such as the visible band
 * 
 * <p>Java class for MD_RangeDimension_Type complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="MD_RangeDimension_Type"&gt;
 *   &lt;complexContent&gt;
 *     &lt;extension base="{http://www.isotc211.org/2005/gco}AbstractObject_Type"&gt;
 *       &lt;sequence&gt;
 *         &lt;element name="sequenceIdentifier" type="{http://www.isotc211.org/2005/gco}MemberName_PropertyType" minOccurs="0"/&gt;
 *         &lt;element name="descriptor" type="{http://www.isotc211.org/2005/gco}CharacterString_PropertyType" minOccurs="0"/&gt;
 *       &lt;/sequence&gt;
 *     &lt;/extension&gt;
 *   &lt;/complexContent&gt;
 * &lt;/complexType&gt;
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "MD_RangeDimension_Type", propOrder = {
    "sequenceIdentifier",
    "descriptor"
})
@XmlSeeAlso({
    MDBandType.class
})
public class MDRangeDimensionType
    extends AbstractObjectType
    implements Serializable, Cloneable, CopyTo2, Equals2, HashCode2, MergeFrom2, ToString2
{

    private final static long serialVersionUID = 1L;
    @Valid
    protected MemberNamePropertyType sequenceIdentifier;
    @Valid
    protected CharacterStringPropertyType descriptor;

    /**
     * Gets the value of the sequenceIdentifier property.
     * 
     * @return
     *     possible object is
     *     {@link MemberNamePropertyType }
     *     
     */
    public MemberNamePropertyType getSequenceIdentifier() {
        return sequenceIdentifier;
    }

    /**
     * Sets the value of the sequenceIdentifier property.
     * 
     * @param value
     *     allowed object is
     *     {@link MemberNamePropertyType }
     *     
     */
    public void setSequenceIdentifier(MemberNamePropertyType value) {
        this.sequenceIdentifier = value;
    }

    public boolean isSetSequenceIdentifier() {
        return (this.sequenceIdentifier!= null);
    }

    /**
     * Gets the value of the descriptor property.
     * 
     * @return
     *     possible object is
     *     {@link CharacterStringPropertyType }
     *     
     */
    public CharacterStringPropertyType getDescriptor() {
        return descriptor;
    }

    /**
     * Sets the value of the descriptor property.
     * 
     * @param value
     *     allowed object is
     *     {@link CharacterStringPropertyType }
     *     
     */
    public void setDescriptor(CharacterStringPropertyType value) {
        this.descriptor = value;
    }

    public boolean isSetDescriptor() {
        return (this.descriptor!= null);
    }

    public String toString() {
        final ToStringStrategy2 strategy = JAXBToStringStrategy.INSTANCE;
        final StringBuilder buffer = new StringBuilder();
        append(null, buffer, strategy);
        return buffer.toString();
    }

    public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy2 strategy) {
        strategy.appendStart(locator, this, buffer);
        appendFields(locator, buffer, strategy);
        strategy.appendEnd(locator, this, buffer);
        return buffer;
    }

    public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy2 strategy) {
        super.appendFields(locator, buffer, strategy);
        {
            MemberNamePropertyType theSequenceIdentifier;
            theSequenceIdentifier = this.getSequenceIdentifier();
            strategy.appendField(locator, this, "sequenceIdentifier", buffer, theSequenceIdentifier, this.isSetSequenceIdentifier());
        }
        {
            CharacterStringPropertyType theDescriptor;
            theDescriptor = this.getDescriptor();
            strategy.appendField(locator, this, "descriptor", buffer, theDescriptor, this.isSetDescriptor());
        }
        return buffer;
    }

    public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy2 strategy) {
        if ((object == null)||(this.getClass()!= object.getClass())) {
            return false;
        }
        if (this == object) {
            return true;
        }
        if (!super.equals(thisLocator, thatLocator, object, strategy)) {
            return false;
        }
        final MDRangeDimensionType that = ((MDRangeDimensionType) object);
        {
            MemberNamePropertyType lhsSequenceIdentifier;
            lhsSequenceIdentifier = this.getSequenceIdentifier();
            MemberNamePropertyType rhsSequenceIdentifier;
            rhsSequenceIdentifier = that.getSequenceIdentifier();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "sequenceIdentifier", lhsSequenceIdentifier), LocatorUtils.property(thatLocator, "sequenceIdentifier", rhsSequenceIdentifier), lhsSequenceIdentifier, rhsSequenceIdentifier, this.isSetSequenceIdentifier(), that.isSetSequenceIdentifier())) {
                return false;
            }
        }
        {
            CharacterStringPropertyType lhsDescriptor;
            lhsDescriptor = this.getDescriptor();
            CharacterStringPropertyType rhsDescriptor;
            rhsDescriptor = that.getDescriptor();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "descriptor", lhsDescriptor), LocatorUtils.property(thatLocator, "descriptor", rhsDescriptor), lhsDescriptor, rhsDescriptor, this.isSetDescriptor(), that.isSetDescriptor())) {
                return false;
            }
        }
        return true;
    }

    public boolean equals(Object object) {
        final EqualsStrategy2 strategy = JAXBEqualsStrategy.INSTANCE;
        return equals(null, null, object, strategy);
    }

    public int hashCode(ObjectLocator locator, HashCodeStrategy2 strategy) {
        int currentHashCode = super.hashCode(locator, strategy);
        {
            MemberNamePropertyType theSequenceIdentifier;
            theSequenceIdentifier = this.getSequenceIdentifier();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "sequenceIdentifier", theSequenceIdentifier), currentHashCode, theSequenceIdentifier, this.isSetSequenceIdentifier());
        }
        {
            CharacterStringPropertyType theDescriptor;
            theDescriptor = this.getDescriptor();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "descriptor", theDescriptor), currentHashCode, theDescriptor, this.isSetDescriptor());
        }
        return currentHashCode;
    }

    public int hashCode() {
        final HashCodeStrategy2 strategy = JAXBHashCodeStrategy.INSTANCE;
        return this.hashCode(null, strategy);
    }

    public Object clone() {
        return copyTo(createNewInstance());
    }

    public Object copyTo(Object target) {
        final CopyStrategy2 strategy = JAXBCopyStrategy.INSTANCE;
        return copyTo(null, target, strategy);
    }

    public Object copyTo(ObjectLocator locator, Object target, CopyStrategy2 strategy) {
        final Object draftCopy = ((target == null)?createNewInstance():target);
        super.copyTo(locator, draftCopy, strategy);
        if (draftCopy instanceof MDRangeDimensionType) {
            final MDRangeDimensionType copy = ((MDRangeDimensionType) draftCopy);
            {
                Boolean sequenceIdentifierShouldBeCopiedAndSet = strategy.shouldBeCopiedAndSet(locator, this.isSetSequenceIdentifier());
                if (sequenceIdentifierShouldBeCopiedAndSet == Boolean.TRUE) {
                    MemberNamePropertyType sourceSequenceIdentifier;
                    sourceSequenceIdentifier = this.getSequenceIdentifier();
                    MemberNamePropertyType copySequenceIdentifier = ((MemberNamePropertyType) strategy.copy(LocatorUtils.property(locator, "sequenceIdentifier", sourceSequenceIdentifier), sourceSequenceIdentifier, this.isSetSequenceIdentifier()));
                    copy.setSequenceIdentifier(copySequenceIdentifier);
                } else {
                    if (sequenceIdentifierShouldBeCopiedAndSet == Boolean.FALSE) {
                        copy.sequenceIdentifier = null;
                    }
                }
            }
            {
                Boolean descriptorShouldBeCopiedAndSet = strategy.shouldBeCopiedAndSet(locator, this.isSetDescriptor());
                if (descriptorShouldBeCopiedAndSet == Boolean.TRUE) {
                    CharacterStringPropertyType sourceDescriptor;
                    sourceDescriptor = this.getDescriptor();
                    CharacterStringPropertyType copyDescriptor = ((CharacterStringPropertyType) strategy.copy(LocatorUtils.property(locator, "descriptor", sourceDescriptor), sourceDescriptor, this.isSetDescriptor()));
                    copy.setDescriptor(copyDescriptor);
                } else {
                    if (descriptorShouldBeCopiedAndSet == Boolean.FALSE) {
                        copy.descriptor = null;
                    }
                }
            }
        }
        return draftCopy;
    }

    public Object createNewInstance() {
        return new MDRangeDimensionType();
    }

    public void mergeFrom(Object left, Object right) {
        final MergeStrategy2 strategy = JAXBMergeStrategy.INSTANCE;
        mergeFrom(null, null, left, right, strategy);
    }

    public void mergeFrom(ObjectLocator leftLocator, ObjectLocator rightLocator, Object left, Object right, MergeStrategy2 strategy) {
        super.mergeFrom(leftLocator, rightLocator, left, right, strategy);
        if (right instanceof MDRangeDimensionType) {
            final MDRangeDimensionType target = this;
            final MDRangeDimensionType leftObject = ((MDRangeDimensionType) left);
            final MDRangeDimensionType rightObject = ((MDRangeDimensionType) right);
            {
                Boolean sequenceIdentifierShouldBeMergedAndSet = strategy.shouldBeMergedAndSet(leftLocator, rightLocator, leftObject.isSetSequenceIdentifier(), rightObject.isSetSequenceIdentifier());
                if (sequenceIdentifierShouldBeMergedAndSet == Boolean.TRUE) {
                    MemberNamePropertyType lhsSequenceIdentifier;
                    lhsSequenceIdentifier = leftObject.getSequenceIdentifier();
                    MemberNamePropertyType rhsSequenceIdentifier;
                    rhsSequenceIdentifier = rightObject.getSequenceIdentifier();
                    MemberNamePropertyType mergedSequenceIdentifier = ((MemberNamePropertyType) strategy.merge(LocatorUtils.property(leftLocator, "sequenceIdentifier", lhsSequenceIdentifier), LocatorUtils.property(rightLocator, "sequenceIdentifier", rhsSequenceIdentifier), lhsSequenceIdentifier, rhsSequenceIdentifier, leftObject.isSetSequenceIdentifier(), rightObject.isSetSequenceIdentifier()));
                    target.setSequenceIdentifier(mergedSequenceIdentifier);
                } else {
                    if (sequenceIdentifierShouldBeMergedAndSet == Boolean.FALSE) {
                        target.sequenceIdentifier = null;
                    }
                }
            }
            {
                Boolean descriptorShouldBeMergedAndSet = strategy.shouldBeMergedAndSet(leftLocator, rightLocator, leftObject.isSetDescriptor(), rightObject.isSetDescriptor());
                if (descriptorShouldBeMergedAndSet == Boolean.TRUE) {
                    CharacterStringPropertyType lhsDescriptor;
                    lhsDescriptor = leftObject.getDescriptor();
                    CharacterStringPropertyType rhsDescriptor;
                    rhsDescriptor = rightObject.getDescriptor();
                    CharacterStringPropertyType mergedDescriptor = ((CharacterStringPropertyType) strategy.merge(LocatorUtils.property(leftLocator, "descriptor", lhsDescriptor), LocatorUtils.property(rightLocator, "descriptor", rhsDescriptor), lhsDescriptor, rhsDescriptor, leftObject.isSetDescriptor(), rightObject.isSetDescriptor()));
                    target.setDescriptor(mergedDescriptor);
                } else {
                    if (descriptorShouldBeMergedAndSet == Boolean.FALSE) {
                        target.descriptor = null;
                    }
                }
            }
        }
    }

}
