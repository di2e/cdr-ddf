//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.11 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2016.07.27 at 04:06:37 PM EDT 
//


package org.isotc211._2005.gmd;

import java.io.Serializable;
import java.util.ArrayList;
import java.util.List;
import javax.validation.Valid;
import javax.validation.constraints.NotNull;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlType;
import org.isotc211._2005.gco.AbstractObjectType;
import org.isotc211._2005.gco.CharacterStringPropertyType;
import org.jvnet.jaxb2_commons.lang.CopyStrategy2;
import org.jvnet.jaxb2_commons.lang.CopyTo2;
import org.jvnet.jaxb2_commons.lang.Equals2;
import org.jvnet.jaxb2_commons.lang.EqualsStrategy2;
import org.jvnet.jaxb2_commons.lang.HashCode2;
import org.jvnet.jaxb2_commons.lang.HashCodeStrategy2;
import org.jvnet.jaxb2_commons.lang.JAXBCopyStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBEqualsStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBHashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBMergeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBToStringStrategy;
import org.jvnet.jaxb2_commons.lang.MergeFrom2;
import org.jvnet.jaxb2_commons.lang.MergeStrategy2;
import org.jvnet.jaxb2_commons.lang.ToString2;
import org.jvnet.jaxb2_commons.lang.ToStringStrategy2;
import org.jvnet.jaxb2_commons.locator.ObjectLocator;
import org.jvnet.jaxb2_commons.locator.util.LocatorUtils;


/**
 * Description of the form of the data to be distributed
 * 
 * <p>Java class for MD_Format_Type complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="MD_Format_Type"&gt;
 *   &lt;complexContent&gt;
 *     &lt;extension base="{http://www.isotc211.org/2005/gco}AbstractObject_Type"&gt;
 *       &lt;sequence&gt;
 *         &lt;element name="name" type="{http://www.isotc211.org/2005/gco}CharacterString_PropertyType"/&gt;
 *         &lt;element name="version" type="{http://www.isotc211.org/2005/gco}CharacterString_PropertyType"/&gt;
 *         &lt;element name="amendmentNumber" type="{http://www.isotc211.org/2005/gco}CharacterString_PropertyType" minOccurs="0"/&gt;
 *         &lt;element name="specification" type="{http://www.isotc211.org/2005/gco}CharacterString_PropertyType" minOccurs="0"/&gt;
 *         &lt;element name="fileDecompressionTechnique" type="{http://www.isotc211.org/2005/gco}CharacterString_PropertyType" minOccurs="0"/&gt;
 *         &lt;element name="formatDistributor" type="{http://www.isotc211.org/2005/gmd}MD_Distributor_PropertyType" maxOccurs="unbounded" minOccurs="0"/&gt;
 *       &lt;/sequence&gt;
 *     &lt;/extension&gt;
 *   &lt;/complexContent&gt;
 * &lt;/complexType&gt;
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "MD_Format_Type", propOrder = {
    "name",
    "version",
    "amendmentNumber",
    "specification",
    "fileDecompressionTechnique",
    "formatDistributor"
})
public class MDFormatType
    extends AbstractObjectType
    implements Serializable, Cloneable, CopyTo2, Equals2, HashCode2, MergeFrom2, ToString2
{

    private final static long serialVersionUID = 1L;
    @XmlElement(required = true)
    @NotNull(message = "MDFormatType.name {javax.validation.constraints.NotNull.message}")
    @Valid
    protected CharacterStringPropertyType name;
    @XmlElement(required = true)
    @NotNull(message = "MDFormatType.version {javax.validation.constraints.NotNull.message}")
    @Valid
    protected CharacterStringPropertyType version;
    @Valid
    protected CharacterStringPropertyType amendmentNumber;
    @Valid
    protected CharacterStringPropertyType specification;
    @Valid
    protected CharacterStringPropertyType fileDecompressionTechnique;
    @Valid
    protected List<MDDistributorPropertyType> formatDistributor;

    /**
     * Gets the value of the name property.
     * 
     * @return
     *     possible object is
     *     {@link CharacterStringPropertyType }
     *     
     */
    public CharacterStringPropertyType getName() {
        return name;
    }

    /**
     * Sets the value of the name property.
     * 
     * @param value
     *     allowed object is
     *     {@link CharacterStringPropertyType }
     *     
     */
    public void setName(CharacterStringPropertyType value) {
        this.name = value;
    }

    public boolean isSetName() {
        return (this.name!= null);
    }

    /**
     * Gets the value of the version property.
     * 
     * @return
     *     possible object is
     *     {@link CharacterStringPropertyType }
     *     
     */
    public CharacterStringPropertyType getVersion() {
        return version;
    }

    /**
     * Sets the value of the version property.
     * 
     * @param value
     *     allowed object is
     *     {@link CharacterStringPropertyType }
     *     
     */
    public void setVersion(CharacterStringPropertyType value) {
        this.version = value;
    }

    public boolean isSetVersion() {
        return (this.version!= null);
    }

    /**
     * Gets the value of the amendmentNumber property.
     * 
     * @return
     *     possible object is
     *     {@link CharacterStringPropertyType }
     *     
     */
    public CharacterStringPropertyType getAmendmentNumber() {
        return amendmentNumber;
    }

    /**
     * Sets the value of the amendmentNumber property.
     * 
     * @param value
     *     allowed object is
     *     {@link CharacterStringPropertyType }
     *     
     */
    public void setAmendmentNumber(CharacterStringPropertyType value) {
        this.amendmentNumber = value;
    }

    public boolean isSetAmendmentNumber() {
        return (this.amendmentNumber!= null);
    }

    /**
     * Gets the value of the specification property.
     * 
     * @return
     *     possible object is
     *     {@link CharacterStringPropertyType }
     *     
     */
    public CharacterStringPropertyType getSpecification() {
        return specification;
    }

    /**
     * Sets the value of the specification property.
     * 
     * @param value
     *     allowed object is
     *     {@link CharacterStringPropertyType }
     *     
     */
    public void setSpecification(CharacterStringPropertyType value) {
        this.specification = value;
    }

    public boolean isSetSpecification() {
        return (this.specification!= null);
    }

    /**
     * Gets the value of the fileDecompressionTechnique property.
     * 
     * @return
     *     possible object is
     *     {@link CharacterStringPropertyType }
     *     
     */
    public CharacterStringPropertyType getFileDecompressionTechnique() {
        return fileDecompressionTechnique;
    }

    /**
     * Sets the value of the fileDecompressionTechnique property.
     * 
     * @param value
     *     allowed object is
     *     {@link CharacterStringPropertyType }
     *     
     */
    public void setFileDecompressionTechnique(CharacterStringPropertyType value) {
        this.fileDecompressionTechnique = value;
    }

    public boolean isSetFileDecompressionTechnique() {
        return (this.fileDecompressionTechnique!= null);
    }

    /**
     * Gets the value of the formatDistributor property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the formatDistributor property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getFormatDistributor().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link MDDistributorPropertyType }
     * 
     * 
     */
    public List<MDDistributorPropertyType> getFormatDistributor() {
        if (formatDistributor == null) {
            formatDistributor = new ArrayList<MDDistributorPropertyType>();
        }
        return this.formatDistributor;
    }

    public boolean isSetFormatDistributor() {
        return ((this.formatDistributor!= null)&&(!this.formatDistributor.isEmpty()));
    }

    public void unsetFormatDistributor() {
        this.formatDistributor = null;
    }

    public String toString() {
        final ToStringStrategy2 strategy = JAXBToStringStrategy.INSTANCE;
        final StringBuilder buffer = new StringBuilder();
        append(null, buffer, strategy);
        return buffer.toString();
    }

    public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy2 strategy) {
        strategy.appendStart(locator, this, buffer);
        appendFields(locator, buffer, strategy);
        strategy.appendEnd(locator, this, buffer);
        return buffer;
    }

    public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy2 strategy) {
        super.appendFields(locator, buffer, strategy);
        {
            CharacterStringPropertyType theName;
            theName = this.getName();
            strategy.appendField(locator, this, "name", buffer, theName, this.isSetName());
        }
        {
            CharacterStringPropertyType theVersion;
            theVersion = this.getVersion();
            strategy.appendField(locator, this, "version", buffer, theVersion, this.isSetVersion());
        }
        {
            CharacterStringPropertyType theAmendmentNumber;
            theAmendmentNumber = this.getAmendmentNumber();
            strategy.appendField(locator, this, "amendmentNumber", buffer, theAmendmentNumber, this.isSetAmendmentNumber());
        }
        {
            CharacterStringPropertyType theSpecification;
            theSpecification = this.getSpecification();
            strategy.appendField(locator, this, "specification", buffer, theSpecification, this.isSetSpecification());
        }
        {
            CharacterStringPropertyType theFileDecompressionTechnique;
            theFileDecompressionTechnique = this.getFileDecompressionTechnique();
            strategy.appendField(locator, this, "fileDecompressionTechnique", buffer, theFileDecompressionTechnique, this.isSetFileDecompressionTechnique());
        }
        {
            List<MDDistributorPropertyType> theFormatDistributor;
            theFormatDistributor = (this.isSetFormatDistributor()?this.getFormatDistributor():null);
            strategy.appendField(locator, this, "formatDistributor", buffer, theFormatDistributor, this.isSetFormatDistributor());
        }
        return buffer;
    }

    public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy2 strategy) {
        if ((object == null)||(this.getClass()!= object.getClass())) {
            return false;
        }
        if (this == object) {
            return true;
        }
        if (!super.equals(thisLocator, thatLocator, object, strategy)) {
            return false;
        }
        final MDFormatType that = ((MDFormatType) object);
        {
            CharacterStringPropertyType lhsName;
            lhsName = this.getName();
            CharacterStringPropertyType rhsName;
            rhsName = that.getName();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "name", lhsName), LocatorUtils.property(thatLocator, "name", rhsName), lhsName, rhsName, this.isSetName(), that.isSetName())) {
                return false;
            }
        }
        {
            CharacterStringPropertyType lhsVersion;
            lhsVersion = this.getVersion();
            CharacterStringPropertyType rhsVersion;
            rhsVersion = that.getVersion();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "version", lhsVersion), LocatorUtils.property(thatLocator, "version", rhsVersion), lhsVersion, rhsVersion, this.isSetVersion(), that.isSetVersion())) {
                return false;
            }
        }
        {
            CharacterStringPropertyType lhsAmendmentNumber;
            lhsAmendmentNumber = this.getAmendmentNumber();
            CharacterStringPropertyType rhsAmendmentNumber;
            rhsAmendmentNumber = that.getAmendmentNumber();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "amendmentNumber", lhsAmendmentNumber), LocatorUtils.property(thatLocator, "amendmentNumber", rhsAmendmentNumber), lhsAmendmentNumber, rhsAmendmentNumber, this.isSetAmendmentNumber(), that.isSetAmendmentNumber())) {
                return false;
            }
        }
        {
            CharacterStringPropertyType lhsSpecification;
            lhsSpecification = this.getSpecification();
            CharacterStringPropertyType rhsSpecification;
            rhsSpecification = that.getSpecification();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "specification", lhsSpecification), LocatorUtils.property(thatLocator, "specification", rhsSpecification), lhsSpecification, rhsSpecification, this.isSetSpecification(), that.isSetSpecification())) {
                return false;
            }
        }
        {
            CharacterStringPropertyType lhsFileDecompressionTechnique;
            lhsFileDecompressionTechnique = this.getFileDecompressionTechnique();
            CharacterStringPropertyType rhsFileDecompressionTechnique;
            rhsFileDecompressionTechnique = that.getFileDecompressionTechnique();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "fileDecompressionTechnique", lhsFileDecompressionTechnique), LocatorUtils.property(thatLocator, "fileDecompressionTechnique", rhsFileDecompressionTechnique), lhsFileDecompressionTechnique, rhsFileDecompressionTechnique, this.isSetFileDecompressionTechnique(), that.isSetFileDecompressionTechnique())) {
                return false;
            }
        }
        {
            List<MDDistributorPropertyType> lhsFormatDistributor;
            lhsFormatDistributor = (this.isSetFormatDistributor()?this.getFormatDistributor():null);
            List<MDDistributorPropertyType> rhsFormatDistributor;
            rhsFormatDistributor = (that.isSetFormatDistributor()?that.getFormatDistributor():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "formatDistributor", lhsFormatDistributor), LocatorUtils.property(thatLocator, "formatDistributor", rhsFormatDistributor), lhsFormatDistributor, rhsFormatDistributor, this.isSetFormatDistributor(), that.isSetFormatDistributor())) {
                return false;
            }
        }
        return true;
    }

    public boolean equals(Object object) {
        final EqualsStrategy2 strategy = JAXBEqualsStrategy.INSTANCE;
        return equals(null, null, object, strategy);
    }

    public int hashCode(ObjectLocator locator, HashCodeStrategy2 strategy) {
        int currentHashCode = super.hashCode(locator, strategy);
        {
            CharacterStringPropertyType theName;
            theName = this.getName();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "name", theName), currentHashCode, theName, this.isSetName());
        }
        {
            CharacterStringPropertyType theVersion;
            theVersion = this.getVersion();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "version", theVersion), currentHashCode, theVersion, this.isSetVersion());
        }
        {
            CharacterStringPropertyType theAmendmentNumber;
            theAmendmentNumber = this.getAmendmentNumber();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "amendmentNumber", theAmendmentNumber), currentHashCode, theAmendmentNumber, this.isSetAmendmentNumber());
        }
        {
            CharacterStringPropertyType theSpecification;
            theSpecification = this.getSpecification();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "specification", theSpecification), currentHashCode, theSpecification, this.isSetSpecification());
        }
        {
            CharacterStringPropertyType theFileDecompressionTechnique;
            theFileDecompressionTechnique = this.getFileDecompressionTechnique();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "fileDecompressionTechnique", theFileDecompressionTechnique), currentHashCode, theFileDecompressionTechnique, this.isSetFileDecompressionTechnique());
        }
        {
            List<MDDistributorPropertyType> theFormatDistributor;
            theFormatDistributor = (this.isSetFormatDistributor()?this.getFormatDistributor():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "formatDistributor", theFormatDistributor), currentHashCode, theFormatDistributor, this.isSetFormatDistributor());
        }
        return currentHashCode;
    }

    public int hashCode() {
        final HashCodeStrategy2 strategy = JAXBHashCodeStrategy.INSTANCE;
        return this.hashCode(null, strategy);
    }

    public Object clone() {
        return copyTo(createNewInstance());
    }

    public Object copyTo(Object target) {
        final CopyStrategy2 strategy = JAXBCopyStrategy.INSTANCE;
        return copyTo(null, target, strategy);
    }

    public Object copyTo(ObjectLocator locator, Object target, CopyStrategy2 strategy) {
        final Object draftCopy = ((target == null)?createNewInstance():target);
        super.copyTo(locator, draftCopy, strategy);
        if (draftCopy instanceof MDFormatType) {
            final MDFormatType copy = ((MDFormatType) draftCopy);
            {
                Boolean nameShouldBeCopiedAndSet = strategy.shouldBeCopiedAndSet(locator, this.isSetName());
                if (nameShouldBeCopiedAndSet == Boolean.TRUE) {
                    CharacterStringPropertyType sourceName;
                    sourceName = this.getName();
                    CharacterStringPropertyType copyName = ((CharacterStringPropertyType) strategy.copy(LocatorUtils.property(locator, "name", sourceName), sourceName, this.isSetName()));
                    copy.setName(copyName);
                } else {
                    if (nameShouldBeCopiedAndSet == Boolean.FALSE) {
                        copy.name = null;
                    }
                }
            }
            {
                Boolean versionShouldBeCopiedAndSet = strategy.shouldBeCopiedAndSet(locator, this.isSetVersion());
                if (versionShouldBeCopiedAndSet == Boolean.TRUE) {
                    CharacterStringPropertyType sourceVersion;
                    sourceVersion = this.getVersion();
                    CharacterStringPropertyType copyVersion = ((CharacterStringPropertyType) strategy.copy(LocatorUtils.property(locator, "version", sourceVersion), sourceVersion, this.isSetVersion()));
                    copy.setVersion(copyVersion);
                } else {
                    if (versionShouldBeCopiedAndSet == Boolean.FALSE) {
                        copy.version = null;
                    }
                }
            }
            {
                Boolean amendmentNumberShouldBeCopiedAndSet = strategy.shouldBeCopiedAndSet(locator, this.isSetAmendmentNumber());
                if (amendmentNumberShouldBeCopiedAndSet == Boolean.TRUE) {
                    CharacterStringPropertyType sourceAmendmentNumber;
                    sourceAmendmentNumber = this.getAmendmentNumber();
                    CharacterStringPropertyType copyAmendmentNumber = ((CharacterStringPropertyType) strategy.copy(LocatorUtils.property(locator, "amendmentNumber", sourceAmendmentNumber), sourceAmendmentNumber, this.isSetAmendmentNumber()));
                    copy.setAmendmentNumber(copyAmendmentNumber);
                } else {
                    if (amendmentNumberShouldBeCopiedAndSet == Boolean.FALSE) {
                        copy.amendmentNumber = null;
                    }
                }
            }
            {
                Boolean specificationShouldBeCopiedAndSet = strategy.shouldBeCopiedAndSet(locator, this.isSetSpecification());
                if (specificationShouldBeCopiedAndSet == Boolean.TRUE) {
                    CharacterStringPropertyType sourceSpecification;
                    sourceSpecification = this.getSpecification();
                    CharacterStringPropertyType copySpecification = ((CharacterStringPropertyType) strategy.copy(LocatorUtils.property(locator, "specification", sourceSpecification), sourceSpecification, this.isSetSpecification()));
                    copy.setSpecification(copySpecification);
                } else {
                    if (specificationShouldBeCopiedAndSet == Boolean.FALSE) {
                        copy.specification = null;
                    }
                }
            }
            {
                Boolean fileDecompressionTechniqueShouldBeCopiedAndSet = strategy.shouldBeCopiedAndSet(locator, this.isSetFileDecompressionTechnique());
                if (fileDecompressionTechniqueShouldBeCopiedAndSet == Boolean.TRUE) {
                    CharacterStringPropertyType sourceFileDecompressionTechnique;
                    sourceFileDecompressionTechnique = this.getFileDecompressionTechnique();
                    CharacterStringPropertyType copyFileDecompressionTechnique = ((CharacterStringPropertyType) strategy.copy(LocatorUtils.property(locator, "fileDecompressionTechnique", sourceFileDecompressionTechnique), sourceFileDecompressionTechnique, this.isSetFileDecompressionTechnique()));
                    copy.setFileDecompressionTechnique(copyFileDecompressionTechnique);
                } else {
                    if (fileDecompressionTechniqueShouldBeCopiedAndSet == Boolean.FALSE) {
                        copy.fileDecompressionTechnique = null;
                    }
                }
            }
            {
                Boolean formatDistributorShouldBeCopiedAndSet = strategy.shouldBeCopiedAndSet(locator, this.isSetFormatDistributor());
                if (formatDistributorShouldBeCopiedAndSet == Boolean.TRUE) {
                    List<MDDistributorPropertyType> sourceFormatDistributor;
                    sourceFormatDistributor = (this.isSetFormatDistributor()?this.getFormatDistributor():null);
                    @SuppressWarnings("unchecked")
                    List<MDDistributorPropertyType> copyFormatDistributor = ((List<MDDistributorPropertyType> ) strategy.copy(LocatorUtils.property(locator, "formatDistributor", sourceFormatDistributor), sourceFormatDistributor, this.isSetFormatDistributor()));
                    copy.unsetFormatDistributor();
                    if (copyFormatDistributor!= null) {
                        List<MDDistributorPropertyType> uniqueFormatDistributorl = copy.getFormatDistributor();
                        uniqueFormatDistributorl.addAll(copyFormatDistributor);
                    }
                } else {
                    if (formatDistributorShouldBeCopiedAndSet == Boolean.FALSE) {
                        copy.unsetFormatDistributor();
                    }
                }
            }
        }
        return draftCopy;
    }

    public Object createNewInstance() {
        return new MDFormatType();
    }

    public void mergeFrom(Object left, Object right) {
        final MergeStrategy2 strategy = JAXBMergeStrategy.INSTANCE;
        mergeFrom(null, null, left, right, strategy);
    }

    public void mergeFrom(ObjectLocator leftLocator, ObjectLocator rightLocator, Object left, Object right, MergeStrategy2 strategy) {
        super.mergeFrom(leftLocator, rightLocator, left, right, strategy);
        if (right instanceof MDFormatType) {
            final MDFormatType target = this;
            final MDFormatType leftObject = ((MDFormatType) left);
            final MDFormatType rightObject = ((MDFormatType) right);
            {
                Boolean nameShouldBeMergedAndSet = strategy.shouldBeMergedAndSet(leftLocator, rightLocator, leftObject.isSetName(), rightObject.isSetName());
                if (nameShouldBeMergedAndSet == Boolean.TRUE) {
                    CharacterStringPropertyType lhsName;
                    lhsName = leftObject.getName();
                    CharacterStringPropertyType rhsName;
                    rhsName = rightObject.getName();
                    CharacterStringPropertyType mergedName = ((CharacterStringPropertyType) strategy.merge(LocatorUtils.property(leftLocator, "name", lhsName), LocatorUtils.property(rightLocator, "name", rhsName), lhsName, rhsName, leftObject.isSetName(), rightObject.isSetName()));
                    target.setName(mergedName);
                } else {
                    if (nameShouldBeMergedAndSet == Boolean.FALSE) {
                        target.name = null;
                    }
                }
            }
            {
                Boolean versionShouldBeMergedAndSet = strategy.shouldBeMergedAndSet(leftLocator, rightLocator, leftObject.isSetVersion(), rightObject.isSetVersion());
                if (versionShouldBeMergedAndSet == Boolean.TRUE) {
                    CharacterStringPropertyType lhsVersion;
                    lhsVersion = leftObject.getVersion();
                    CharacterStringPropertyType rhsVersion;
                    rhsVersion = rightObject.getVersion();
                    CharacterStringPropertyType mergedVersion = ((CharacterStringPropertyType) strategy.merge(LocatorUtils.property(leftLocator, "version", lhsVersion), LocatorUtils.property(rightLocator, "version", rhsVersion), lhsVersion, rhsVersion, leftObject.isSetVersion(), rightObject.isSetVersion()));
                    target.setVersion(mergedVersion);
                } else {
                    if (versionShouldBeMergedAndSet == Boolean.FALSE) {
                        target.version = null;
                    }
                }
            }
            {
                Boolean amendmentNumberShouldBeMergedAndSet = strategy.shouldBeMergedAndSet(leftLocator, rightLocator, leftObject.isSetAmendmentNumber(), rightObject.isSetAmendmentNumber());
                if (amendmentNumberShouldBeMergedAndSet == Boolean.TRUE) {
                    CharacterStringPropertyType lhsAmendmentNumber;
                    lhsAmendmentNumber = leftObject.getAmendmentNumber();
                    CharacterStringPropertyType rhsAmendmentNumber;
                    rhsAmendmentNumber = rightObject.getAmendmentNumber();
                    CharacterStringPropertyType mergedAmendmentNumber = ((CharacterStringPropertyType) strategy.merge(LocatorUtils.property(leftLocator, "amendmentNumber", lhsAmendmentNumber), LocatorUtils.property(rightLocator, "amendmentNumber", rhsAmendmentNumber), lhsAmendmentNumber, rhsAmendmentNumber, leftObject.isSetAmendmentNumber(), rightObject.isSetAmendmentNumber()));
                    target.setAmendmentNumber(mergedAmendmentNumber);
                } else {
                    if (amendmentNumberShouldBeMergedAndSet == Boolean.FALSE) {
                        target.amendmentNumber = null;
                    }
                }
            }
            {
                Boolean specificationShouldBeMergedAndSet = strategy.shouldBeMergedAndSet(leftLocator, rightLocator, leftObject.isSetSpecification(), rightObject.isSetSpecification());
                if (specificationShouldBeMergedAndSet == Boolean.TRUE) {
                    CharacterStringPropertyType lhsSpecification;
                    lhsSpecification = leftObject.getSpecification();
                    CharacterStringPropertyType rhsSpecification;
                    rhsSpecification = rightObject.getSpecification();
                    CharacterStringPropertyType mergedSpecification = ((CharacterStringPropertyType) strategy.merge(LocatorUtils.property(leftLocator, "specification", lhsSpecification), LocatorUtils.property(rightLocator, "specification", rhsSpecification), lhsSpecification, rhsSpecification, leftObject.isSetSpecification(), rightObject.isSetSpecification()));
                    target.setSpecification(mergedSpecification);
                } else {
                    if (specificationShouldBeMergedAndSet == Boolean.FALSE) {
                        target.specification = null;
                    }
                }
            }
            {
                Boolean fileDecompressionTechniqueShouldBeMergedAndSet = strategy.shouldBeMergedAndSet(leftLocator, rightLocator, leftObject.isSetFileDecompressionTechnique(), rightObject.isSetFileDecompressionTechnique());
                if (fileDecompressionTechniqueShouldBeMergedAndSet == Boolean.TRUE) {
                    CharacterStringPropertyType lhsFileDecompressionTechnique;
                    lhsFileDecompressionTechnique = leftObject.getFileDecompressionTechnique();
                    CharacterStringPropertyType rhsFileDecompressionTechnique;
                    rhsFileDecompressionTechnique = rightObject.getFileDecompressionTechnique();
                    CharacterStringPropertyType mergedFileDecompressionTechnique = ((CharacterStringPropertyType) strategy.merge(LocatorUtils.property(leftLocator, "fileDecompressionTechnique", lhsFileDecompressionTechnique), LocatorUtils.property(rightLocator, "fileDecompressionTechnique", rhsFileDecompressionTechnique), lhsFileDecompressionTechnique, rhsFileDecompressionTechnique, leftObject.isSetFileDecompressionTechnique(), rightObject.isSetFileDecompressionTechnique()));
                    target.setFileDecompressionTechnique(mergedFileDecompressionTechnique);
                } else {
                    if (fileDecompressionTechniqueShouldBeMergedAndSet == Boolean.FALSE) {
                        target.fileDecompressionTechnique = null;
                    }
                }
            }
            {
                Boolean formatDistributorShouldBeMergedAndSet = strategy.shouldBeMergedAndSet(leftLocator, rightLocator, leftObject.isSetFormatDistributor(), rightObject.isSetFormatDistributor());
                if (formatDistributorShouldBeMergedAndSet == Boolean.TRUE) {
                    List<MDDistributorPropertyType> lhsFormatDistributor;
                    lhsFormatDistributor = (leftObject.isSetFormatDistributor()?leftObject.getFormatDistributor():null);
                    List<MDDistributorPropertyType> rhsFormatDistributor;
                    rhsFormatDistributor = (rightObject.isSetFormatDistributor()?rightObject.getFormatDistributor():null);
                    List<MDDistributorPropertyType> mergedFormatDistributor = ((List<MDDistributorPropertyType> ) strategy.merge(LocatorUtils.property(leftLocator, "formatDistributor", lhsFormatDistributor), LocatorUtils.property(rightLocator, "formatDistributor", rhsFormatDistributor), lhsFormatDistributor, rhsFormatDistributor, leftObject.isSetFormatDistributor(), rightObject.isSetFormatDistributor()));
                    target.unsetFormatDistributor();
                    if (mergedFormatDistributor!= null) {
                        List<MDDistributorPropertyType> uniqueFormatDistributorl = target.getFormatDistributor();
                        uniqueFormatDistributorl.addAll(mergedFormatDistributor);
                    }
                } else {
                    if (formatDistributorShouldBeMergedAndSet == Boolean.FALSE) {
                        target.unsetFormatDistributor();
                    }
                }
            }
        }
    }

    public void setFormatDistributor(List<MDDistributorPropertyType> value) {
        this.formatDistributor = null;
        if (value!= null) {
            List<MDDistributorPropertyType> draftl = this.getFormatDistributor();
            draftl.addAll(value);
        }
    }

}
