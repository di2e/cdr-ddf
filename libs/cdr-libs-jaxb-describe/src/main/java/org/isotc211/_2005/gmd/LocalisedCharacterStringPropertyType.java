//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.11 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2016.07.27 at 04:06:37 PM EDT 
//


package org.isotc211._2005.gmd;

import java.io.Serializable;
import javax.validation.Valid;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlType;
import org.isotc211._2005.gco.ObjectReferencePropertyType;
import org.jvnet.jaxb2_commons.lang.CopyStrategy2;
import org.jvnet.jaxb2_commons.lang.CopyTo2;
import org.jvnet.jaxb2_commons.lang.Equals2;
import org.jvnet.jaxb2_commons.lang.EqualsStrategy2;
import org.jvnet.jaxb2_commons.lang.HashCode2;
import org.jvnet.jaxb2_commons.lang.HashCodeStrategy2;
import org.jvnet.jaxb2_commons.lang.JAXBCopyStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBEqualsStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBHashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBMergeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBToStringStrategy;
import org.jvnet.jaxb2_commons.lang.MergeFrom2;
import org.jvnet.jaxb2_commons.lang.MergeStrategy2;
import org.jvnet.jaxb2_commons.lang.ToString2;
import org.jvnet.jaxb2_commons.lang.ToStringStrategy2;
import org.jvnet.jaxb2_commons.locator.ObjectLocator;
import org.jvnet.jaxb2_commons.locator.util.LocatorUtils;


/**
 * <p>Java class for LocalisedCharacterString_PropertyType complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="LocalisedCharacterString_PropertyType"&gt;
 *   &lt;complexContent&gt;
 *     &lt;extension base="{http://www.isotc211.org/2005/gco}ObjectReference_PropertyType"&gt;
 *       &lt;sequence minOccurs="0"&gt;
 *         &lt;element ref="{http://www.isotc211.org/2005/gmd}LocalisedCharacterString"/&gt;
 *       &lt;/sequence&gt;
 *     &lt;/extension&gt;
 *   &lt;/complexContent&gt;
 * &lt;/complexType&gt;
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "LocalisedCharacterString_PropertyType", propOrder = {
    "localisedCharacterString"
})
public class LocalisedCharacterStringPropertyType
    extends ObjectReferencePropertyType
    implements Serializable, Cloneable, CopyTo2, Equals2, HashCode2, MergeFrom2, ToString2
{

    private final static long serialVersionUID = 1L;
    @XmlElement(name = "LocalisedCharacterString")
    @Valid
    protected LocalisedCharacterStringType localisedCharacterString;

    /**
     * Gets the value of the localisedCharacterString property.
     * 
     * @return
     *     possible object is
     *     {@link LocalisedCharacterStringType }
     *     
     */
    public LocalisedCharacterStringType getLocalisedCharacterString() {
        return localisedCharacterString;
    }

    /**
     * Sets the value of the localisedCharacterString property.
     * 
     * @param value
     *     allowed object is
     *     {@link LocalisedCharacterStringType }
     *     
     */
    public void setLocalisedCharacterString(LocalisedCharacterStringType value) {
        this.localisedCharacterString = value;
    }

    public boolean isSetLocalisedCharacterString() {
        return (this.localisedCharacterString!= null);
    }

    public String toString() {
        final ToStringStrategy2 strategy = JAXBToStringStrategy.INSTANCE;
        final StringBuilder buffer = new StringBuilder();
        append(null, buffer, strategy);
        return buffer.toString();
    }

    public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy2 strategy) {
        strategy.appendStart(locator, this, buffer);
        appendFields(locator, buffer, strategy);
        strategy.appendEnd(locator, this, buffer);
        return buffer;
    }

    public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy2 strategy) {
        super.appendFields(locator, buffer, strategy);
        {
            LocalisedCharacterStringType theLocalisedCharacterString;
            theLocalisedCharacterString = this.getLocalisedCharacterString();
            strategy.appendField(locator, this, "localisedCharacterString", buffer, theLocalisedCharacterString, this.isSetLocalisedCharacterString());
        }
        return buffer;
    }

    public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy2 strategy) {
        if ((object == null)||(this.getClass()!= object.getClass())) {
            return false;
        }
        if (this == object) {
            return true;
        }
        if (!super.equals(thisLocator, thatLocator, object, strategy)) {
            return false;
        }
        final LocalisedCharacterStringPropertyType that = ((LocalisedCharacterStringPropertyType) object);
        {
            LocalisedCharacterStringType lhsLocalisedCharacterString;
            lhsLocalisedCharacterString = this.getLocalisedCharacterString();
            LocalisedCharacterStringType rhsLocalisedCharacterString;
            rhsLocalisedCharacterString = that.getLocalisedCharacterString();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "localisedCharacterString", lhsLocalisedCharacterString), LocatorUtils.property(thatLocator, "localisedCharacterString", rhsLocalisedCharacterString), lhsLocalisedCharacterString, rhsLocalisedCharacterString, this.isSetLocalisedCharacterString(), that.isSetLocalisedCharacterString())) {
                return false;
            }
        }
        return true;
    }

    public boolean equals(Object object) {
        final EqualsStrategy2 strategy = JAXBEqualsStrategy.INSTANCE;
        return equals(null, null, object, strategy);
    }

    public int hashCode(ObjectLocator locator, HashCodeStrategy2 strategy) {
        int currentHashCode = super.hashCode(locator, strategy);
        {
            LocalisedCharacterStringType theLocalisedCharacterString;
            theLocalisedCharacterString = this.getLocalisedCharacterString();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "localisedCharacterString", theLocalisedCharacterString), currentHashCode, theLocalisedCharacterString, this.isSetLocalisedCharacterString());
        }
        return currentHashCode;
    }

    public int hashCode() {
        final HashCodeStrategy2 strategy = JAXBHashCodeStrategy.INSTANCE;
        return this.hashCode(null, strategy);
    }

    public Object clone() {
        return copyTo(createNewInstance());
    }

    public Object copyTo(Object target) {
        final CopyStrategy2 strategy = JAXBCopyStrategy.INSTANCE;
        return copyTo(null, target, strategy);
    }

    public Object copyTo(ObjectLocator locator, Object target, CopyStrategy2 strategy) {
        final Object draftCopy = ((target == null)?createNewInstance():target);
        super.copyTo(locator, draftCopy, strategy);
        if (draftCopy instanceof LocalisedCharacterStringPropertyType) {
            final LocalisedCharacterStringPropertyType copy = ((LocalisedCharacterStringPropertyType) draftCopy);
            {
                Boolean localisedCharacterStringShouldBeCopiedAndSet = strategy.shouldBeCopiedAndSet(locator, this.isSetLocalisedCharacterString());
                if (localisedCharacterStringShouldBeCopiedAndSet == Boolean.TRUE) {
                    LocalisedCharacterStringType sourceLocalisedCharacterString;
                    sourceLocalisedCharacterString = this.getLocalisedCharacterString();
                    LocalisedCharacterStringType copyLocalisedCharacterString = ((LocalisedCharacterStringType) strategy.copy(LocatorUtils.property(locator, "localisedCharacterString", sourceLocalisedCharacterString), sourceLocalisedCharacterString, this.isSetLocalisedCharacterString()));
                    copy.setLocalisedCharacterString(copyLocalisedCharacterString);
                } else {
                    if (localisedCharacterStringShouldBeCopiedAndSet == Boolean.FALSE) {
                        copy.localisedCharacterString = null;
                    }
                }
            }
        }
        return draftCopy;
    }

    public Object createNewInstance() {
        return new LocalisedCharacterStringPropertyType();
    }

    public void mergeFrom(Object left, Object right) {
        final MergeStrategy2 strategy = JAXBMergeStrategy.INSTANCE;
        mergeFrom(null, null, left, right, strategy);
    }

    public void mergeFrom(ObjectLocator leftLocator, ObjectLocator rightLocator, Object left, Object right, MergeStrategy2 strategy) {
        super.mergeFrom(leftLocator, rightLocator, left, right, strategy);
        if (right instanceof LocalisedCharacterStringPropertyType) {
            final LocalisedCharacterStringPropertyType target = this;
            final LocalisedCharacterStringPropertyType leftObject = ((LocalisedCharacterStringPropertyType) left);
            final LocalisedCharacterStringPropertyType rightObject = ((LocalisedCharacterStringPropertyType) right);
            {
                Boolean localisedCharacterStringShouldBeMergedAndSet = strategy.shouldBeMergedAndSet(leftLocator, rightLocator, leftObject.isSetLocalisedCharacterString(), rightObject.isSetLocalisedCharacterString());
                if (localisedCharacterStringShouldBeMergedAndSet == Boolean.TRUE) {
                    LocalisedCharacterStringType lhsLocalisedCharacterString;
                    lhsLocalisedCharacterString = leftObject.getLocalisedCharacterString();
                    LocalisedCharacterStringType rhsLocalisedCharacterString;
                    rhsLocalisedCharacterString = rightObject.getLocalisedCharacterString();
                    LocalisedCharacterStringType mergedLocalisedCharacterString = ((LocalisedCharacterStringType) strategy.merge(LocatorUtils.property(leftLocator, "localisedCharacterString", lhsLocalisedCharacterString), LocatorUtils.property(rightLocator, "localisedCharacterString", rhsLocalisedCharacterString), lhsLocalisedCharacterString, rhsLocalisedCharacterString, leftObject.isSetLocalisedCharacterString(), rightObject.isSetLocalisedCharacterString()));
                    target.setLocalisedCharacterString(mergedLocalisedCharacterString);
                } else {
                    if (localisedCharacterStringShouldBeMergedAndSet == Boolean.FALSE) {
                        target.localisedCharacterString = null;
                    }
                }
            }
        }
    }

}
