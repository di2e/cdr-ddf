//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.11 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2016.07.27 at 04:06:37 PM EDT 
//


package org.isotc211._2005.gmd;

import java.io.Serializable;
import java.util.ArrayList;
import java.util.List;
import javax.validation.Valid;
import javax.validation.constraints.NotNull;
import javax.validation.constraints.Size;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlType;
import org.isotc211._2005.gco.AbstractObjectType;
import org.isotc211._2005.gco.CharacterStringPropertyType;
import org.jvnet.jaxb2_commons.lang.CopyStrategy2;
import org.jvnet.jaxb2_commons.lang.CopyTo2;
import org.jvnet.jaxb2_commons.lang.Equals2;
import org.jvnet.jaxb2_commons.lang.EqualsStrategy2;
import org.jvnet.jaxb2_commons.lang.HashCode2;
import org.jvnet.jaxb2_commons.lang.HashCodeStrategy2;
import org.jvnet.jaxb2_commons.lang.JAXBCopyStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBEqualsStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBHashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBMergeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBToStringStrategy;
import org.jvnet.jaxb2_commons.lang.MergeFrom2;
import org.jvnet.jaxb2_commons.lang.MergeStrategy2;
import org.jvnet.jaxb2_commons.lang.ToString2;
import org.jvnet.jaxb2_commons.lang.ToStringStrategy2;
import org.jvnet.jaxb2_commons.locator.ObjectLocator;
import org.jvnet.jaxb2_commons.locator.util.LocatorUtils;


/**
 * Keywords, their type and reference source
 * 
 * <p>Java class for MD_Keywords_Type complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="MD_Keywords_Type"&gt;
 *   &lt;complexContent&gt;
 *     &lt;extension base="{http://www.isotc211.org/2005/gco}AbstractObject_Type"&gt;
 *       &lt;sequence&gt;
 *         &lt;element name="keyword" type="{http://www.isotc211.org/2005/gco}CharacterString_PropertyType" maxOccurs="unbounded"/&gt;
 *         &lt;element name="type" type="{http://www.isotc211.org/2005/gmd}MD_KeywordTypeCode_PropertyType" minOccurs="0"/&gt;
 *         &lt;element name="thesaurusName" type="{http://www.isotc211.org/2005/gmd}CI_Citation_PropertyType" minOccurs="0"/&gt;
 *       &lt;/sequence&gt;
 *     &lt;/extension&gt;
 *   &lt;/complexContent&gt;
 * &lt;/complexType&gt;
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "MD_Keywords_Type", propOrder = {
    "keyword",
    "type",
    "thesaurusName"
})
public class MDKeywordsType
    extends AbstractObjectType
    implements Serializable, Cloneable, CopyTo2, Equals2, HashCode2, MergeFrom2, ToString2
{

    private final static long serialVersionUID = 1L;
    @XmlElement(required = true)
    @NotNull(message = "MDKeywordsType.keyword {javax.validation.constraints.NotNull.message}")
    @Size(min = 1)
    @Valid
    protected List<CharacterStringPropertyType> keyword;
    @Valid
    protected MDKeywordTypeCodePropertyType type;
    @Valid
    protected CICitationPropertyType thesaurusName;

    /**
     * Gets the value of the keyword property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the keyword property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getKeyword().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link CharacterStringPropertyType }
     * 
     * 
     */
    public List<CharacterStringPropertyType> getKeyword() {
        if (keyword == null) {
            keyword = new ArrayList<CharacterStringPropertyType>();
        }
        return this.keyword;
    }

    public boolean isSetKeyword() {
        return ((this.keyword!= null)&&(!this.keyword.isEmpty()));
    }

    public void unsetKeyword() {
        this.keyword = null;
    }

    /**
     * Gets the value of the type property.
     * 
     * @return
     *     possible object is
     *     {@link MDKeywordTypeCodePropertyType }
     *     
     */
    public MDKeywordTypeCodePropertyType getType() {
        return type;
    }

    /**
     * Sets the value of the type property.
     * 
     * @param value
     *     allowed object is
     *     {@link MDKeywordTypeCodePropertyType }
     *     
     */
    public void setType(MDKeywordTypeCodePropertyType value) {
        this.type = value;
    }

    public boolean isSetType() {
        return (this.type!= null);
    }

    /**
     * Gets the value of the thesaurusName property.
     * 
     * @return
     *     possible object is
     *     {@link CICitationPropertyType }
     *     
     */
    public CICitationPropertyType getThesaurusName() {
        return thesaurusName;
    }

    /**
     * Sets the value of the thesaurusName property.
     * 
     * @param value
     *     allowed object is
     *     {@link CICitationPropertyType }
     *     
     */
    public void setThesaurusName(CICitationPropertyType value) {
        this.thesaurusName = value;
    }

    public boolean isSetThesaurusName() {
        return (this.thesaurusName!= null);
    }

    public String toString() {
        final ToStringStrategy2 strategy = JAXBToStringStrategy.INSTANCE;
        final StringBuilder buffer = new StringBuilder();
        append(null, buffer, strategy);
        return buffer.toString();
    }

    public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy2 strategy) {
        strategy.appendStart(locator, this, buffer);
        appendFields(locator, buffer, strategy);
        strategy.appendEnd(locator, this, buffer);
        return buffer;
    }

    public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy2 strategy) {
        super.appendFields(locator, buffer, strategy);
        {
            List<CharacterStringPropertyType> theKeyword;
            theKeyword = (this.isSetKeyword()?this.getKeyword():null);
            strategy.appendField(locator, this, "keyword", buffer, theKeyword, this.isSetKeyword());
        }
        {
            MDKeywordTypeCodePropertyType theType;
            theType = this.getType();
            strategy.appendField(locator, this, "type", buffer, theType, this.isSetType());
        }
        {
            CICitationPropertyType theThesaurusName;
            theThesaurusName = this.getThesaurusName();
            strategy.appendField(locator, this, "thesaurusName", buffer, theThesaurusName, this.isSetThesaurusName());
        }
        return buffer;
    }

    public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy2 strategy) {
        if ((object == null)||(this.getClass()!= object.getClass())) {
            return false;
        }
        if (this == object) {
            return true;
        }
        if (!super.equals(thisLocator, thatLocator, object, strategy)) {
            return false;
        }
        final MDKeywordsType that = ((MDKeywordsType) object);
        {
            List<CharacterStringPropertyType> lhsKeyword;
            lhsKeyword = (this.isSetKeyword()?this.getKeyword():null);
            List<CharacterStringPropertyType> rhsKeyword;
            rhsKeyword = (that.isSetKeyword()?that.getKeyword():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "keyword", lhsKeyword), LocatorUtils.property(thatLocator, "keyword", rhsKeyword), lhsKeyword, rhsKeyword, this.isSetKeyword(), that.isSetKeyword())) {
                return false;
            }
        }
        {
            MDKeywordTypeCodePropertyType lhsType;
            lhsType = this.getType();
            MDKeywordTypeCodePropertyType rhsType;
            rhsType = that.getType();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "type", lhsType), LocatorUtils.property(thatLocator, "type", rhsType), lhsType, rhsType, this.isSetType(), that.isSetType())) {
                return false;
            }
        }
        {
            CICitationPropertyType lhsThesaurusName;
            lhsThesaurusName = this.getThesaurusName();
            CICitationPropertyType rhsThesaurusName;
            rhsThesaurusName = that.getThesaurusName();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "thesaurusName", lhsThesaurusName), LocatorUtils.property(thatLocator, "thesaurusName", rhsThesaurusName), lhsThesaurusName, rhsThesaurusName, this.isSetThesaurusName(), that.isSetThesaurusName())) {
                return false;
            }
        }
        return true;
    }

    public boolean equals(Object object) {
        final EqualsStrategy2 strategy = JAXBEqualsStrategy.INSTANCE;
        return equals(null, null, object, strategy);
    }

    public int hashCode(ObjectLocator locator, HashCodeStrategy2 strategy) {
        int currentHashCode = super.hashCode(locator, strategy);
        {
            List<CharacterStringPropertyType> theKeyword;
            theKeyword = (this.isSetKeyword()?this.getKeyword():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "keyword", theKeyword), currentHashCode, theKeyword, this.isSetKeyword());
        }
        {
            MDKeywordTypeCodePropertyType theType;
            theType = this.getType();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "type", theType), currentHashCode, theType, this.isSetType());
        }
        {
            CICitationPropertyType theThesaurusName;
            theThesaurusName = this.getThesaurusName();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "thesaurusName", theThesaurusName), currentHashCode, theThesaurusName, this.isSetThesaurusName());
        }
        return currentHashCode;
    }

    public int hashCode() {
        final HashCodeStrategy2 strategy = JAXBHashCodeStrategy.INSTANCE;
        return this.hashCode(null, strategy);
    }

    public Object clone() {
        return copyTo(createNewInstance());
    }

    public Object copyTo(Object target) {
        final CopyStrategy2 strategy = JAXBCopyStrategy.INSTANCE;
        return copyTo(null, target, strategy);
    }

    public Object copyTo(ObjectLocator locator, Object target, CopyStrategy2 strategy) {
        final Object draftCopy = ((target == null)?createNewInstance():target);
        super.copyTo(locator, draftCopy, strategy);
        if (draftCopy instanceof MDKeywordsType) {
            final MDKeywordsType copy = ((MDKeywordsType) draftCopy);
            {
                Boolean keywordShouldBeCopiedAndSet = strategy.shouldBeCopiedAndSet(locator, this.isSetKeyword());
                if (keywordShouldBeCopiedAndSet == Boolean.TRUE) {
                    List<CharacterStringPropertyType> sourceKeyword;
                    sourceKeyword = (this.isSetKeyword()?this.getKeyword():null);
                    @SuppressWarnings("unchecked")
                    List<CharacterStringPropertyType> copyKeyword = ((List<CharacterStringPropertyType> ) strategy.copy(LocatorUtils.property(locator, "keyword", sourceKeyword), sourceKeyword, this.isSetKeyword()));
                    copy.unsetKeyword();
                    if (copyKeyword!= null) {
                        List<CharacterStringPropertyType> uniqueKeywordl = copy.getKeyword();
                        uniqueKeywordl.addAll(copyKeyword);
                    }
                } else {
                    if (keywordShouldBeCopiedAndSet == Boolean.FALSE) {
                        copy.unsetKeyword();
                    }
                }
            }
            {
                Boolean typeShouldBeCopiedAndSet = strategy.shouldBeCopiedAndSet(locator, this.isSetType());
                if (typeShouldBeCopiedAndSet == Boolean.TRUE) {
                    MDKeywordTypeCodePropertyType sourceType;
                    sourceType = this.getType();
                    MDKeywordTypeCodePropertyType copyType = ((MDKeywordTypeCodePropertyType) strategy.copy(LocatorUtils.property(locator, "type", sourceType), sourceType, this.isSetType()));
                    copy.setType(copyType);
                } else {
                    if (typeShouldBeCopiedAndSet == Boolean.FALSE) {
                        copy.type = null;
                    }
                }
            }
            {
                Boolean thesaurusNameShouldBeCopiedAndSet = strategy.shouldBeCopiedAndSet(locator, this.isSetThesaurusName());
                if (thesaurusNameShouldBeCopiedAndSet == Boolean.TRUE) {
                    CICitationPropertyType sourceThesaurusName;
                    sourceThesaurusName = this.getThesaurusName();
                    CICitationPropertyType copyThesaurusName = ((CICitationPropertyType) strategy.copy(LocatorUtils.property(locator, "thesaurusName", sourceThesaurusName), sourceThesaurusName, this.isSetThesaurusName()));
                    copy.setThesaurusName(copyThesaurusName);
                } else {
                    if (thesaurusNameShouldBeCopiedAndSet == Boolean.FALSE) {
                        copy.thesaurusName = null;
                    }
                }
            }
        }
        return draftCopy;
    }

    public Object createNewInstance() {
        return new MDKeywordsType();
    }

    public void mergeFrom(Object left, Object right) {
        final MergeStrategy2 strategy = JAXBMergeStrategy.INSTANCE;
        mergeFrom(null, null, left, right, strategy);
    }

    public void mergeFrom(ObjectLocator leftLocator, ObjectLocator rightLocator, Object left, Object right, MergeStrategy2 strategy) {
        super.mergeFrom(leftLocator, rightLocator, left, right, strategy);
        if (right instanceof MDKeywordsType) {
            final MDKeywordsType target = this;
            final MDKeywordsType leftObject = ((MDKeywordsType) left);
            final MDKeywordsType rightObject = ((MDKeywordsType) right);
            {
                Boolean keywordShouldBeMergedAndSet = strategy.shouldBeMergedAndSet(leftLocator, rightLocator, leftObject.isSetKeyword(), rightObject.isSetKeyword());
                if (keywordShouldBeMergedAndSet == Boolean.TRUE) {
                    List<CharacterStringPropertyType> lhsKeyword;
                    lhsKeyword = (leftObject.isSetKeyword()?leftObject.getKeyword():null);
                    List<CharacterStringPropertyType> rhsKeyword;
                    rhsKeyword = (rightObject.isSetKeyword()?rightObject.getKeyword():null);
                    List<CharacterStringPropertyType> mergedKeyword = ((List<CharacterStringPropertyType> ) strategy.merge(LocatorUtils.property(leftLocator, "keyword", lhsKeyword), LocatorUtils.property(rightLocator, "keyword", rhsKeyword), lhsKeyword, rhsKeyword, leftObject.isSetKeyword(), rightObject.isSetKeyword()));
                    target.unsetKeyword();
                    if (mergedKeyword!= null) {
                        List<CharacterStringPropertyType> uniqueKeywordl = target.getKeyword();
                        uniqueKeywordl.addAll(mergedKeyword);
                    }
                } else {
                    if (keywordShouldBeMergedAndSet == Boolean.FALSE) {
                        target.unsetKeyword();
                    }
                }
            }
            {
                Boolean typeShouldBeMergedAndSet = strategy.shouldBeMergedAndSet(leftLocator, rightLocator, leftObject.isSetType(), rightObject.isSetType());
                if (typeShouldBeMergedAndSet == Boolean.TRUE) {
                    MDKeywordTypeCodePropertyType lhsType;
                    lhsType = leftObject.getType();
                    MDKeywordTypeCodePropertyType rhsType;
                    rhsType = rightObject.getType();
                    MDKeywordTypeCodePropertyType mergedType = ((MDKeywordTypeCodePropertyType) strategy.merge(LocatorUtils.property(leftLocator, "type", lhsType), LocatorUtils.property(rightLocator, "type", rhsType), lhsType, rhsType, leftObject.isSetType(), rightObject.isSetType()));
                    target.setType(mergedType);
                } else {
                    if (typeShouldBeMergedAndSet == Boolean.FALSE) {
                        target.type = null;
                    }
                }
            }
            {
                Boolean thesaurusNameShouldBeMergedAndSet = strategy.shouldBeMergedAndSet(leftLocator, rightLocator, leftObject.isSetThesaurusName(), rightObject.isSetThesaurusName());
                if (thesaurusNameShouldBeMergedAndSet == Boolean.TRUE) {
                    CICitationPropertyType lhsThesaurusName;
                    lhsThesaurusName = leftObject.getThesaurusName();
                    CICitationPropertyType rhsThesaurusName;
                    rhsThesaurusName = rightObject.getThesaurusName();
                    CICitationPropertyType mergedThesaurusName = ((CICitationPropertyType) strategy.merge(LocatorUtils.property(leftLocator, "thesaurusName", lhsThesaurusName), LocatorUtils.property(rightLocator, "thesaurusName", rhsThesaurusName), lhsThesaurusName, rhsThesaurusName, leftObject.isSetThesaurusName(), rightObject.isSetThesaurusName()));
                    target.setThesaurusName(mergedThesaurusName);
                } else {
                    if (thesaurusNameShouldBeMergedAndSet == Boolean.FALSE) {
                        target.thesaurusName = null;
                    }
                }
            }
        }
    }

    public void setKeyword(List<CharacterStringPropertyType> value) {
        this.keyword = null;
        if (value!= null) {
            List<CharacterStringPropertyType> draftl = this.getKeyword();
            draftl.addAll(value);
        }
    }

}
