//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.11 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2016.07.27 at 04:06:37 PM EDT 
//


package org.isotc211._2005.gmd;

import java.io.Serializable;
import java.util.ArrayList;
import java.util.List;
import javax.validation.Valid;
import javax.validation.constraints.NotNull;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlType;
import org.isotc211._2005.gco.AbstractObjectType;
import org.jvnet.jaxb2_commons.lang.CopyStrategy2;
import org.jvnet.jaxb2_commons.lang.CopyTo2;
import org.jvnet.jaxb2_commons.lang.Equals2;
import org.jvnet.jaxb2_commons.lang.EqualsStrategy2;
import org.jvnet.jaxb2_commons.lang.HashCode2;
import org.jvnet.jaxb2_commons.lang.HashCodeStrategy2;
import org.jvnet.jaxb2_commons.lang.JAXBCopyStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBEqualsStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBHashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBMergeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBToStringStrategy;
import org.jvnet.jaxb2_commons.lang.MergeFrom2;
import org.jvnet.jaxb2_commons.lang.MergeStrategy2;
import org.jvnet.jaxb2_commons.lang.ToString2;
import org.jvnet.jaxb2_commons.lang.ToStringStrategy2;
import org.jvnet.jaxb2_commons.locator.ObjectLocator;
import org.jvnet.jaxb2_commons.locator.util.LocatorUtils;


/**
 * Description of the spatial and temporal reference systems used in the dataset
 * 
 * <p>Java class for AbstractRS_ReferenceSystem_Type complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="AbstractRS_ReferenceSystem_Type"&gt;
 *   &lt;complexContent&gt;
 *     &lt;extension base="{http://www.isotc211.org/2005/gco}AbstractObject_Type"&gt;
 *       &lt;sequence&gt;
 *         &lt;element name="name" type="{http://www.isotc211.org/2005/gmd}RS_Identifier_PropertyType"/&gt;
 *         &lt;element name="domainOfValidity" type="{http://www.isotc211.org/2005/gmd}EX_Extent_PropertyType" maxOccurs="unbounded" minOccurs="0"/&gt;
 *       &lt;/sequence&gt;
 *     &lt;/extension&gt;
 *   &lt;/complexContent&gt;
 * &lt;/complexType&gt;
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "AbstractRS_ReferenceSystem_Type", propOrder = {
    "name",
    "domainOfValidity"
})
public abstract class AbstractRSReferenceSystemType
    extends AbstractObjectType
    implements Serializable, Cloneable, CopyTo2, Equals2, HashCode2, MergeFrom2, ToString2
{

    private final static long serialVersionUID = 1L;
    @XmlElement(required = true)
    @NotNull(message = "AbstractRSReferenceSystemType.name {javax.validation.constraints.NotNull.message}")
    @Valid
    protected RSIdentifierPropertyType name;
    @Valid
    protected List<EXExtentPropertyType> domainOfValidity;

    /**
     * Gets the value of the name property.
     * 
     * @return
     *     possible object is
     *     {@link RSIdentifierPropertyType }
     *     
     */
    public RSIdentifierPropertyType getName() {
        return name;
    }

    /**
     * Sets the value of the name property.
     * 
     * @param value
     *     allowed object is
     *     {@link RSIdentifierPropertyType }
     *     
     */
    public void setName(RSIdentifierPropertyType value) {
        this.name = value;
    }

    public boolean isSetName() {
        return (this.name!= null);
    }

    /**
     * Gets the value of the domainOfValidity property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the domainOfValidity property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getDomainOfValidity().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link EXExtentPropertyType }
     * 
     * 
     */
    public List<EXExtentPropertyType> getDomainOfValidity() {
        if (domainOfValidity == null) {
            domainOfValidity = new ArrayList<EXExtentPropertyType>();
        }
        return this.domainOfValidity;
    }

    public boolean isSetDomainOfValidity() {
        return ((this.domainOfValidity!= null)&&(!this.domainOfValidity.isEmpty()));
    }

    public void unsetDomainOfValidity() {
        this.domainOfValidity = null;
    }

    public String toString() {
        final ToStringStrategy2 strategy = JAXBToStringStrategy.INSTANCE;
        final StringBuilder buffer = new StringBuilder();
        append(null, buffer, strategy);
        return buffer.toString();
    }

    public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy2 strategy) {
        strategy.appendStart(locator, this, buffer);
        appendFields(locator, buffer, strategy);
        strategy.appendEnd(locator, this, buffer);
        return buffer;
    }

    public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy2 strategy) {
        super.appendFields(locator, buffer, strategy);
        {
            RSIdentifierPropertyType theName;
            theName = this.getName();
            strategy.appendField(locator, this, "name", buffer, theName, this.isSetName());
        }
        {
            List<EXExtentPropertyType> theDomainOfValidity;
            theDomainOfValidity = (this.isSetDomainOfValidity()?this.getDomainOfValidity():null);
            strategy.appendField(locator, this, "domainOfValidity", buffer, theDomainOfValidity, this.isSetDomainOfValidity());
        }
        return buffer;
    }

    public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy2 strategy) {
        if ((object == null)||(this.getClass()!= object.getClass())) {
            return false;
        }
        if (this == object) {
            return true;
        }
        if (!super.equals(thisLocator, thatLocator, object, strategy)) {
            return false;
        }
        final AbstractRSReferenceSystemType that = ((AbstractRSReferenceSystemType) object);
        {
            RSIdentifierPropertyType lhsName;
            lhsName = this.getName();
            RSIdentifierPropertyType rhsName;
            rhsName = that.getName();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "name", lhsName), LocatorUtils.property(thatLocator, "name", rhsName), lhsName, rhsName, this.isSetName(), that.isSetName())) {
                return false;
            }
        }
        {
            List<EXExtentPropertyType> lhsDomainOfValidity;
            lhsDomainOfValidity = (this.isSetDomainOfValidity()?this.getDomainOfValidity():null);
            List<EXExtentPropertyType> rhsDomainOfValidity;
            rhsDomainOfValidity = (that.isSetDomainOfValidity()?that.getDomainOfValidity():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "domainOfValidity", lhsDomainOfValidity), LocatorUtils.property(thatLocator, "domainOfValidity", rhsDomainOfValidity), lhsDomainOfValidity, rhsDomainOfValidity, this.isSetDomainOfValidity(), that.isSetDomainOfValidity())) {
                return false;
            }
        }
        return true;
    }

    public boolean equals(Object object) {
        final EqualsStrategy2 strategy = JAXBEqualsStrategy.INSTANCE;
        return equals(null, null, object, strategy);
    }

    public int hashCode(ObjectLocator locator, HashCodeStrategy2 strategy) {
        int currentHashCode = super.hashCode(locator, strategy);
        {
            RSIdentifierPropertyType theName;
            theName = this.getName();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "name", theName), currentHashCode, theName, this.isSetName());
        }
        {
            List<EXExtentPropertyType> theDomainOfValidity;
            theDomainOfValidity = (this.isSetDomainOfValidity()?this.getDomainOfValidity():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "domainOfValidity", theDomainOfValidity), currentHashCode, theDomainOfValidity, this.isSetDomainOfValidity());
        }
        return currentHashCode;
    }

    public int hashCode() {
        final HashCodeStrategy2 strategy = JAXBHashCodeStrategy.INSTANCE;
        return this.hashCode(null, strategy);
    }

    public Object clone() {
        return copyTo(createNewInstance());
    }

    public Object copyTo(Object target) {
        final CopyStrategy2 strategy = JAXBCopyStrategy.INSTANCE;
        return copyTo(null, target, strategy);
    }

    public Object copyTo(ObjectLocator locator, Object target, CopyStrategy2 strategy) {
        if (null == target) {
            throw new IllegalArgumentException("Target argument must not be null for abstract copyable classes.");
        }
        super.copyTo(locator, target, strategy);
        if (target instanceof AbstractRSReferenceSystemType) {
            final AbstractRSReferenceSystemType copy = ((AbstractRSReferenceSystemType) target);
            {
                Boolean nameShouldBeCopiedAndSet = strategy.shouldBeCopiedAndSet(locator, this.isSetName());
                if (nameShouldBeCopiedAndSet == Boolean.TRUE) {
                    RSIdentifierPropertyType sourceName;
                    sourceName = this.getName();
                    RSIdentifierPropertyType copyName = ((RSIdentifierPropertyType) strategy.copy(LocatorUtils.property(locator, "name", sourceName), sourceName, this.isSetName()));
                    copy.setName(copyName);
                } else {
                    if (nameShouldBeCopiedAndSet == Boolean.FALSE) {
                        copy.name = null;
                    }
                }
            }
            {
                Boolean domainOfValidityShouldBeCopiedAndSet = strategy.shouldBeCopiedAndSet(locator, this.isSetDomainOfValidity());
                if (domainOfValidityShouldBeCopiedAndSet == Boolean.TRUE) {
                    List<EXExtentPropertyType> sourceDomainOfValidity;
                    sourceDomainOfValidity = (this.isSetDomainOfValidity()?this.getDomainOfValidity():null);
                    @SuppressWarnings("unchecked")
                    List<EXExtentPropertyType> copyDomainOfValidity = ((List<EXExtentPropertyType> ) strategy.copy(LocatorUtils.property(locator, "domainOfValidity", sourceDomainOfValidity), sourceDomainOfValidity, this.isSetDomainOfValidity()));
                    copy.unsetDomainOfValidity();
                    if (copyDomainOfValidity!= null) {
                        List<EXExtentPropertyType> uniqueDomainOfValidityl = copy.getDomainOfValidity();
                        uniqueDomainOfValidityl.addAll(copyDomainOfValidity);
                    }
                } else {
                    if (domainOfValidityShouldBeCopiedAndSet == Boolean.FALSE) {
                        copy.unsetDomainOfValidity();
                    }
                }
            }
        }
        return target;
    }

    public void mergeFrom(Object left, Object right) {
        final MergeStrategy2 strategy = JAXBMergeStrategy.INSTANCE;
        mergeFrom(null, null, left, right, strategy);
    }

    public void mergeFrom(ObjectLocator leftLocator, ObjectLocator rightLocator, Object left, Object right, MergeStrategy2 strategy) {
        super.mergeFrom(leftLocator, rightLocator, left, right, strategy);
        if (right instanceof AbstractRSReferenceSystemType) {
            final AbstractRSReferenceSystemType target = this;
            final AbstractRSReferenceSystemType leftObject = ((AbstractRSReferenceSystemType) left);
            final AbstractRSReferenceSystemType rightObject = ((AbstractRSReferenceSystemType) right);
            {
                Boolean nameShouldBeMergedAndSet = strategy.shouldBeMergedAndSet(leftLocator, rightLocator, leftObject.isSetName(), rightObject.isSetName());
                if (nameShouldBeMergedAndSet == Boolean.TRUE) {
                    RSIdentifierPropertyType lhsName;
                    lhsName = leftObject.getName();
                    RSIdentifierPropertyType rhsName;
                    rhsName = rightObject.getName();
                    RSIdentifierPropertyType mergedName = ((RSIdentifierPropertyType) strategy.merge(LocatorUtils.property(leftLocator, "name", lhsName), LocatorUtils.property(rightLocator, "name", rhsName), lhsName, rhsName, leftObject.isSetName(), rightObject.isSetName()));
                    target.setName(mergedName);
                } else {
                    if (nameShouldBeMergedAndSet == Boolean.FALSE) {
                        target.name = null;
                    }
                }
            }
            {
                Boolean domainOfValidityShouldBeMergedAndSet = strategy.shouldBeMergedAndSet(leftLocator, rightLocator, leftObject.isSetDomainOfValidity(), rightObject.isSetDomainOfValidity());
                if (domainOfValidityShouldBeMergedAndSet == Boolean.TRUE) {
                    List<EXExtentPropertyType> lhsDomainOfValidity;
                    lhsDomainOfValidity = (leftObject.isSetDomainOfValidity()?leftObject.getDomainOfValidity():null);
                    List<EXExtentPropertyType> rhsDomainOfValidity;
                    rhsDomainOfValidity = (rightObject.isSetDomainOfValidity()?rightObject.getDomainOfValidity():null);
                    List<EXExtentPropertyType> mergedDomainOfValidity = ((List<EXExtentPropertyType> ) strategy.merge(LocatorUtils.property(leftLocator, "domainOfValidity", lhsDomainOfValidity), LocatorUtils.property(rightLocator, "domainOfValidity", rhsDomainOfValidity), lhsDomainOfValidity, rhsDomainOfValidity, leftObject.isSetDomainOfValidity(), rightObject.isSetDomainOfValidity()));
                    target.unsetDomainOfValidity();
                    if (mergedDomainOfValidity!= null) {
                        List<EXExtentPropertyType> uniqueDomainOfValidityl = target.getDomainOfValidity();
                        uniqueDomainOfValidityl.addAll(mergedDomainOfValidity);
                    }
                } else {
                    if (domainOfValidityShouldBeMergedAndSet == Boolean.FALSE) {
                        target.unsetDomainOfValidity();
                    }
                }
            }
        }
    }

    public void setDomainOfValidity(List<EXExtentPropertyType> value) {
        this.domainOfValidity = null;
        if (value!= null) {
            List<EXExtentPropertyType> draftl = this.getDomainOfValidity();
            draftl.addAll(value);
        }
    }

}
