//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.11 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2016.07.27 at 04:06:37 PM EDT 
//


package org.isotc211._2005.gmd;

import java.io.Serializable;
import java.util.ArrayList;
import java.util.List;
import javax.validation.Valid;
import javax.validation.constraints.NotNull;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlSeeAlso;
import javax.xml.bind.annotation.XmlType;
import org.isotc211._2005.gco.RecordTypePropertyType;
import org.jvnet.jaxb2_commons.lang.CopyStrategy2;
import org.jvnet.jaxb2_commons.lang.CopyTo2;
import org.jvnet.jaxb2_commons.lang.Equals2;
import org.jvnet.jaxb2_commons.lang.EqualsStrategy2;
import org.jvnet.jaxb2_commons.lang.HashCode2;
import org.jvnet.jaxb2_commons.lang.HashCodeStrategy2;
import org.jvnet.jaxb2_commons.lang.JAXBCopyStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBEqualsStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBHashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBMergeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBToStringStrategy;
import org.jvnet.jaxb2_commons.lang.MergeFrom2;
import org.jvnet.jaxb2_commons.lang.MergeStrategy2;
import org.jvnet.jaxb2_commons.lang.ToString2;
import org.jvnet.jaxb2_commons.lang.ToStringStrategy2;
import org.jvnet.jaxb2_commons.locator.ObjectLocator;
import org.jvnet.jaxb2_commons.locator.util.LocatorUtils;


/**
 * Information about the domain of the raster cell
 * 
 * <p>Java class for MD_CoverageDescription_Type complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="MD_CoverageDescription_Type"&gt;
 *   &lt;complexContent&gt;
 *     &lt;extension base="{http://www.isotc211.org/2005/gmd}AbstractMD_ContentInformation_Type"&gt;
 *       &lt;sequence&gt;
 *         &lt;element name="attributeDescription" type="{http://www.isotc211.org/2005/gco}RecordType_PropertyType"/&gt;
 *         &lt;element name="contentType" type="{http://www.isotc211.org/2005/gmd}MD_CoverageContentTypeCode_PropertyType"/&gt;
 *         &lt;element name="dimension" type="{http://www.isotc211.org/2005/gmd}MD_RangeDimension_PropertyType" maxOccurs="unbounded" minOccurs="0"/&gt;
 *       &lt;/sequence&gt;
 *     &lt;/extension&gt;
 *   &lt;/complexContent&gt;
 * &lt;/complexType&gt;
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "MD_CoverageDescription_Type", propOrder = {
    "attributeDescription",
    "contentType",
    "dimension"
})
@XmlSeeAlso({
    MDImageDescriptionType.class
})
public class MDCoverageDescriptionType
    extends AbstractMDContentInformationType
    implements Serializable, Cloneable, CopyTo2, Equals2, HashCode2, MergeFrom2, ToString2
{

    private final static long serialVersionUID = 1L;
    @XmlElement(required = true)
    @NotNull(message = "MDCoverageDescriptionType.attributeDescription {javax.validation.constraints.NotNull.message}")
    @Valid
    protected RecordTypePropertyType attributeDescription;
    @XmlElement(required = true)
    @NotNull(message = "MDCoverageDescriptionType.contentType {javax.validation.constraints.NotNull.message}")
    @Valid
    protected MDCoverageContentTypeCodePropertyType contentType;
    @Valid
    protected List<MDRangeDimensionPropertyType> dimension;

    /**
     * Gets the value of the attributeDescription property.
     * 
     * @return
     *     possible object is
     *     {@link RecordTypePropertyType }
     *     
     */
    public RecordTypePropertyType getAttributeDescription() {
        return attributeDescription;
    }

    /**
     * Sets the value of the attributeDescription property.
     * 
     * @param value
     *     allowed object is
     *     {@link RecordTypePropertyType }
     *     
     */
    public void setAttributeDescription(RecordTypePropertyType value) {
        this.attributeDescription = value;
    }

    public boolean isSetAttributeDescription() {
        return (this.attributeDescription!= null);
    }

    /**
     * Gets the value of the contentType property.
     * 
     * @return
     *     possible object is
     *     {@link MDCoverageContentTypeCodePropertyType }
     *     
     */
    public MDCoverageContentTypeCodePropertyType getContentType() {
        return contentType;
    }

    /**
     * Sets the value of the contentType property.
     * 
     * @param value
     *     allowed object is
     *     {@link MDCoverageContentTypeCodePropertyType }
     *     
     */
    public void setContentType(MDCoverageContentTypeCodePropertyType value) {
        this.contentType = value;
    }

    public boolean isSetContentType() {
        return (this.contentType!= null);
    }

    /**
     * Gets the value of the dimension property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the dimension property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getDimension().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link MDRangeDimensionPropertyType }
     * 
     * 
     */
    public List<MDRangeDimensionPropertyType> getDimension() {
        if (dimension == null) {
            dimension = new ArrayList<MDRangeDimensionPropertyType>();
        }
        return this.dimension;
    }

    public boolean isSetDimension() {
        return ((this.dimension!= null)&&(!this.dimension.isEmpty()));
    }

    public void unsetDimension() {
        this.dimension = null;
    }

    public String toString() {
        final ToStringStrategy2 strategy = JAXBToStringStrategy.INSTANCE;
        final StringBuilder buffer = new StringBuilder();
        append(null, buffer, strategy);
        return buffer.toString();
    }

    public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy2 strategy) {
        strategy.appendStart(locator, this, buffer);
        appendFields(locator, buffer, strategy);
        strategy.appendEnd(locator, this, buffer);
        return buffer;
    }

    public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy2 strategy) {
        super.appendFields(locator, buffer, strategy);
        {
            RecordTypePropertyType theAttributeDescription;
            theAttributeDescription = this.getAttributeDescription();
            strategy.appendField(locator, this, "attributeDescription", buffer, theAttributeDescription, this.isSetAttributeDescription());
        }
        {
            MDCoverageContentTypeCodePropertyType theContentType;
            theContentType = this.getContentType();
            strategy.appendField(locator, this, "contentType", buffer, theContentType, this.isSetContentType());
        }
        {
            List<MDRangeDimensionPropertyType> theDimension;
            theDimension = (this.isSetDimension()?this.getDimension():null);
            strategy.appendField(locator, this, "dimension", buffer, theDimension, this.isSetDimension());
        }
        return buffer;
    }

    public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy2 strategy) {
        if ((object == null)||(this.getClass()!= object.getClass())) {
            return false;
        }
        if (this == object) {
            return true;
        }
        if (!super.equals(thisLocator, thatLocator, object, strategy)) {
            return false;
        }
        final MDCoverageDescriptionType that = ((MDCoverageDescriptionType) object);
        {
            RecordTypePropertyType lhsAttributeDescription;
            lhsAttributeDescription = this.getAttributeDescription();
            RecordTypePropertyType rhsAttributeDescription;
            rhsAttributeDescription = that.getAttributeDescription();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "attributeDescription", lhsAttributeDescription), LocatorUtils.property(thatLocator, "attributeDescription", rhsAttributeDescription), lhsAttributeDescription, rhsAttributeDescription, this.isSetAttributeDescription(), that.isSetAttributeDescription())) {
                return false;
            }
        }
        {
            MDCoverageContentTypeCodePropertyType lhsContentType;
            lhsContentType = this.getContentType();
            MDCoverageContentTypeCodePropertyType rhsContentType;
            rhsContentType = that.getContentType();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "contentType", lhsContentType), LocatorUtils.property(thatLocator, "contentType", rhsContentType), lhsContentType, rhsContentType, this.isSetContentType(), that.isSetContentType())) {
                return false;
            }
        }
        {
            List<MDRangeDimensionPropertyType> lhsDimension;
            lhsDimension = (this.isSetDimension()?this.getDimension():null);
            List<MDRangeDimensionPropertyType> rhsDimension;
            rhsDimension = (that.isSetDimension()?that.getDimension():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "dimension", lhsDimension), LocatorUtils.property(thatLocator, "dimension", rhsDimension), lhsDimension, rhsDimension, this.isSetDimension(), that.isSetDimension())) {
                return false;
            }
        }
        return true;
    }

    public boolean equals(Object object) {
        final EqualsStrategy2 strategy = JAXBEqualsStrategy.INSTANCE;
        return equals(null, null, object, strategy);
    }

    public int hashCode(ObjectLocator locator, HashCodeStrategy2 strategy) {
        int currentHashCode = super.hashCode(locator, strategy);
        {
            RecordTypePropertyType theAttributeDescription;
            theAttributeDescription = this.getAttributeDescription();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "attributeDescription", theAttributeDescription), currentHashCode, theAttributeDescription, this.isSetAttributeDescription());
        }
        {
            MDCoverageContentTypeCodePropertyType theContentType;
            theContentType = this.getContentType();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "contentType", theContentType), currentHashCode, theContentType, this.isSetContentType());
        }
        {
            List<MDRangeDimensionPropertyType> theDimension;
            theDimension = (this.isSetDimension()?this.getDimension():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "dimension", theDimension), currentHashCode, theDimension, this.isSetDimension());
        }
        return currentHashCode;
    }

    public int hashCode() {
        final HashCodeStrategy2 strategy = JAXBHashCodeStrategy.INSTANCE;
        return this.hashCode(null, strategy);
    }

    public Object clone() {
        return copyTo(createNewInstance());
    }

    public Object copyTo(Object target) {
        final CopyStrategy2 strategy = JAXBCopyStrategy.INSTANCE;
        return copyTo(null, target, strategy);
    }

    public Object copyTo(ObjectLocator locator, Object target, CopyStrategy2 strategy) {
        final Object draftCopy = ((target == null)?createNewInstance():target);
        super.copyTo(locator, draftCopy, strategy);
        if (draftCopy instanceof MDCoverageDescriptionType) {
            final MDCoverageDescriptionType copy = ((MDCoverageDescriptionType) draftCopy);
            {
                Boolean attributeDescriptionShouldBeCopiedAndSet = strategy.shouldBeCopiedAndSet(locator, this.isSetAttributeDescription());
                if (attributeDescriptionShouldBeCopiedAndSet == Boolean.TRUE) {
                    RecordTypePropertyType sourceAttributeDescription;
                    sourceAttributeDescription = this.getAttributeDescription();
                    RecordTypePropertyType copyAttributeDescription = ((RecordTypePropertyType) strategy.copy(LocatorUtils.property(locator, "attributeDescription", sourceAttributeDescription), sourceAttributeDescription, this.isSetAttributeDescription()));
                    copy.setAttributeDescription(copyAttributeDescription);
                } else {
                    if (attributeDescriptionShouldBeCopiedAndSet == Boolean.FALSE) {
                        copy.attributeDescription = null;
                    }
                }
            }
            {
                Boolean contentTypeShouldBeCopiedAndSet = strategy.shouldBeCopiedAndSet(locator, this.isSetContentType());
                if (contentTypeShouldBeCopiedAndSet == Boolean.TRUE) {
                    MDCoverageContentTypeCodePropertyType sourceContentType;
                    sourceContentType = this.getContentType();
                    MDCoverageContentTypeCodePropertyType copyContentType = ((MDCoverageContentTypeCodePropertyType) strategy.copy(LocatorUtils.property(locator, "contentType", sourceContentType), sourceContentType, this.isSetContentType()));
                    copy.setContentType(copyContentType);
                } else {
                    if (contentTypeShouldBeCopiedAndSet == Boolean.FALSE) {
                        copy.contentType = null;
                    }
                }
            }
            {
                Boolean dimensionShouldBeCopiedAndSet = strategy.shouldBeCopiedAndSet(locator, this.isSetDimension());
                if (dimensionShouldBeCopiedAndSet == Boolean.TRUE) {
                    List<MDRangeDimensionPropertyType> sourceDimension;
                    sourceDimension = (this.isSetDimension()?this.getDimension():null);
                    @SuppressWarnings("unchecked")
                    List<MDRangeDimensionPropertyType> copyDimension = ((List<MDRangeDimensionPropertyType> ) strategy.copy(LocatorUtils.property(locator, "dimension", sourceDimension), sourceDimension, this.isSetDimension()));
                    copy.unsetDimension();
                    if (copyDimension!= null) {
                        List<MDRangeDimensionPropertyType> uniqueDimensionl = copy.getDimension();
                        uniqueDimensionl.addAll(copyDimension);
                    }
                } else {
                    if (dimensionShouldBeCopiedAndSet == Boolean.FALSE) {
                        copy.unsetDimension();
                    }
                }
            }
        }
        return draftCopy;
    }

    public Object createNewInstance() {
        return new MDCoverageDescriptionType();
    }

    public void mergeFrom(Object left, Object right) {
        final MergeStrategy2 strategy = JAXBMergeStrategy.INSTANCE;
        mergeFrom(null, null, left, right, strategy);
    }

    public void mergeFrom(ObjectLocator leftLocator, ObjectLocator rightLocator, Object left, Object right, MergeStrategy2 strategy) {
        super.mergeFrom(leftLocator, rightLocator, left, right, strategy);
        if (right instanceof MDCoverageDescriptionType) {
            final MDCoverageDescriptionType target = this;
            final MDCoverageDescriptionType leftObject = ((MDCoverageDescriptionType) left);
            final MDCoverageDescriptionType rightObject = ((MDCoverageDescriptionType) right);
            {
                Boolean attributeDescriptionShouldBeMergedAndSet = strategy.shouldBeMergedAndSet(leftLocator, rightLocator, leftObject.isSetAttributeDescription(), rightObject.isSetAttributeDescription());
                if (attributeDescriptionShouldBeMergedAndSet == Boolean.TRUE) {
                    RecordTypePropertyType lhsAttributeDescription;
                    lhsAttributeDescription = leftObject.getAttributeDescription();
                    RecordTypePropertyType rhsAttributeDescription;
                    rhsAttributeDescription = rightObject.getAttributeDescription();
                    RecordTypePropertyType mergedAttributeDescription = ((RecordTypePropertyType) strategy.merge(LocatorUtils.property(leftLocator, "attributeDescription", lhsAttributeDescription), LocatorUtils.property(rightLocator, "attributeDescription", rhsAttributeDescription), lhsAttributeDescription, rhsAttributeDescription, leftObject.isSetAttributeDescription(), rightObject.isSetAttributeDescription()));
                    target.setAttributeDescription(mergedAttributeDescription);
                } else {
                    if (attributeDescriptionShouldBeMergedAndSet == Boolean.FALSE) {
                        target.attributeDescription = null;
                    }
                }
            }
            {
                Boolean contentTypeShouldBeMergedAndSet = strategy.shouldBeMergedAndSet(leftLocator, rightLocator, leftObject.isSetContentType(), rightObject.isSetContentType());
                if (contentTypeShouldBeMergedAndSet == Boolean.TRUE) {
                    MDCoverageContentTypeCodePropertyType lhsContentType;
                    lhsContentType = leftObject.getContentType();
                    MDCoverageContentTypeCodePropertyType rhsContentType;
                    rhsContentType = rightObject.getContentType();
                    MDCoverageContentTypeCodePropertyType mergedContentType = ((MDCoverageContentTypeCodePropertyType) strategy.merge(LocatorUtils.property(leftLocator, "contentType", lhsContentType), LocatorUtils.property(rightLocator, "contentType", rhsContentType), lhsContentType, rhsContentType, leftObject.isSetContentType(), rightObject.isSetContentType()));
                    target.setContentType(mergedContentType);
                } else {
                    if (contentTypeShouldBeMergedAndSet == Boolean.FALSE) {
                        target.contentType = null;
                    }
                }
            }
            {
                Boolean dimensionShouldBeMergedAndSet = strategy.shouldBeMergedAndSet(leftLocator, rightLocator, leftObject.isSetDimension(), rightObject.isSetDimension());
                if (dimensionShouldBeMergedAndSet == Boolean.TRUE) {
                    List<MDRangeDimensionPropertyType> lhsDimension;
                    lhsDimension = (leftObject.isSetDimension()?leftObject.getDimension():null);
                    List<MDRangeDimensionPropertyType> rhsDimension;
                    rhsDimension = (rightObject.isSetDimension()?rightObject.getDimension():null);
                    List<MDRangeDimensionPropertyType> mergedDimension = ((List<MDRangeDimensionPropertyType> ) strategy.merge(LocatorUtils.property(leftLocator, "dimension", lhsDimension), LocatorUtils.property(rightLocator, "dimension", rhsDimension), lhsDimension, rhsDimension, leftObject.isSetDimension(), rightObject.isSetDimension()));
                    target.unsetDimension();
                    if (mergedDimension!= null) {
                        List<MDRangeDimensionPropertyType> uniqueDimensionl = target.getDimension();
                        uniqueDimensionl.addAll(mergedDimension);
                    }
                } else {
                    if (dimensionShouldBeMergedAndSet == Boolean.FALSE) {
                        target.unsetDimension();
                    }
                }
            }
        }
    }

    public void setDimension(List<MDRangeDimensionPropertyType> value) {
        this.dimension = null;
        if (value!= null) {
            List<MDRangeDimensionPropertyType> draftl = this.getDimension();
            draftl.addAll(value);
        }
    }

}
