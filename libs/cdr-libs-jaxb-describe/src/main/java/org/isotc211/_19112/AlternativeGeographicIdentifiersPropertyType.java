//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.11 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2016.07.27 at 04:06:37 PM EDT 
//


package org.isotc211._19112;

import java.io.Serializable;
import java.util.ArrayList;
import java.util.List;
import javax.validation.Valid;
import javax.validation.constraints.NotNull;
import javax.validation.constraints.Size;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlType;
import org.jvnet.jaxb2_commons.lang.CopyStrategy2;
import org.jvnet.jaxb2_commons.lang.CopyTo2;
import org.jvnet.jaxb2_commons.lang.Equals2;
import org.jvnet.jaxb2_commons.lang.EqualsStrategy2;
import org.jvnet.jaxb2_commons.lang.HashCode2;
import org.jvnet.jaxb2_commons.lang.HashCodeStrategy2;
import org.jvnet.jaxb2_commons.lang.JAXBCopyStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBEqualsStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBHashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBMergeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBToStringStrategy;
import org.jvnet.jaxb2_commons.lang.MergeFrom2;
import org.jvnet.jaxb2_commons.lang.MergeStrategy2;
import org.jvnet.jaxb2_commons.lang.ToString2;
import org.jvnet.jaxb2_commons.lang.ToStringStrategy2;
import org.jvnet.jaxb2_commons.locator.ObjectLocator;
import org.jvnet.jaxb2_commons.locator.util.LocatorUtils;


/**
 * <p>Java class for AlternativeGeographicIdentifiersPropertyType complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="AlternativeGeographicIdentifiersPropertyType"&gt;
 *   &lt;complexContent&gt;
 *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
 *       &lt;sequence&gt;
 *         &lt;element ref="{http://www.isotc211.org/19112}alternativeGeographicIdentifier" maxOccurs="unbounded"/&gt;
 *       &lt;/sequence&gt;
 *     &lt;/restriction&gt;
 *   &lt;/complexContent&gt;
 * &lt;/complexType&gt;
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "AlternativeGeographicIdentifiersPropertyType", propOrder = {
    "alternativeGeographicIdentifier"
})
public class AlternativeGeographicIdentifiersPropertyType implements Serializable, Cloneable, CopyTo2, Equals2, HashCode2, MergeFrom2, ToString2
{

    private final static long serialVersionUID = 1L;
    @XmlElement(required = true)
    @NotNull(message = "AlternativeGeographicIdentifiersPropertyType.alternativeGeographicIdentifier {javax.validation.constraints.NotNull.message}")
    @Size(min = 1)
    @Valid
    protected List<AlternativeGeographicIdentifier> alternativeGeographicIdentifier;

    /**
     * Gets the value of the alternativeGeographicIdentifier property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the alternativeGeographicIdentifier property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getAlternativeGeographicIdentifier().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link AlternativeGeographicIdentifier }
     * 
     * 
     */
    public List<AlternativeGeographicIdentifier> getAlternativeGeographicIdentifier() {
        if (alternativeGeographicIdentifier == null) {
            alternativeGeographicIdentifier = new ArrayList<AlternativeGeographicIdentifier>();
        }
        return this.alternativeGeographicIdentifier;
    }

    public boolean isSetAlternativeGeographicIdentifier() {
        return ((this.alternativeGeographicIdentifier!= null)&&(!this.alternativeGeographicIdentifier.isEmpty()));
    }

    public void unsetAlternativeGeographicIdentifier() {
        this.alternativeGeographicIdentifier = null;
    }

    public String toString() {
        final ToStringStrategy2 strategy = JAXBToStringStrategy.INSTANCE;
        final StringBuilder buffer = new StringBuilder();
        append(null, buffer, strategy);
        return buffer.toString();
    }

    public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy2 strategy) {
        strategy.appendStart(locator, this, buffer);
        appendFields(locator, buffer, strategy);
        strategy.appendEnd(locator, this, buffer);
        return buffer;
    }

    public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy2 strategy) {
        {
            List<AlternativeGeographicIdentifier> theAlternativeGeographicIdentifier;
            theAlternativeGeographicIdentifier = (this.isSetAlternativeGeographicIdentifier()?this.getAlternativeGeographicIdentifier():null);
            strategy.appendField(locator, this, "alternativeGeographicIdentifier", buffer, theAlternativeGeographicIdentifier, this.isSetAlternativeGeographicIdentifier());
        }
        return buffer;
    }

    public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy2 strategy) {
        if ((object == null)||(this.getClass()!= object.getClass())) {
            return false;
        }
        if (this == object) {
            return true;
        }
        final AlternativeGeographicIdentifiersPropertyType that = ((AlternativeGeographicIdentifiersPropertyType) object);
        {
            List<AlternativeGeographicIdentifier> lhsAlternativeGeographicIdentifier;
            lhsAlternativeGeographicIdentifier = (this.isSetAlternativeGeographicIdentifier()?this.getAlternativeGeographicIdentifier():null);
            List<AlternativeGeographicIdentifier> rhsAlternativeGeographicIdentifier;
            rhsAlternativeGeographicIdentifier = (that.isSetAlternativeGeographicIdentifier()?that.getAlternativeGeographicIdentifier():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "alternativeGeographicIdentifier", lhsAlternativeGeographicIdentifier), LocatorUtils.property(thatLocator, "alternativeGeographicIdentifier", rhsAlternativeGeographicIdentifier), lhsAlternativeGeographicIdentifier, rhsAlternativeGeographicIdentifier, this.isSetAlternativeGeographicIdentifier(), that.isSetAlternativeGeographicIdentifier())) {
                return false;
            }
        }
        return true;
    }

    public boolean equals(Object object) {
        final EqualsStrategy2 strategy = JAXBEqualsStrategy.INSTANCE;
        return equals(null, null, object, strategy);
    }

    public int hashCode(ObjectLocator locator, HashCodeStrategy2 strategy) {
        int currentHashCode = 1;
        {
            List<AlternativeGeographicIdentifier> theAlternativeGeographicIdentifier;
            theAlternativeGeographicIdentifier = (this.isSetAlternativeGeographicIdentifier()?this.getAlternativeGeographicIdentifier():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "alternativeGeographicIdentifier", theAlternativeGeographicIdentifier), currentHashCode, theAlternativeGeographicIdentifier, this.isSetAlternativeGeographicIdentifier());
        }
        return currentHashCode;
    }

    public int hashCode() {
        final HashCodeStrategy2 strategy = JAXBHashCodeStrategy.INSTANCE;
        return this.hashCode(null, strategy);
    }

    public Object clone() {
        return copyTo(createNewInstance());
    }

    public Object copyTo(Object target) {
        final CopyStrategy2 strategy = JAXBCopyStrategy.INSTANCE;
        return copyTo(null, target, strategy);
    }

    public Object copyTo(ObjectLocator locator, Object target, CopyStrategy2 strategy) {
        final Object draftCopy = ((target == null)?createNewInstance():target);
        if (draftCopy instanceof AlternativeGeographicIdentifiersPropertyType) {
            final AlternativeGeographicIdentifiersPropertyType copy = ((AlternativeGeographicIdentifiersPropertyType) draftCopy);
            {
                Boolean alternativeGeographicIdentifierShouldBeCopiedAndSet = strategy.shouldBeCopiedAndSet(locator, this.isSetAlternativeGeographicIdentifier());
                if (alternativeGeographicIdentifierShouldBeCopiedAndSet == Boolean.TRUE) {
                    List<AlternativeGeographicIdentifier> sourceAlternativeGeographicIdentifier;
                    sourceAlternativeGeographicIdentifier = (this.isSetAlternativeGeographicIdentifier()?this.getAlternativeGeographicIdentifier():null);
                    @SuppressWarnings("unchecked")
                    List<AlternativeGeographicIdentifier> copyAlternativeGeographicIdentifier = ((List<AlternativeGeographicIdentifier> ) strategy.copy(LocatorUtils.property(locator, "alternativeGeographicIdentifier", sourceAlternativeGeographicIdentifier), sourceAlternativeGeographicIdentifier, this.isSetAlternativeGeographicIdentifier()));
                    copy.unsetAlternativeGeographicIdentifier();
                    if (copyAlternativeGeographicIdentifier!= null) {
                        List<AlternativeGeographicIdentifier> uniqueAlternativeGeographicIdentifierl = copy.getAlternativeGeographicIdentifier();
                        uniqueAlternativeGeographicIdentifierl.addAll(copyAlternativeGeographicIdentifier);
                    }
                } else {
                    if (alternativeGeographicIdentifierShouldBeCopiedAndSet == Boolean.FALSE) {
                        copy.unsetAlternativeGeographicIdentifier();
                    }
                }
            }
        }
        return draftCopy;
    }

    public Object createNewInstance() {
        return new AlternativeGeographicIdentifiersPropertyType();
    }

    public void mergeFrom(Object left, Object right) {
        final MergeStrategy2 strategy = JAXBMergeStrategy.INSTANCE;
        mergeFrom(null, null, left, right, strategy);
    }

    public void mergeFrom(ObjectLocator leftLocator, ObjectLocator rightLocator, Object left, Object right, MergeStrategy2 strategy) {
        if (right instanceof AlternativeGeographicIdentifiersPropertyType) {
            final AlternativeGeographicIdentifiersPropertyType target = this;
            final AlternativeGeographicIdentifiersPropertyType leftObject = ((AlternativeGeographicIdentifiersPropertyType) left);
            final AlternativeGeographicIdentifiersPropertyType rightObject = ((AlternativeGeographicIdentifiersPropertyType) right);
            {
                Boolean alternativeGeographicIdentifierShouldBeMergedAndSet = strategy.shouldBeMergedAndSet(leftLocator, rightLocator, leftObject.isSetAlternativeGeographicIdentifier(), rightObject.isSetAlternativeGeographicIdentifier());
                if (alternativeGeographicIdentifierShouldBeMergedAndSet == Boolean.TRUE) {
                    List<AlternativeGeographicIdentifier> lhsAlternativeGeographicIdentifier;
                    lhsAlternativeGeographicIdentifier = (leftObject.isSetAlternativeGeographicIdentifier()?leftObject.getAlternativeGeographicIdentifier():null);
                    List<AlternativeGeographicIdentifier> rhsAlternativeGeographicIdentifier;
                    rhsAlternativeGeographicIdentifier = (rightObject.isSetAlternativeGeographicIdentifier()?rightObject.getAlternativeGeographicIdentifier():null);
                    List<AlternativeGeographicIdentifier> mergedAlternativeGeographicIdentifier = ((List<AlternativeGeographicIdentifier> ) strategy.merge(LocatorUtils.property(leftLocator, "alternativeGeographicIdentifier", lhsAlternativeGeographicIdentifier), LocatorUtils.property(rightLocator, "alternativeGeographicIdentifier", rhsAlternativeGeographicIdentifier), lhsAlternativeGeographicIdentifier, rhsAlternativeGeographicIdentifier, leftObject.isSetAlternativeGeographicIdentifier(), rightObject.isSetAlternativeGeographicIdentifier()));
                    target.unsetAlternativeGeographicIdentifier();
                    if (mergedAlternativeGeographicIdentifier!= null) {
                        List<AlternativeGeographicIdentifier> uniqueAlternativeGeographicIdentifierl = target.getAlternativeGeographicIdentifier();
                        uniqueAlternativeGeographicIdentifierl.addAll(mergedAlternativeGeographicIdentifier);
                    }
                } else {
                    if (alternativeGeographicIdentifierShouldBeMergedAndSet == Boolean.FALSE) {
                        target.unsetAlternativeGeographicIdentifier();
                    }
                }
            }
        }
    }

    public void setAlternativeGeographicIdentifier(List<AlternativeGeographicIdentifier> value) {
        this.alternativeGeographicIdentifier = null;
        if (value!= null) {
            List<AlternativeGeographicIdentifier> draftl = this.getAlternativeGeographicIdentifier();
            draftl.addAll(value);
        }
    }

}
