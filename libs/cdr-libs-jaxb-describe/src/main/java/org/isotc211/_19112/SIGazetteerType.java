//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.11 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2016.07.27 at 04:06:37 PM EDT 
//


package org.isotc211._19112;

import java.io.Serializable;
import java.util.ArrayList;
import java.util.List;
import javax.validation.Valid;
import javax.validation.constraints.NotNull;
import javax.validation.constraints.Size;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlSchemaType;
import javax.xml.bind.annotation.XmlType;
import net.opengis.gml.v_3_2_1.AbstractFeatureType;
import net.opengis.gml.v_3_2_1.GeometryPropertyType;
import net.opengis.gml.v_3_2_1.ReferenceType;
import org.isotc211._2005.gmd.CIResponsiblePartyPropertyType;
import org.jvnet.jaxb2_commons.lang.CopyStrategy2;
import org.jvnet.jaxb2_commons.lang.CopyTo2;
import org.jvnet.jaxb2_commons.lang.Equals2;
import org.jvnet.jaxb2_commons.lang.EqualsStrategy2;
import org.jvnet.jaxb2_commons.lang.HashCode2;
import org.jvnet.jaxb2_commons.lang.HashCodeStrategy2;
import org.jvnet.jaxb2_commons.lang.JAXBCopyStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBEqualsStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBHashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBMergeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBToStringStrategy;
import org.jvnet.jaxb2_commons.lang.MergeFrom2;
import org.jvnet.jaxb2_commons.lang.MergeStrategy2;
import org.jvnet.jaxb2_commons.lang.ToString2;
import org.jvnet.jaxb2_commons.lang.ToStringStrategy2;
import org.jvnet.jaxb2_commons.locator.ObjectLocator;
import org.jvnet.jaxb2_commons.locator.util.LocatorUtils;


/**
 * A gazetteer type; a gazetteer is a directory of geographic identifiers describing location instances.
 * 
 * <p>Java class for SI_GazetteerType complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="SI_GazetteerType"&gt;
 *   &lt;complexContent&gt;
 *     &lt;extension base="{http://www.opengis.net/gml/3.2}AbstractFeatureType"&gt;
 *       &lt;sequence&gt;
 *         &lt;element name="name" type="{http://www.isotc211.org/19112}LanguageStringType"/&gt;
 *         &lt;element name="scope" type="{http://www.isotc211.org/19112}LanguageStringType" minOccurs="0"/&gt;
 *         &lt;element name="territoryOfUse" type="{http://www.opengis.net/gml/3.2}GeometryPropertyType"/&gt;
 *         &lt;element name="custodian" type="{http://www.isotc211.org/2005/gmd}CI_ResponsibleParty_PropertyType"/&gt;
 *         &lt;element name="coordinateSystem" type="{http://www.w3.org/2001/XMLSchema}anyURI" minOccurs="0"/&gt;
 *         &lt;element name="locationType" type="{http://www.opengis.net/gml/3.2}ReferenceType" maxOccurs="unbounded"/&gt;
 *       &lt;/sequence&gt;
 *     &lt;/extension&gt;
 *   &lt;/complexContent&gt;
 * &lt;/complexType&gt;
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "SI_GazetteerType", propOrder = {
    "name",
    "scope",
    "territoryOfUse",
    "custodian",
    "coordinateSystem",
    "locationType"
})
public class SIGazetteerType
    extends AbstractFeatureType
    implements Serializable, Cloneable, CopyTo2, Equals2, HashCode2, MergeFrom2, ToString2
{

    private final static long serialVersionUID = 1L;
    @XmlElement(required = true)
    @NotNull(message = "SIGazetteerType.name {javax.validation.constraints.NotNull.message}")
    @Valid
    protected LanguageStringType name;
    @Valid
    protected LanguageStringType scope;
    @XmlElement(required = true)
    @NotNull(message = "SIGazetteerType.territoryOfUse {javax.validation.constraints.NotNull.message}")
    @Valid
    protected GeometryPropertyType territoryOfUse;
    @XmlElement(required = true)
    @NotNull(message = "SIGazetteerType.custodian {javax.validation.constraints.NotNull.message}")
    @Valid
    protected CIResponsiblePartyPropertyType custodian;
    @XmlSchemaType(name = "anyURI")
    protected String coordinateSystem;
    @XmlElement(required = true)
    @NotNull(message = "SIGazetteerType.locationType {javax.validation.constraints.NotNull.message}")
    @Size(min = 1)
    @Valid
    protected List<ReferenceType> locationType;

    /**
     * Gets the value of the name property.
     * 
     * @return
     *     possible object is
     *     {@link LanguageStringType }
     *     
     */
    public LanguageStringType getNameProperty() {
        return name;
    }

    /**
     * Sets the value of the name property.
     * 
     * @param value
     *     allowed object is
     *     {@link LanguageStringType }
     *     
     */
    public void setName(LanguageStringType value) {
        this.name = value;
    }

    public boolean isSetName() {
        return (this.name!= null);
    }

    /**
     * Gets the value of the scope property.
     * 
     * @return
     *     possible object is
     *     {@link LanguageStringType }
     *     
     */
    public LanguageStringType getScope() {
        return scope;
    }

    /**
     * Sets the value of the scope property.
     * 
     * @param value
     *     allowed object is
     *     {@link LanguageStringType }
     *     
     */
    public void setScope(LanguageStringType value) {
        this.scope = value;
    }

    public boolean isSetScope() {
        return (this.scope!= null);
    }

    /**
     * Gets the value of the territoryOfUse property.
     * 
     * @return
     *     possible object is
     *     {@link GeometryPropertyType }
     *     
     */
    public GeometryPropertyType getTerritoryOfUse() {
        return territoryOfUse;
    }

    /**
     * Sets the value of the territoryOfUse property.
     * 
     * @param value
     *     allowed object is
     *     {@link GeometryPropertyType }
     *     
     */
    public void setTerritoryOfUse(GeometryPropertyType value) {
        this.territoryOfUse = value;
    }

    public boolean isSetTerritoryOfUse() {
        return (this.territoryOfUse!= null);
    }

    /**
     * Gets the value of the custodian property.
     * 
     * @return
     *     possible object is
     *     {@link CIResponsiblePartyPropertyType }
     *     
     */
    public CIResponsiblePartyPropertyType getCustodian() {
        return custodian;
    }

    /**
     * Sets the value of the custodian property.
     * 
     * @param value
     *     allowed object is
     *     {@link CIResponsiblePartyPropertyType }
     *     
     */
    public void setCustodian(CIResponsiblePartyPropertyType value) {
        this.custodian = value;
    }

    public boolean isSetCustodian() {
        return (this.custodian!= null);
    }

    /**
     * Gets the value of the coordinateSystem property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getCoordinateSystem() {
        return coordinateSystem;
    }

    /**
     * Sets the value of the coordinateSystem property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setCoordinateSystem(String value) {
        this.coordinateSystem = value;
    }

    public boolean isSetCoordinateSystem() {
        return (this.coordinateSystem!= null);
    }

    /**
     * Gets the value of the locationType property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the locationType property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getLocationType().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link ReferenceType }
     * 
     * 
     */
    public List<ReferenceType> getLocationType() {
        if (locationType == null) {
            locationType = new ArrayList<ReferenceType>();
        }
        return this.locationType;
    }

    public boolean isSetLocationType() {
        return ((this.locationType!= null)&&(!this.locationType.isEmpty()));
    }

    public void unsetLocationType() {
        this.locationType = null;
    }

    public String toString() {
        final ToStringStrategy2 strategy = JAXBToStringStrategy.INSTANCE;
        final StringBuilder buffer = new StringBuilder();
        append(null, buffer, strategy);
        return buffer.toString();
    }

    public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy2 strategy) {
        strategy.appendStart(locator, this, buffer);
        appendFields(locator, buffer, strategy);
        strategy.appendEnd(locator, this, buffer);
        return buffer;
    }

    public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy2 strategy) {
        super.appendFields(locator, buffer, strategy);
        {
            LanguageStringType theName;
            theName = this.getNameProperty();
            strategy.appendField(locator, this, "name", buffer, theName, this.isSetName());
        }
        {
            LanguageStringType theScope;
            theScope = this.getScope();
            strategy.appendField(locator, this, "scope", buffer, theScope, this.isSetScope());
        }
        {
            GeometryPropertyType theTerritoryOfUse;
            theTerritoryOfUse = this.getTerritoryOfUse();
            strategy.appendField(locator, this, "territoryOfUse", buffer, theTerritoryOfUse, this.isSetTerritoryOfUse());
        }
        {
            CIResponsiblePartyPropertyType theCustodian;
            theCustodian = this.getCustodian();
            strategy.appendField(locator, this, "custodian", buffer, theCustodian, this.isSetCustodian());
        }
        {
            String theCoordinateSystem;
            theCoordinateSystem = this.getCoordinateSystem();
            strategy.appendField(locator, this, "coordinateSystem", buffer, theCoordinateSystem, this.isSetCoordinateSystem());
        }
        {
            List<ReferenceType> theLocationType;
            theLocationType = (this.isSetLocationType()?this.getLocationType():null);
            strategy.appendField(locator, this, "locationType", buffer, theLocationType, this.isSetLocationType());
        }
        return buffer;
    }

    public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy2 strategy) {
        if ((object == null)||(this.getClass()!= object.getClass())) {
            return false;
        }
        if (this == object) {
            return true;
        }
        if (!super.equals(thisLocator, thatLocator, object, strategy)) {
            return false;
        }
        final SIGazetteerType that = ((SIGazetteerType) object);
        {
            LanguageStringType lhsName;
            lhsName = this.getNameProperty();
            LanguageStringType rhsName;
            rhsName = that.getNameProperty();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "name", lhsName), LocatorUtils.property(thatLocator, "name", rhsName), lhsName, rhsName, this.isSetName(), that.isSetName())) {
                return false;
            }
        }
        {
            LanguageStringType lhsScope;
            lhsScope = this.getScope();
            LanguageStringType rhsScope;
            rhsScope = that.getScope();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "scope", lhsScope), LocatorUtils.property(thatLocator, "scope", rhsScope), lhsScope, rhsScope, this.isSetScope(), that.isSetScope())) {
                return false;
            }
        }
        {
            GeometryPropertyType lhsTerritoryOfUse;
            lhsTerritoryOfUse = this.getTerritoryOfUse();
            GeometryPropertyType rhsTerritoryOfUse;
            rhsTerritoryOfUse = that.getTerritoryOfUse();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "territoryOfUse", lhsTerritoryOfUse), LocatorUtils.property(thatLocator, "territoryOfUse", rhsTerritoryOfUse), lhsTerritoryOfUse, rhsTerritoryOfUse, this.isSetTerritoryOfUse(), that.isSetTerritoryOfUse())) {
                return false;
            }
        }
        {
            CIResponsiblePartyPropertyType lhsCustodian;
            lhsCustodian = this.getCustodian();
            CIResponsiblePartyPropertyType rhsCustodian;
            rhsCustodian = that.getCustodian();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "custodian", lhsCustodian), LocatorUtils.property(thatLocator, "custodian", rhsCustodian), lhsCustodian, rhsCustodian, this.isSetCustodian(), that.isSetCustodian())) {
                return false;
            }
        }
        {
            String lhsCoordinateSystem;
            lhsCoordinateSystem = this.getCoordinateSystem();
            String rhsCoordinateSystem;
            rhsCoordinateSystem = that.getCoordinateSystem();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "coordinateSystem", lhsCoordinateSystem), LocatorUtils.property(thatLocator, "coordinateSystem", rhsCoordinateSystem), lhsCoordinateSystem, rhsCoordinateSystem, this.isSetCoordinateSystem(), that.isSetCoordinateSystem())) {
                return false;
            }
        }
        {
            List<ReferenceType> lhsLocationType;
            lhsLocationType = (this.isSetLocationType()?this.getLocationType():null);
            List<ReferenceType> rhsLocationType;
            rhsLocationType = (that.isSetLocationType()?that.getLocationType():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "locationType", lhsLocationType), LocatorUtils.property(thatLocator, "locationType", rhsLocationType), lhsLocationType, rhsLocationType, this.isSetLocationType(), that.isSetLocationType())) {
                return false;
            }
        }
        return true;
    }

    public boolean equals(Object object) {
        final EqualsStrategy2 strategy = JAXBEqualsStrategy.INSTANCE;
        return equals(null, null, object, strategy);
    }

    public int hashCode(ObjectLocator locator, HashCodeStrategy2 strategy) {
        int currentHashCode = super.hashCode(locator, strategy);
        {
            LanguageStringType theName;
            theName = this.getNameProperty();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "name", theName), currentHashCode, theName, this.isSetName());
        }
        {
            LanguageStringType theScope;
            theScope = this.getScope();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "scope", theScope), currentHashCode, theScope, this.isSetScope());
        }
        {
            GeometryPropertyType theTerritoryOfUse;
            theTerritoryOfUse = this.getTerritoryOfUse();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "territoryOfUse", theTerritoryOfUse), currentHashCode, theTerritoryOfUse, this.isSetTerritoryOfUse());
        }
        {
            CIResponsiblePartyPropertyType theCustodian;
            theCustodian = this.getCustodian();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "custodian", theCustodian), currentHashCode, theCustodian, this.isSetCustodian());
        }
        {
            String theCoordinateSystem;
            theCoordinateSystem = this.getCoordinateSystem();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "coordinateSystem", theCoordinateSystem), currentHashCode, theCoordinateSystem, this.isSetCoordinateSystem());
        }
        {
            List<ReferenceType> theLocationType;
            theLocationType = (this.isSetLocationType()?this.getLocationType():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "locationType", theLocationType), currentHashCode, theLocationType, this.isSetLocationType());
        }
        return currentHashCode;
    }

    public int hashCode() {
        final HashCodeStrategy2 strategy = JAXBHashCodeStrategy.INSTANCE;
        return this.hashCode(null, strategy);
    }

    public Object clone() {
        return copyTo(createNewInstance());
    }

    public Object copyTo(Object target) {
        final CopyStrategy2 strategy = JAXBCopyStrategy.INSTANCE;
        return copyTo(null, target, strategy);
    }

    public Object copyTo(ObjectLocator locator, Object target, CopyStrategy2 strategy) {
        final Object draftCopy = ((target == null)?createNewInstance():target);
        super.copyTo(locator, draftCopy, strategy);
        if (draftCopy instanceof SIGazetteerType) {
            final SIGazetteerType copy = ((SIGazetteerType) draftCopy);
            {
                Boolean nameShouldBeCopiedAndSet = strategy.shouldBeCopiedAndSet(locator, this.isSetName());
                if (nameShouldBeCopiedAndSet == Boolean.TRUE) {
                    LanguageStringType sourceName;
                    sourceName = this.getNameProperty();
                    LanguageStringType copyName = ((LanguageStringType) strategy.copy(LocatorUtils.property(locator, "name", sourceName), sourceName, this.isSetName()));
                    copy.setName(copyName);
                } else {
                    if (nameShouldBeCopiedAndSet == Boolean.FALSE) {
                        copy.name = null;
                    }
                }
            }
            {
                Boolean scopeShouldBeCopiedAndSet = strategy.shouldBeCopiedAndSet(locator, this.isSetScope());
                if (scopeShouldBeCopiedAndSet == Boolean.TRUE) {
                    LanguageStringType sourceScope;
                    sourceScope = this.getScope();
                    LanguageStringType copyScope = ((LanguageStringType) strategy.copy(LocatorUtils.property(locator, "scope", sourceScope), sourceScope, this.isSetScope()));
                    copy.setScope(copyScope);
                } else {
                    if (scopeShouldBeCopiedAndSet == Boolean.FALSE) {
                        copy.scope = null;
                    }
                }
            }
            {
                Boolean territoryOfUseShouldBeCopiedAndSet = strategy.shouldBeCopiedAndSet(locator, this.isSetTerritoryOfUse());
                if (territoryOfUseShouldBeCopiedAndSet == Boolean.TRUE) {
                    GeometryPropertyType sourceTerritoryOfUse;
                    sourceTerritoryOfUse = this.getTerritoryOfUse();
                    GeometryPropertyType copyTerritoryOfUse = ((GeometryPropertyType) strategy.copy(LocatorUtils.property(locator, "territoryOfUse", sourceTerritoryOfUse), sourceTerritoryOfUse, this.isSetTerritoryOfUse()));
                    copy.setTerritoryOfUse(copyTerritoryOfUse);
                } else {
                    if (territoryOfUseShouldBeCopiedAndSet == Boolean.FALSE) {
                        copy.territoryOfUse = null;
                    }
                }
            }
            {
                Boolean custodianShouldBeCopiedAndSet = strategy.shouldBeCopiedAndSet(locator, this.isSetCustodian());
                if (custodianShouldBeCopiedAndSet == Boolean.TRUE) {
                    CIResponsiblePartyPropertyType sourceCustodian;
                    sourceCustodian = this.getCustodian();
                    CIResponsiblePartyPropertyType copyCustodian = ((CIResponsiblePartyPropertyType) strategy.copy(LocatorUtils.property(locator, "custodian", sourceCustodian), sourceCustodian, this.isSetCustodian()));
                    copy.setCustodian(copyCustodian);
                } else {
                    if (custodianShouldBeCopiedAndSet == Boolean.FALSE) {
                        copy.custodian = null;
                    }
                }
            }
            {
                Boolean coordinateSystemShouldBeCopiedAndSet = strategy.shouldBeCopiedAndSet(locator, this.isSetCoordinateSystem());
                if (coordinateSystemShouldBeCopiedAndSet == Boolean.TRUE) {
                    String sourceCoordinateSystem;
                    sourceCoordinateSystem = this.getCoordinateSystem();
                    String copyCoordinateSystem = ((String) strategy.copy(LocatorUtils.property(locator, "coordinateSystem", sourceCoordinateSystem), sourceCoordinateSystem, this.isSetCoordinateSystem()));
                    copy.setCoordinateSystem(copyCoordinateSystem);
                } else {
                    if (coordinateSystemShouldBeCopiedAndSet == Boolean.FALSE) {
                        copy.coordinateSystem = null;
                    }
                }
            }
            {
                Boolean locationTypeShouldBeCopiedAndSet = strategy.shouldBeCopiedAndSet(locator, this.isSetLocationType());
                if (locationTypeShouldBeCopiedAndSet == Boolean.TRUE) {
                    List<ReferenceType> sourceLocationType;
                    sourceLocationType = (this.isSetLocationType()?this.getLocationType():null);
                    @SuppressWarnings("unchecked")
                    List<ReferenceType> copyLocationType = ((List<ReferenceType> ) strategy.copy(LocatorUtils.property(locator, "locationType", sourceLocationType), sourceLocationType, this.isSetLocationType()));
                    copy.unsetLocationType();
                    if (copyLocationType!= null) {
                        List<ReferenceType> uniqueLocationTypel = copy.getLocationType();
                        uniqueLocationTypel.addAll(copyLocationType);
                    }
                } else {
                    if (locationTypeShouldBeCopiedAndSet == Boolean.FALSE) {
                        copy.unsetLocationType();
                    }
                }
            }
        }
        return draftCopy;
    }

    public Object createNewInstance() {
        return new SIGazetteerType();
    }

    public void mergeFrom(Object left, Object right) {
        final MergeStrategy2 strategy = JAXBMergeStrategy.INSTANCE;
        mergeFrom(null, null, left, right, strategy);
    }

    public void mergeFrom(ObjectLocator leftLocator, ObjectLocator rightLocator, Object left, Object right, MergeStrategy2 strategy) {
        super.mergeFrom(leftLocator, rightLocator, left, right, strategy);
        if (right instanceof SIGazetteerType) {
            final SIGazetteerType target = this;
            final SIGazetteerType leftObject = ((SIGazetteerType) left);
            final SIGazetteerType rightObject = ((SIGazetteerType) right);
            {
                Boolean nameShouldBeMergedAndSet = strategy.shouldBeMergedAndSet(leftLocator, rightLocator, leftObject.isSetName(), rightObject.isSetName());
                if (nameShouldBeMergedAndSet == Boolean.TRUE) {
                    LanguageStringType lhsName;
                    lhsName = leftObject.getNameProperty();
                    LanguageStringType rhsName;
                    rhsName = rightObject.getNameProperty();
                    LanguageStringType mergedName = ((LanguageStringType) strategy.merge(LocatorUtils.property(leftLocator, "name", lhsName), LocatorUtils.property(rightLocator, "name", rhsName), lhsName, rhsName, leftObject.isSetName(), rightObject.isSetName()));
                    target.setName(mergedName);
                } else {
                    if (nameShouldBeMergedAndSet == Boolean.FALSE) {
                        target.name = null;
                    }
                }
            }
            {
                Boolean scopeShouldBeMergedAndSet = strategy.shouldBeMergedAndSet(leftLocator, rightLocator, leftObject.isSetScope(), rightObject.isSetScope());
                if (scopeShouldBeMergedAndSet == Boolean.TRUE) {
                    LanguageStringType lhsScope;
                    lhsScope = leftObject.getScope();
                    LanguageStringType rhsScope;
                    rhsScope = rightObject.getScope();
                    LanguageStringType mergedScope = ((LanguageStringType) strategy.merge(LocatorUtils.property(leftLocator, "scope", lhsScope), LocatorUtils.property(rightLocator, "scope", rhsScope), lhsScope, rhsScope, leftObject.isSetScope(), rightObject.isSetScope()));
                    target.setScope(mergedScope);
                } else {
                    if (scopeShouldBeMergedAndSet == Boolean.FALSE) {
                        target.scope = null;
                    }
                }
            }
            {
                Boolean territoryOfUseShouldBeMergedAndSet = strategy.shouldBeMergedAndSet(leftLocator, rightLocator, leftObject.isSetTerritoryOfUse(), rightObject.isSetTerritoryOfUse());
                if (territoryOfUseShouldBeMergedAndSet == Boolean.TRUE) {
                    GeometryPropertyType lhsTerritoryOfUse;
                    lhsTerritoryOfUse = leftObject.getTerritoryOfUse();
                    GeometryPropertyType rhsTerritoryOfUse;
                    rhsTerritoryOfUse = rightObject.getTerritoryOfUse();
                    GeometryPropertyType mergedTerritoryOfUse = ((GeometryPropertyType) strategy.merge(LocatorUtils.property(leftLocator, "territoryOfUse", lhsTerritoryOfUse), LocatorUtils.property(rightLocator, "territoryOfUse", rhsTerritoryOfUse), lhsTerritoryOfUse, rhsTerritoryOfUse, leftObject.isSetTerritoryOfUse(), rightObject.isSetTerritoryOfUse()));
                    target.setTerritoryOfUse(mergedTerritoryOfUse);
                } else {
                    if (territoryOfUseShouldBeMergedAndSet == Boolean.FALSE) {
                        target.territoryOfUse = null;
                    }
                }
            }
            {
                Boolean custodianShouldBeMergedAndSet = strategy.shouldBeMergedAndSet(leftLocator, rightLocator, leftObject.isSetCustodian(), rightObject.isSetCustodian());
                if (custodianShouldBeMergedAndSet == Boolean.TRUE) {
                    CIResponsiblePartyPropertyType lhsCustodian;
                    lhsCustodian = leftObject.getCustodian();
                    CIResponsiblePartyPropertyType rhsCustodian;
                    rhsCustodian = rightObject.getCustodian();
                    CIResponsiblePartyPropertyType mergedCustodian = ((CIResponsiblePartyPropertyType) strategy.merge(LocatorUtils.property(leftLocator, "custodian", lhsCustodian), LocatorUtils.property(rightLocator, "custodian", rhsCustodian), lhsCustodian, rhsCustodian, leftObject.isSetCustodian(), rightObject.isSetCustodian()));
                    target.setCustodian(mergedCustodian);
                } else {
                    if (custodianShouldBeMergedAndSet == Boolean.FALSE) {
                        target.custodian = null;
                    }
                }
            }
            {
                Boolean coordinateSystemShouldBeMergedAndSet = strategy.shouldBeMergedAndSet(leftLocator, rightLocator, leftObject.isSetCoordinateSystem(), rightObject.isSetCoordinateSystem());
                if (coordinateSystemShouldBeMergedAndSet == Boolean.TRUE) {
                    String lhsCoordinateSystem;
                    lhsCoordinateSystem = leftObject.getCoordinateSystem();
                    String rhsCoordinateSystem;
                    rhsCoordinateSystem = rightObject.getCoordinateSystem();
                    String mergedCoordinateSystem = ((String) strategy.merge(LocatorUtils.property(leftLocator, "coordinateSystem", lhsCoordinateSystem), LocatorUtils.property(rightLocator, "coordinateSystem", rhsCoordinateSystem), lhsCoordinateSystem, rhsCoordinateSystem, leftObject.isSetCoordinateSystem(), rightObject.isSetCoordinateSystem()));
                    target.setCoordinateSystem(mergedCoordinateSystem);
                } else {
                    if (coordinateSystemShouldBeMergedAndSet == Boolean.FALSE) {
                        target.coordinateSystem = null;
                    }
                }
            }
            {
                Boolean locationTypeShouldBeMergedAndSet = strategy.shouldBeMergedAndSet(leftLocator, rightLocator, leftObject.isSetLocationType(), rightObject.isSetLocationType());
                if (locationTypeShouldBeMergedAndSet == Boolean.TRUE) {
                    List<ReferenceType> lhsLocationType;
                    lhsLocationType = (leftObject.isSetLocationType()?leftObject.getLocationType():null);
                    List<ReferenceType> rhsLocationType;
                    rhsLocationType = (rightObject.isSetLocationType()?rightObject.getLocationType():null);
                    List<ReferenceType> mergedLocationType = ((List<ReferenceType> ) strategy.merge(LocatorUtils.property(leftLocator, "locationType", lhsLocationType), LocatorUtils.property(rightLocator, "locationType", rhsLocationType), lhsLocationType, rhsLocationType, leftObject.isSetLocationType(), rightObject.isSetLocationType()));
                    target.unsetLocationType();
                    if (mergedLocationType!= null) {
                        List<ReferenceType> uniqueLocationTypel = target.getLocationType();
                        uniqueLocationTypel.addAll(mergedLocationType);
                    }
                } else {
                    if (locationTypeShouldBeMergedAndSet == Boolean.FALSE) {
                        target.unsetLocationType();
                    }
                }
            }
        }
    }

    public void setLocationType(List<ReferenceType> value) {
        this.locationType = null;
        if (value!= null) {
            List<ReferenceType> draftl = this.getLocationType();
            draftl.addAll(value);
        }
    }

}
