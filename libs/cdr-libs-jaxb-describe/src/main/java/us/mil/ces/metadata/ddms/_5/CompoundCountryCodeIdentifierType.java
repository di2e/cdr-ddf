//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.11 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2016.07.27 at 04:06:37 PM EDT 
//


package us.mil.ces.metadata.ddms._5;

import java.io.Serializable;
import javax.validation.constraints.NotNull;
import javax.validation.constraints.Size;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlAttribute;
import javax.xml.bind.annotation.XmlType;
import javax.xml.bind.annotation.adapters.CollapsedStringAdapter;
import javax.xml.bind.annotation.adapters.XmlJavaTypeAdapter;
import org.jvnet.jaxb2_commons.lang.CopyStrategy2;
import org.jvnet.jaxb2_commons.lang.CopyTo2;
import org.jvnet.jaxb2_commons.lang.Equals2;
import org.jvnet.jaxb2_commons.lang.EqualsStrategy2;
import org.jvnet.jaxb2_commons.lang.HashCode2;
import org.jvnet.jaxb2_commons.lang.HashCodeStrategy2;
import org.jvnet.jaxb2_commons.lang.JAXBCopyStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBEqualsStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBHashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBMergeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBToStringStrategy;
import org.jvnet.jaxb2_commons.lang.MergeFrom2;
import org.jvnet.jaxb2_commons.lang.MergeStrategy2;
import org.jvnet.jaxb2_commons.lang.ToString2;
import org.jvnet.jaxb2_commons.lang.ToStringStrategy2;
import org.jvnet.jaxb2_commons.locator.ObjectLocator;
import org.jvnet.jaxb2_commons.locator.util.LocatorUtils;


/**
 * The codespace attribute holds the codespace identifying the standard being used.  The code attribute holds the two-alpha, three-alpha, or numeric code identifying the country.
 * 			
 * 
 * <p>Java class for CompoundCountryCodeIdentifierType complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="CompoundCountryCodeIdentifierType"&gt;
 *   &lt;complexContent&gt;
 *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
 *       &lt;attribute name="codespace" use="required" type="{urn:us:mil:ces:metadata:ddms:5}simpleTokenType" /&gt;
 *       &lt;attribute name="code" use="required" type="{urn:us:mil:ces:metadata:ddms:5}simpleTokenType" /&gt;
 *     &lt;/restriction&gt;
 *   &lt;/complexContent&gt;
 * &lt;/complexType&gt;
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "CompoundCountryCodeIdentifierType")
public class CompoundCountryCodeIdentifierType implements Serializable, Cloneable, CopyTo2, Equals2, HashCode2, MergeFrom2, ToString2
{

    private final static long serialVersionUID = 1L;
    @XmlAttribute(name = "codespace", namespace = "urn:us:mil:ces:metadata:ddms:5", required = true)
    @XmlJavaTypeAdapter(CollapsedStringAdapter.class)
    @NotNull(message = "CompoundCountryCodeIdentifierType.codespace {javax.validation.constraints.NotNull.message}")
    @Size(min = 1)
    protected String codespace;
    @XmlAttribute(name = "code", namespace = "urn:us:mil:ces:metadata:ddms:5", required = true)
    @XmlJavaTypeAdapter(CollapsedStringAdapter.class)
    @NotNull(message = "CompoundCountryCodeIdentifierType.code {javax.validation.constraints.NotNull.message}")
    @Size(min = 1)
    protected String code;

    /**
     * Gets the value of the codespace property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getCodespace() {
        return codespace;
    }

    /**
     * Sets the value of the codespace property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setCodespace(String value) {
        this.codespace = value;
    }

    public boolean isSetCodespace() {
        return (this.codespace!= null);
    }

    /**
     * Gets the value of the code property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getCode() {
        return code;
    }

    /**
     * Sets the value of the code property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setCode(String value) {
        this.code = value;
    }

    public boolean isSetCode() {
        return (this.code!= null);
    }

    public String toString() {
        final ToStringStrategy2 strategy = JAXBToStringStrategy.INSTANCE;
        final StringBuilder buffer = new StringBuilder();
        append(null, buffer, strategy);
        return buffer.toString();
    }

    public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy2 strategy) {
        strategy.appendStart(locator, this, buffer);
        appendFields(locator, buffer, strategy);
        strategy.appendEnd(locator, this, buffer);
        return buffer;
    }

    public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy2 strategy) {
        {
            String theCodespace;
            theCodespace = this.getCodespace();
            strategy.appendField(locator, this, "codespace", buffer, theCodespace, this.isSetCodespace());
        }
        {
            String theCode;
            theCode = this.getCode();
            strategy.appendField(locator, this, "code", buffer, theCode, this.isSetCode());
        }
        return buffer;
    }

    public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy2 strategy) {
        if ((object == null)||(this.getClass()!= object.getClass())) {
            return false;
        }
        if (this == object) {
            return true;
        }
        final CompoundCountryCodeIdentifierType that = ((CompoundCountryCodeIdentifierType) object);
        {
            String lhsCodespace;
            lhsCodespace = this.getCodespace();
            String rhsCodespace;
            rhsCodespace = that.getCodespace();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "codespace", lhsCodespace), LocatorUtils.property(thatLocator, "codespace", rhsCodespace), lhsCodespace, rhsCodespace, this.isSetCodespace(), that.isSetCodespace())) {
                return false;
            }
        }
        {
            String lhsCode;
            lhsCode = this.getCode();
            String rhsCode;
            rhsCode = that.getCode();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "code", lhsCode), LocatorUtils.property(thatLocator, "code", rhsCode), lhsCode, rhsCode, this.isSetCode(), that.isSetCode())) {
                return false;
            }
        }
        return true;
    }

    public boolean equals(Object object) {
        final EqualsStrategy2 strategy = JAXBEqualsStrategy.INSTANCE;
        return equals(null, null, object, strategy);
    }

    public int hashCode(ObjectLocator locator, HashCodeStrategy2 strategy) {
        int currentHashCode = 1;
        {
            String theCodespace;
            theCodespace = this.getCodespace();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "codespace", theCodespace), currentHashCode, theCodespace, this.isSetCodespace());
        }
        {
            String theCode;
            theCode = this.getCode();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "code", theCode), currentHashCode, theCode, this.isSetCode());
        }
        return currentHashCode;
    }

    public int hashCode() {
        final HashCodeStrategy2 strategy = JAXBHashCodeStrategy.INSTANCE;
        return this.hashCode(null, strategy);
    }

    public Object clone() {
        return copyTo(createNewInstance());
    }

    public Object copyTo(Object target) {
        final CopyStrategy2 strategy = JAXBCopyStrategy.INSTANCE;
        return copyTo(null, target, strategy);
    }

    public Object copyTo(ObjectLocator locator, Object target, CopyStrategy2 strategy) {
        final Object draftCopy = ((target == null)?createNewInstance():target);
        if (draftCopy instanceof CompoundCountryCodeIdentifierType) {
            final CompoundCountryCodeIdentifierType copy = ((CompoundCountryCodeIdentifierType) draftCopy);
            {
                Boolean codespaceShouldBeCopiedAndSet = strategy.shouldBeCopiedAndSet(locator, this.isSetCodespace());
                if (codespaceShouldBeCopiedAndSet == Boolean.TRUE) {
                    String sourceCodespace;
                    sourceCodespace = this.getCodespace();
                    String copyCodespace = ((String) strategy.copy(LocatorUtils.property(locator, "codespace", sourceCodespace), sourceCodespace, this.isSetCodespace()));
                    copy.setCodespace(copyCodespace);
                } else {
                    if (codespaceShouldBeCopiedAndSet == Boolean.FALSE) {
                        copy.codespace = null;
                    }
                }
            }
            {
                Boolean codeShouldBeCopiedAndSet = strategy.shouldBeCopiedAndSet(locator, this.isSetCode());
                if (codeShouldBeCopiedAndSet == Boolean.TRUE) {
                    String sourceCode;
                    sourceCode = this.getCode();
                    String copyCode = ((String) strategy.copy(LocatorUtils.property(locator, "code", sourceCode), sourceCode, this.isSetCode()));
                    copy.setCode(copyCode);
                } else {
                    if (codeShouldBeCopiedAndSet == Boolean.FALSE) {
                        copy.code = null;
                    }
                }
            }
        }
        return draftCopy;
    }

    public Object createNewInstance() {
        return new CompoundCountryCodeIdentifierType();
    }

    public void mergeFrom(Object left, Object right) {
        final MergeStrategy2 strategy = JAXBMergeStrategy.INSTANCE;
        mergeFrom(null, null, left, right, strategy);
    }

    public void mergeFrom(ObjectLocator leftLocator, ObjectLocator rightLocator, Object left, Object right, MergeStrategy2 strategy) {
        if (right instanceof CompoundCountryCodeIdentifierType) {
            final CompoundCountryCodeIdentifierType target = this;
            final CompoundCountryCodeIdentifierType leftObject = ((CompoundCountryCodeIdentifierType) left);
            final CompoundCountryCodeIdentifierType rightObject = ((CompoundCountryCodeIdentifierType) right);
            {
                Boolean codespaceShouldBeMergedAndSet = strategy.shouldBeMergedAndSet(leftLocator, rightLocator, leftObject.isSetCodespace(), rightObject.isSetCodespace());
                if (codespaceShouldBeMergedAndSet == Boolean.TRUE) {
                    String lhsCodespace;
                    lhsCodespace = leftObject.getCodespace();
                    String rhsCodespace;
                    rhsCodespace = rightObject.getCodespace();
                    String mergedCodespace = ((String) strategy.merge(LocatorUtils.property(leftLocator, "codespace", lhsCodespace), LocatorUtils.property(rightLocator, "codespace", rhsCodespace), lhsCodespace, rhsCodespace, leftObject.isSetCodespace(), rightObject.isSetCodespace()));
                    target.setCodespace(mergedCodespace);
                } else {
                    if (codespaceShouldBeMergedAndSet == Boolean.FALSE) {
                        target.codespace = null;
                    }
                }
            }
            {
                Boolean codeShouldBeMergedAndSet = strategy.shouldBeMergedAndSet(leftLocator, rightLocator, leftObject.isSetCode(), rightObject.isSetCode());
                if (codeShouldBeMergedAndSet == Boolean.TRUE) {
                    String lhsCode;
                    lhsCode = leftObject.getCode();
                    String rhsCode;
                    rhsCode = rightObject.getCode();
                    String mergedCode = ((String) strategy.merge(LocatorUtils.property(leftLocator, "code", lhsCode), LocatorUtils.property(rightLocator, "code", rhsCode), lhsCode, rhsCode, leftObject.isSetCode(), rightObject.isSetCode()));
                    target.setCode(mergedCode);
                } else {
                    if (codeShouldBeMergedAndSet == Boolean.FALSE) {
                        target.code = null;
                    }
                }
            }
        }
    }

}
