//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.11 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2016.07.27 at 04:06:37 PM EDT 
//


package us.mil.ces.metadata.ddms._5;

import java.io.Serializable;
import javax.validation.Valid;
import javax.validation.constraints.NotNull;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlRootElement;
import javax.xml.bind.annotation.XmlType;
import org.jvnet.jaxb2_commons.lang.CopyStrategy2;
import org.jvnet.jaxb2_commons.lang.CopyTo2;
import org.jvnet.jaxb2_commons.lang.Equals2;
import org.jvnet.jaxb2_commons.lang.EqualsStrategy2;
import org.jvnet.jaxb2_commons.lang.HashCode2;
import org.jvnet.jaxb2_commons.lang.HashCodeStrategy2;
import org.jvnet.jaxb2_commons.lang.JAXBCopyStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBEqualsStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBHashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBMergeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBToStringStrategy;
import org.jvnet.jaxb2_commons.lang.MergeFrom2;
import org.jvnet.jaxb2_commons.lang.MergeStrategy2;
import org.jvnet.jaxb2_commons.lang.ToString2;
import org.jvnet.jaxb2_commons.lang.ToStringStrategy2;
import org.jvnet.jaxb2_commons.locator.ObjectLocator;
import org.jvnet.jaxb2_commons.locator.util.LocatorUtils;


/**
 * <p>Java class for anonymous complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType&gt;
 *   &lt;complexContent&gt;
 *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
 *       &lt;group ref="{urn:us:mil:ces:metadata:ddms:5}postalAddressGroup"/&gt;
 *     &lt;/restriction&gt;
 *   &lt;/complexContent&gt;
 * &lt;/complexType&gt;
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "", propOrder = {
    "abstractPhysicalAddress"
})
@XmlRootElement(name = "postalAddress")
public class PostalAddress implements Serializable, Cloneable, CopyTo2, Equals2, HashCode2, MergeFrom2, ToString2
{

    private final static long serialVersionUID = 1L;
    @XmlElement(name = "AbstractPhysicalAddress", namespace = "http://metadata.ces.mil/mdr/ns/GSIP/tspi/2.0", required = true)
    @NotNull(message = "PostalAddress.abstractPhysicalAddress {javax.validation.constraints.NotNull.message}")
    @Valid
    protected Object abstractPhysicalAddress;

    /**
     * Gets the value of the abstractPhysicalAddress property.
     * 
     * @return
     *     possible object is
     *     {@link Object }
     *     
     */
    public Object getAbstractPhysicalAddress() {
        return abstractPhysicalAddress;
    }

    /**
     * Sets the value of the abstractPhysicalAddress property.
     * 
     * @param value
     *     allowed object is
     *     {@link Object }
     *     
     */
    public void setAbstractPhysicalAddress(Object value) {
        this.abstractPhysicalAddress = value;
    }

    public boolean isSetAbstractPhysicalAddress() {
        return (this.abstractPhysicalAddress!= null);
    }

    public String toString() {
        final ToStringStrategy2 strategy = JAXBToStringStrategy.INSTANCE;
        final StringBuilder buffer = new StringBuilder();
        append(null, buffer, strategy);
        return buffer.toString();
    }

    public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy2 strategy) {
        strategy.appendStart(locator, this, buffer);
        appendFields(locator, buffer, strategy);
        strategy.appendEnd(locator, this, buffer);
        return buffer;
    }

    public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy2 strategy) {
        {
            Object theAbstractPhysicalAddress;
            theAbstractPhysicalAddress = this.getAbstractPhysicalAddress();
            strategy.appendField(locator, this, "abstractPhysicalAddress", buffer, theAbstractPhysicalAddress, this.isSetAbstractPhysicalAddress());
        }
        return buffer;
    }

    public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy2 strategy) {
        if ((object == null)||(this.getClass()!= object.getClass())) {
            return false;
        }
        if (this == object) {
            return true;
        }
        final PostalAddress that = ((PostalAddress) object);
        {
            Object lhsAbstractPhysicalAddress;
            lhsAbstractPhysicalAddress = this.getAbstractPhysicalAddress();
            Object rhsAbstractPhysicalAddress;
            rhsAbstractPhysicalAddress = that.getAbstractPhysicalAddress();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "abstractPhysicalAddress", lhsAbstractPhysicalAddress), LocatorUtils.property(thatLocator, "abstractPhysicalAddress", rhsAbstractPhysicalAddress), lhsAbstractPhysicalAddress, rhsAbstractPhysicalAddress, this.isSetAbstractPhysicalAddress(), that.isSetAbstractPhysicalAddress())) {
                return false;
            }
        }
        return true;
    }

    public boolean equals(Object object) {
        final EqualsStrategy2 strategy = JAXBEqualsStrategy.INSTANCE;
        return equals(null, null, object, strategy);
    }

    public int hashCode(ObjectLocator locator, HashCodeStrategy2 strategy) {
        int currentHashCode = 1;
        {
            Object theAbstractPhysicalAddress;
            theAbstractPhysicalAddress = this.getAbstractPhysicalAddress();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "abstractPhysicalAddress", theAbstractPhysicalAddress), currentHashCode, theAbstractPhysicalAddress, this.isSetAbstractPhysicalAddress());
        }
        return currentHashCode;
    }

    public int hashCode() {
        final HashCodeStrategy2 strategy = JAXBHashCodeStrategy.INSTANCE;
        return this.hashCode(null, strategy);
    }

    public Object clone() {
        return copyTo(createNewInstance());
    }

    public Object copyTo(Object target) {
        final CopyStrategy2 strategy = JAXBCopyStrategy.INSTANCE;
        return copyTo(null, target, strategy);
    }

    public Object copyTo(ObjectLocator locator, Object target, CopyStrategy2 strategy) {
        final Object draftCopy = ((target == null)?createNewInstance():target);
        if (draftCopy instanceof PostalAddress) {
            final PostalAddress copy = ((PostalAddress) draftCopy);
            {
                Boolean abstractPhysicalAddressShouldBeCopiedAndSet = strategy.shouldBeCopiedAndSet(locator, this.isSetAbstractPhysicalAddress());
                if (abstractPhysicalAddressShouldBeCopiedAndSet == Boolean.TRUE) {
                    Object sourceAbstractPhysicalAddress;
                    sourceAbstractPhysicalAddress = this.getAbstractPhysicalAddress();
                    Object copyAbstractPhysicalAddress = ((Object) strategy.copy(LocatorUtils.property(locator, "abstractPhysicalAddress", sourceAbstractPhysicalAddress), sourceAbstractPhysicalAddress, this.isSetAbstractPhysicalAddress()));
                    copy.setAbstractPhysicalAddress(copyAbstractPhysicalAddress);
                } else {
                    if (abstractPhysicalAddressShouldBeCopiedAndSet == Boolean.FALSE) {
                        copy.abstractPhysicalAddress = null;
                    }
                }
            }
        }
        return draftCopy;
    }

    public Object createNewInstance() {
        return new PostalAddress();
    }

    public void mergeFrom(Object left, Object right) {
        final MergeStrategy2 strategy = JAXBMergeStrategy.INSTANCE;
        mergeFrom(null, null, left, right, strategy);
    }

    public void mergeFrom(ObjectLocator leftLocator, ObjectLocator rightLocator, Object left, Object right, MergeStrategy2 strategy) {
        if (right instanceof PostalAddress) {
            final PostalAddress target = this;
            final PostalAddress leftObject = ((PostalAddress) left);
            final PostalAddress rightObject = ((PostalAddress) right);
            {
                Boolean abstractPhysicalAddressShouldBeMergedAndSet = strategy.shouldBeMergedAndSet(leftLocator, rightLocator, leftObject.isSetAbstractPhysicalAddress(), rightObject.isSetAbstractPhysicalAddress());
                if (abstractPhysicalAddressShouldBeMergedAndSet == Boolean.TRUE) {
                    Object lhsAbstractPhysicalAddress;
                    lhsAbstractPhysicalAddress = leftObject.getAbstractPhysicalAddress();
                    Object rhsAbstractPhysicalAddress;
                    rhsAbstractPhysicalAddress = rightObject.getAbstractPhysicalAddress();
                    Object mergedAbstractPhysicalAddress = ((Object) strategy.merge(LocatorUtils.property(leftLocator, "abstractPhysicalAddress", lhsAbstractPhysicalAddress), LocatorUtils.property(rightLocator, "abstractPhysicalAddress", rhsAbstractPhysicalAddress), lhsAbstractPhysicalAddress, rhsAbstractPhysicalAddress, leftObject.isSetAbstractPhysicalAddress(), rightObject.isSetAbstractPhysicalAddress()));
                    target.setAbstractPhysicalAddress(mergedAbstractPhysicalAddress);
                } else {
                    if (abstractPhysicalAddressShouldBeMergedAndSet == Boolean.FALSE) {
                        target.abstractPhysicalAddress = null;
                    }
                }
            }
        }
    }

}
