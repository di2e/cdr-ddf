//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.11 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2016.07.27 at 04:06:37 PM EDT 
//


package us.gov.ic.ism;

import java.io.Serializable;
import java.util.ArrayList;
import java.util.List;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlAttribute;
import javax.xml.bind.annotation.XmlRootElement;
import javax.xml.bind.annotation.XmlType;
import org.jvnet.jaxb2_commons.lang.CopyStrategy2;
import org.jvnet.jaxb2_commons.lang.CopyTo2;
import org.jvnet.jaxb2_commons.lang.Equals2;
import org.jvnet.jaxb2_commons.lang.EqualsStrategy2;
import org.jvnet.jaxb2_commons.lang.HashCode2;
import org.jvnet.jaxb2_commons.lang.HashCodeStrategy2;
import org.jvnet.jaxb2_commons.lang.JAXBCopyStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBEqualsStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBHashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBMergeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBToStringStrategy;
import org.jvnet.jaxb2_commons.lang.MergeFrom2;
import org.jvnet.jaxb2_commons.lang.MergeStrategy2;
import org.jvnet.jaxb2_commons.lang.ToString2;
import org.jvnet.jaxb2_commons.lang.ToStringStrategy2;
import org.jvnet.jaxb2_commons.locator.ObjectLocator;
import org.jvnet.jaxb2_commons.locator.util.LocatorUtils;
import us.gov.ic.cvenum.ism.poctype.CVEnumISMPocTypeValues;


/**
 * <p>Java class for anonymous complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType&gt;
 *   &lt;simpleContent&gt;
 *     &lt;extension base="&lt;urn:us:gov:ic:ism&gt;LongStringWithSecurityType"&gt;
 *       &lt;attGroup ref="{urn:us:gov:ic:ism}POCAttributeGroup"/&gt;
 *     &lt;/extension&gt;
 *   &lt;/simpleContent&gt;
 * &lt;/complexType&gt;
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "")
@XmlRootElement(name = "NoticeText")
public class NoticeText
    extends LongStringWithSecurityType
    implements Serializable, Cloneable, CopyTo2, Equals2, HashCode2, MergeFrom2, ToString2
{

    private final static long serialVersionUID = 1L;
    @XmlAttribute(name = "pocType", namespace = "urn:us:gov:ic:ism")
    protected List<CVEnumISMPocTypeValues> pocType;

    /**
     * Gets the value of the pocType property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the pocType property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getPocType().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link CVEnumISMPocTypeValues }
     * 
     * 
     */
    public List<CVEnumISMPocTypeValues> getPocType() {
        if (pocType == null) {
            pocType = new ArrayList<CVEnumISMPocTypeValues>();
        }
        return this.pocType;
    }

    public boolean isSetPocType() {
        return ((this.pocType!= null)&&(!this.pocType.isEmpty()));
    }

    public void unsetPocType() {
        this.pocType = null;
    }

    public String toString() {
        final ToStringStrategy2 strategy = JAXBToStringStrategy.INSTANCE;
        final StringBuilder buffer = new StringBuilder();
        append(null, buffer, strategy);
        return buffer.toString();
    }

    public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy2 strategy) {
        strategy.appendStart(locator, this, buffer);
        appendFields(locator, buffer, strategy);
        strategy.appendEnd(locator, this, buffer);
        return buffer;
    }

    public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy2 strategy) {
        super.appendFields(locator, buffer, strategy);
        {
            List<CVEnumISMPocTypeValues> thePocType;
            thePocType = (this.isSetPocType()?this.getPocType():null);
            strategy.appendField(locator, this, "pocType", buffer, thePocType, this.isSetPocType());
        }
        return buffer;
    }

    public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy2 strategy) {
        if ((object == null)||(this.getClass()!= object.getClass())) {
            return false;
        }
        if (this == object) {
            return true;
        }
        if (!super.equals(thisLocator, thatLocator, object, strategy)) {
            return false;
        }
        final NoticeText that = ((NoticeText) object);
        {
            List<CVEnumISMPocTypeValues> lhsPocType;
            lhsPocType = (this.isSetPocType()?this.getPocType():null);
            List<CVEnumISMPocTypeValues> rhsPocType;
            rhsPocType = (that.isSetPocType()?that.getPocType():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "pocType", lhsPocType), LocatorUtils.property(thatLocator, "pocType", rhsPocType), lhsPocType, rhsPocType, this.isSetPocType(), that.isSetPocType())) {
                return false;
            }
        }
        return true;
    }

    public boolean equals(Object object) {
        final EqualsStrategy2 strategy = JAXBEqualsStrategy.INSTANCE;
        return equals(null, null, object, strategy);
    }

    public int hashCode(ObjectLocator locator, HashCodeStrategy2 strategy) {
        int currentHashCode = super.hashCode(locator, strategy);
        {
            List<CVEnumISMPocTypeValues> thePocType;
            thePocType = (this.isSetPocType()?this.getPocType():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "pocType", thePocType), currentHashCode, thePocType, this.isSetPocType());
        }
        return currentHashCode;
    }

    public int hashCode() {
        final HashCodeStrategy2 strategy = JAXBHashCodeStrategy.INSTANCE;
        return this.hashCode(null, strategy);
    }

    public Object clone() {
        return copyTo(createNewInstance());
    }

    public Object copyTo(Object target) {
        final CopyStrategy2 strategy = JAXBCopyStrategy.INSTANCE;
        return copyTo(null, target, strategy);
    }

    public Object copyTo(ObjectLocator locator, Object target, CopyStrategy2 strategy) {
        final Object draftCopy = ((target == null)?createNewInstance():target);
        super.copyTo(locator, draftCopy, strategy);
        if (draftCopy instanceof NoticeText) {
            final NoticeText copy = ((NoticeText) draftCopy);
            {
                Boolean pocTypeShouldBeCopiedAndSet = strategy.shouldBeCopiedAndSet(locator, this.isSetPocType());
                if (pocTypeShouldBeCopiedAndSet == Boolean.TRUE) {
                    List<CVEnumISMPocTypeValues> sourcePocType;
                    sourcePocType = (this.isSetPocType()?this.getPocType():null);
                    @SuppressWarnings("unchecked")
                    List<CVEnumISMPocTypeValues> copyPocType = ((List<CVEnumISMPocTypeValues> ) strategy.copy(LocatorUtils.property(locator, "pocType", sourcePocType), sourcePocType, this.isSetPocType()));
                    copy.unsetPocType();
                    if (copyPocType!= null) {
                        List<CVEnumISMPocTypeValues> uniquePocTypel = copy.getPocType();
                        uniquePocTypel.addAll(copyPocType);
                    }
                } else {
                    if (pocTypeShouldBeCopiedAndSet == Boolean.FALSE) {
                        copy.unsetPocType();
                    }
                }
            }
        }
        return draftCopy;
    }

    public Object createNewInstance() {
        return new NoticeText();
    }

    public void mergeFrom(Object left, Object right) {
        final MergeStrategy2 strategy = JAXBMergeStrategy.INSTANCE;
        mergeFrom(null, null, left, right, strategy);
    }

    public void mergeFrom(ObjectLocator leftLocator, ObjectLocator rightLocator, Object left, Object right, MergeStrategy2 strategy) {
        super.mergeFrom(leftLocator, rightLocator, left, right, strategy);
        if (right instanceof NoticeText) {
            final NoticeText target = this;
            final NoticeText leftObject = ((NoticeText) left);
            final NoticeText rightObject = ((NoticeText) right);
            {
                Boolean pocTypeShouldBeMergedAndSet = strategy.shouldBeMergedAndSet(leftLocator, rightLocator, leftObject.isSetPocType(), rightObject.isSetPocType());
                if (pocTypeShouldBeMergedAndSet == Boolean.TRUE) {
                    List<CVEnumISMPocTypeValues> lhsPocType;
                    lhsPocType = (leftObject.isSetPocType()?leftObject.getPocType():null);
                    List<CVEnumISMPocTypeValues> rhsPocType;
                    rhsPocType = (rightObject.isSetPocType()?rightObject.getPocType():null);
                    List<CVEnumISMPocTypeValues> mergedPocType = ((List<CVEnumISMPocTypeValues> ) strategy.merge(LocatorUtils.property(leftLocator, "pocType", lhsPocType), LocatorUtils.property(rightLocator, "pocType", rhsPocType), lhsPocType, rhsPocType, leftObject.isSetPocType(), rightObject.isSetPocType()));
                    target.unsetPocType();
                    if (mergedPocType!= null) {
                        List<CVEnumISMPocTypeValues> uniquePocTypel = target.getPocType();
                        uniquePocTypel.addAll(mergedPocType);
                    }
                } else {
                    if (pocTypeShouldBeMergedAndSet == Boolean.FALSE) {
                        target.unsetPocType();
                    }
                }
            }
        }
    }

    public void setPocType(List<CVEnumISMPocTypeValues> value) {
        this.pocType = null;
        if (value!= null) {
            List<CVEnumISMPocTypeValues> draftl = this.getPocType();
            draftl.addAll(value);
        }
    }

}
