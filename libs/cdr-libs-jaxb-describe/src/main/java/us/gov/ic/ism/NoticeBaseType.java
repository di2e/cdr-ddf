//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.11 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2016.07.27 at 04:06:37 PM EDT 
//


package us.gov.ic.ism;

import java.io.Serializable;
import java.util.ArrayList;
import java.util.List;
import javax.validation.Valid;
import javax.validation.constraints.NotNull;
import javax.validation.constraints.Size;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlSeeAlso;
import javax.xml.bind.annotation.XmlType;
import org.jvnet.jaxb2_commons.lang.CopyStrategy2;
import org.jvnet.jaxb2_commons.lang.CopyTo2;
import org.jvnet.jaxb2_commons.lang.Equals2;
import org.jvnet.jaxb2_commons.lang.EqualsStrategy2;
import org.jvnet.jaxb2_commons.lang.HashCode2;
import org.jvnet.jaxb2_commons.lang.HashCodeStrategy2;
import org.jvnet.jaxb2_commons.lang.JAXBCopyStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBEqualsStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBHashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBMergeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBToStringStrategy;
import org.jvnet.jaxb2_commons.lang.MergeFrom2;
import org.jvnet.jaxb2_commons.lang.MergeStrategy2;
import org.jvnet.jaxb2_commons.lang.ToString2;
import org.jvnet.jaxb2_commons.lang.ToStringStrategy2;
import org.jvnet.jaxb2_commons.locator.ObjectLocator;
import org.jvnet.jaxb2_commons.locator.util.LocatorUtils;


/**
 * 
 * <pre>
 * &lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;xhtml:p xmlns:xhtml="http://www.w3.org/1999/xhtml" xmlns="urn:us:gov:ic:ism" xmlns:ism="urn:us:gov:ic:ism" xmlns:ism25x="urn:us:gov:ic:cvenum:ism:25x" xmlns:ismatomic="urn:us:gov:ic:cvenum:ism:atomicEnergyMarkings" xmlns:ismcat="urn:us:gov:ic:ismcat" xmlns:ismcatfgio="urn:us:gov:ic:cvenum:ismcat:fgiopen" xmlns:ismcatfgip="urn:us:gov:ic:cvenum:ismcat:fgiprotected" xmlns:ismcatownpro="urn:us:gov:ic:cvenum:ismcat:ownerproducer" xmlns:ismcatrelto="urn:us:gov:ic:cvenum:ismcat:relto" xmlns:ismclassall="urn:us:gov:ic:cvenum:ism:classification:all" xmlns:ismcomplies="urn:us:gov:ic:cvenum:ism:complieswith" xmlns:ismdissem="urn:us:gov:ic:cvenum:ism:dissem" xmlns:ismexempt="urn:us:gov:ic:cvenum:ism:exemptfrom" xmlns:ismnonic="urn:us:gov:ic:cvenum:ism:nonic" xmlns:ismnonus="urn:us:gov:ic:cvenum:ism:nonuscontrols" xmlns:ismnotice="urn:us:gov:ic:cvenum:ism:notice" xmlns:ismpoctyp="urn:us:gov:ic:cvenum:ism:pocType" xmlns:ismsar="urn:us:gov:ic:cvenum:ism:sar" xmlns:ismscicon="urn:us:gov:ic:cvenum:ism:scicontrols" xmlns:xsd="http://www.w3.org/2001/XMLSchema" ism:classification="U" ism:ownerProducer="USA"&gt;Base type for Notices. Does
 * 					not include any attributes.&lt;/xhtml:p&gt;
 * </pre>
 * 
 * 
 * <p>Java class for NoticeBaseType complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="NoticeBaseType"&gt;
 *   &lt;complexContent&gt;
 *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
 *       &lt;sequence&gt;
 *         &lt;element ref="{urn:us:gov:ic:ism}NoticeText" maxOccurs="unbounded"/&gt;
 *       &lt;/sequence&gt;
 *     &lt;/restriction&gt;
 *   &lt;/complexContent&gt;
 * &lt;/complexType&gt;
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "NoticeBaseType", propOrder = {
    "noticeText"
})
@XmlSeeAlso({
    NoticeType.class,
    NoticeExternalType.class
})
public class NoticeBaseType implements Serializable, Cloneable, CopyTo2, Equals2, HashCode2, MergeFrom2, ToString2
{

    private final static long serialVersionUID = 1L;
    @XmlElement(name = "NoticeText", required = true)
    @NotNull(message = "NoticeBaseType.noticeText {javax.validation.constraints.NotNull.message}")
    @Size(min = 1)
    @Valid
    protected List<NoticeText> noticeText;

    /**
     * Gets the value of the noticeText property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the noticeText property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getNoticeText().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link NoticeText }
     * 
     * 
     */
    public List<NoticeText> getNoticeText() {
        if (noticeText == null) {
            noticeText = new ArrayList<NoticeText>();
        }
        return this.noticeText;
    }

    public boolean isSetNoticeText() {
        return ((this.noticeText!= null)&&(!this.noticeText.isEmpty()));
    }

    public void unsetNoticeText() {
        this.noticeText = null;
    }

    public String toString() {
        final ToStringStrategy2 strategy = JAXBToStringStrategy.INSTANCE;
        final StringBuilder buffer = new StringBuilder();
        append(null, buffer, strategy);
        return buffer.toString();
    }

    public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy2 strategy) {
        strategy.appendStart(locator, this, buffer);
        appendFields(locator, buffer, strategy);
        strategy.appendEnd(locator, this, buffer);
        return buffer;
    }

    public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy2 strategy) {
        {
            List<NoticeText> theNoticeText;
            theNoticeText = (this.isSetNoticeText()?this.getNoticeText():null);
            strategy.appendField(locator, this, "noticeText", buffer, theNoticeText, this.isSetNoticeText());
        }
        return buffer;
    }

    public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy2 strategy) {
        if ((object == null)||(this.getClass()!= object.getClass())) {
            return false;
        }
        if (this == object) {
            return true;
        }
        final NoticeBaseType that = ((NoticeBaseType) object);
        {
            List<NoticeText> lhsNoticeText;
            lhsNoticeText = (this.isSetNoticeText()?this.getNoticeText():null);
            List<NoticeText> rhsNoticeText;
            rhsNoticeText = (that.isSetNoticeText()?that.getNoticeText():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "noticeText", lhsNoticeText), LocatorUtils.property(thatLocator, "noticeText", rhsNoticeText), lhsNoticeText, rhsNoticeText, this.isSetNoticeText(), that.isSetNoticeText())) {
                return false;
            }
        }
        return true;
    }

    public boolean equals(Object object) {
        final EqualsStrategy2 strategy = JAXBEqualsStrategy.INSTANCE;
        return equals(null, null, object, strategy);
    }

    public int hashCode(ObjectLocator locator, HashCodeStrategy2 strategy) {
        int currentHashCode = 1;
        {
            List<NoticeText> theNoticeText;
            theNoticeText = (this.isSetNoticeText()?this.getNoticeText():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "noticeText", theNoticeText), currentHashCode, theNoticeText, this.isSetNoticeText());
        }
        return currentHashCode;
    }

    public int hashCode() {
        final HashCodeStrategy2 strategy = JAXBHashCodeStrategy.INSTANCE;
        return this.hashCode(null, strategy);
    }

    public Object clone() {
        return copyTo(createNewInstance());
    }

    public Object copyTo(Object target) {
        final CopyStrategy2 strategy = JAXBCopyStrategy.INSTANCE;
        return copyTo(null, target, strategy);
    }

    public Object copyTo(ObjectLocator locator, Object target, CopyStrategy2 strategy) {
        final Object draftCopy = ((target == null)?createNewInstance():target);
        if (draftCopy instanceof NoticeBaseType) {
            final NoticeBaseType copy = ((NoticeBaseType) draftCopy);
            {
                Boolean noticeTextShouldBeCopiedAndSet = strategy.shouldBeCopiedAndSet(locator, this.isSetNoticeText());
                if (noticeTextShouldBeCopiedAndSet == Boolean.TRUE) {
                    List<NoticeText> sourceNoticeText;
                    sourceNoticeText = (this.isSetNoticeText()?this.getNoticeText():null);
                    @SuppressWarnings("unchecked")
                    List<NoticeText> copyNoticeText = ((List<NoticeText> ) strategy.copy(LocatorUtils.property(locator, "noticeText", sourceNoticeText), sourceNoticeText, this.isSetNoticeText()));
                    copy.unsetNoticeText();
                    if (copyNoticeText!= null) {
                        List<NoticeText> uniqueNoticeTextl = copy.getNoticeText();
                        uniqueNoticeTextl.addAll(copyNoticeText);
                    }
                } else {
                    if (noticeTextShouldBeCopiedAndSet == Boolean.FALSE) {
                        copy.unsetNoticeText();
                    }
                }
            }
        }
        return draftCopy;
    }

    public Object createNewInstance() {
        return new NoticeBaseType();
    }

    public void mergeFrom(Object left, Object right) {
        final MergeStrategy2 strategy = JAXBMergeStrategy.INSTANCE;
        mergeFrom(null, null, left, right, strategy);
    }

    public void mergeFrom(ObjectLocator leftLocator, ObjectLocator rightLocator, Object left, Object right, MergeStrategy2 strategy) {
        if (right instanceof NoticeBaseType) {
            final NoticeBaseType target = this;
            final NoticeBaseType leftObject = ((NoticeBaseType) left);
            final NoticeBaseType rightObject = ((NoticeBaseType) right);
            {
                Boolean noticeTextShouldBeMergedAndSet = strategy.shouldBeMergedAndSet(leftLocator, rightLocator, leftObject.isSetNoticeText(), rightObject.isSetNoticeText());
                if (noticeTextShouldBeMergedAndSet == Boolean.TRUE) {
                    List<NoticeText> lhsNoticeText;
                    lhsNoticeText = (leftObject.isSetNoticeText()?leftObject.getNoticeText():null);
                    List<NoticeText> rhsNoticeText;
                    rhsNoticeText = (rightObject.isSetNoticeText()?rightObject.getNoticeText():null);
                    List<NoticeText> mergedNoticeText = ((List<NoticeText> ) strategy.merge(LocatorUtils.property(leftLocator, "noticeText", lhsNoticeText), LocatorUtils.property(rightLocator, "noticeText", rhsNoticeText), lhsNoticeText, rhsNoticeText, leftObject.isSetNoticeText(), rightObject.isSetNoticeText()));
                    target.unsetNoticeText();
                    if (mergedNoticeText!= null) {
                        List<NoticeText> uniqueNoticeTextl = target.getNoticeText();
                        uniqueNoticeTextl.addAll(mergedNoticeText);
                    }
                } else {
                    if (noticeTextShouldBeMergedAndSet == Boolean.FALSE) {
                        target.unsetNoticeText();
                    }
                }
            }
        }
    }

    public void setNoticeText(List<NoticeText> value) {
        this.noticeText = null;
        if (value!= null) {
            List<NoticeText> draftl = this.getNoticeText();
            draftl.addAll(value);
        }
    }

}
