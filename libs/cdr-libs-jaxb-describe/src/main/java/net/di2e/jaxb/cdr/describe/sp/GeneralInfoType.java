//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.11 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2016.07.27 at 04:06:37 PM EDT 
//


package net.di2e.jaxb.cdr.describe.sp;

import java.io.Serializable;
import java.util.ArrayList;
import java.util.List;
import javax.validation.Valid;
import javax.validation.constraints.NotNull;
import javax.validation.constraints.Size;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlList;
import javax.xml.bind.annotation.XmlSchemaType;
import javax.xml.bind.annotation.XmlType;
import org.jvnet.jaxb2_commons.lang.CopyStrategy2;
import org.jvnet.jaxb2_commons.lang.CopyTo2;
import org.jvnet.jaxb2_commons.lang.Equals2;
import org.jvnet.jaxb2_commons.lang.EqualsStrategy2;
import org.jvnet.jaxb2_commons.lang.HashCode2;
import org.jvnet.jaxb2_commons.lang.HashCodeStrategy2;
import org.jvnet.jaxb2_commons.lang.JAXBCopyStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBEqualsStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBHashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBMergeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBToStringStrategy;
import org.jvnet.jaxb2_commons.lang.MergeFrom2;
import org.jvnet.jaxb2_commons.lang.MergeStrategy2;
import org.jvnet.jaxb2_commons.lang.ToString2;
import org.jvnet.jaxb2_commons.lang.ToStringStrategy2;
import org.jvnet.jaxb2_commons.locator.ObjectLocator;
import org.jvnet.jaxb2_commons.locator.util.LocatorUtils;
import us.mil.ces.metadata.ddms._5.CompoundResourceIdentifierType;
import us.mil.ces.metadata.ddms._5.ContactInfoType;
import us.mil.ces.metadata.ddms._5.DescriptionType;
import us.mil.ces.metadata.ddms._5.RelatedResourcesType;


/**
 * <p>Java class for GeneralInfoType complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="GeneralInfoType"&gt;
 *   &lt;complexContent&gt;
 *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
 *       &lt;sequence&gt;
 *         &lt;element ref="{urn:us:mil:ces:metadata:ddms:5}identifier"/&gt;
 *         &lt;element name="name" type="{urn:cdr-ex:describe:sp:1.0}NameType"/&gt;
 *         &lt;element ref="{urn:us:mil:ces:metadata:ddms:5}description" minOccurs="0"/&gt;
 *         &lt;element ref="{urn:us:mil:ces:metadata:ddms:5}pointOfContact" maxOccurs="100"/&gt;
 *         &lt;element name="network" type="{urn:cdr-ex:describe:sp:1.0}NetworkValuesType" minOccurs="0"/&gt;
 *         &lt;element ref="{urn:us:mil:ces:metadata:ddms:5}relatedResource" maxOccurs="100" minOccurs="0"/&gt;
 *       &lt;/sequence&gt;
 *     &lt;/restriction&gt;
 *   &lt;/complexContent&gt;
 * &lt;/complexType&gt;
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "GeneralInfoType", propOrder = {
    "identifier",
    "name",
    "description",
    "pointOfContact",
    "network",
    "relatedResource"
})
public class GeneralInfoType implements Serializable, Cloneable, CopyTo2, Equals2, HashCode2, MergeFrom2, ToString2
{

    private final static long serialVersionUID = 1L;
    @XmlElement(namespace = "urn:us:mil:ces:metadata:ddms:5", required = true)
    @NotNull(message = "GeneralInfoType.identifier {javax.validation.constraints.NotNull.message}")
    @Valid
    protected CompoundResourceIdentifierType identifier;
    @XmlElement(required = true)
    @NotNull(message = "GeneralInfoType.name {javax.validation.constraints.NotNull.message}")
    @Valid
    protected NameType name;
    @XmlElement(namespace = "urn:us:mil:ces:metadata:ddms:5")
    @Valid
    protected DescriptionType description;
    @XmlElement(namespace = "urn:us:mil:ces:metadata:ddms:5", required = true)
    @NotNull(message = "GeneralInfoType.pointOfContact {javax.validation.constraints.NotNull.message}")
    @Size(min = 1, max = 100)
    @Valid
    protected List<ContactInfoType> pointOfContact;
    @XmlList
    @XmlSchemaType(name = "anySimpleType")
    protected List<String> network;
    @XmlElement(namespace = "urn:us:mil:ces:metadata:ddms:5")
    @Size(min = 0, max = 100)
    @Valid
    protected List<RelatedResourcesType> relatedResource;

    /**
     * Unique identifier for the service provider
     * 
     * @return
     *     possible object is
     *     {@link CompoundResourceIdentifierType }
     *     
     */
    public CompoundResourceIdentifierType getIdentifier() {
        return identifier;
    }

    /**
     * Sets the value of the identifier property.
     * 
     * @param value
     *     allowed object is
     *     {@link CompoundResourceIdentifierType }
     *     
     */
    public void setIdentifier(CompoundResourceIdentifierType value) {
        this.identifier = value;
    }

    public boolean isSetIdentifier() {
        return (this.identifier!= null);
    }

    /**
     * Gets the value of the name property.
     * 
     * @return
     *     possible object is
     *     {@link NameType }
     *     
     */
    public NameType getName() {
        return name;
    }

    /**
     * Sets the value of the name property.
     * 
     * @param value
     *     allowed object is
     *     {@link NameType }
     *     
     */
    public void setName(NameType value) {
        this.name = value;
    }

    public boolean isSetName() {
        return (this.name!= null);
    }

    /**
     * Description of the service Provider
     * 
     * @return
     *     possible object is
     *     {@link DescriptionType }
     *     
     */
    public DescriptionType getDescription() {
        return description;
    }

    /**
     * Sets the value of the description property.
     * 
     * @param value
     *     allowed object is
     *     {@link DescriptionType }
     *     
     */
    public void setDescription(DescriptionType value) {
        this.description = value;
    }

    public boolean isSetDescription() {
        return (this.description!= null);
    }

    /**
     * The points of contact for the service
     * 						provider Gets the value of the pointOfContact property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the pointOfContact property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getPointOfContact().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link ContactInfoType }
     * 
     * 
     */
    public List<ContactInfoType> getPointOfContact() {
        if (pointOfContact == null) {
            pointOfContact = new ArrayList<ContactInfoType>();
        }
        return this.pointOfContact;
    }

    public boolean isSetPointOfContact() {
        return ((this.pointOfContact!= null)&&(!this.pointOfContact.isEmpty()));
    }

    public void unsetPointOfContact() {
        this.pointOfContact = null;
    }

    /**
     * Gets the value of the network property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the network property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getNetwork().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link String }
     * 
     * 
     */
    public List<String> getNetwork() {
        if (network == null) {
            network = new ArrayList<String>();
        }
        return this.network;
    }

    public boolean isSetNetwork() {
        return ((this.network!= null)&&(!this.network.isEmpty()));
    }

    public void unsetNetwork() {
        this.network = null;
    }

    /**
     * The different related resources such as documentation,
     * 						user interfaces for the service provider, etc.Gets the value of the relatedResource property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the relatedResource property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getRelatedResource().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link RelatedResourcesType }
     * 
     * 
     */
    public List<RelatedResourcesType> getRelatedResource() {
        if (relatedResource == null) {
            relatedResource = new ArrayList<RelatedResourcesType>();
        }
        return this.relatedResource;
    }

    public boolean isSetRelatedResource() {
        return ((this.relatedResource!= null)&&(!this.relatedResource.isEmpty()));
    }

    public void unsetRelatedResource() {
        this.relatedResource = null;
    }

    public String toString() {
        final ToStringStrategy2 strategy = JAXBToStringStrategy.INSTANCE;
        final StringBuilder buffer = new StringBuilder();
        append(null, buffer, strategy);
        return buffer.toString();
    }

    public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy2 strategy) {
        strategy.appendStart(locator, this, buffer);
        appendFields(locator, buffer, strategy);
        strategy.appendEnd(locator, this, buffer);
        return buffer;
    }

    public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy2 strategy) {
        {
            CompoundResourceIdentifierType theIdentifier;
            theIdentifier = this.getIdentifier();
            strategy.appendField(locator, this, "identifier", buffer, theIdentifier, this.isSetIdentifier());
        }
        {
            NameType theName;
            theName = this.getName();
            strategy.appendField(locator, this, "name", buffer, theName, this.isSetName());
        }
        {
            DescriptionType theDescription;
            theDescription = this.getDescription();
            strategy.appendField(locator, this, "description", buffer, theDescription, this.isSetDescription());
        }
        {
            List<ContactInfoType> thePointOfContact;
            thePointOfContact = (this.isSetPointOfContact()?this.getPointOfContact():null);
            strategy.appendField(locator, this, "pointOfContact", buffer, thePointOfContact, this.isSetPointOfContact());
        }
        {
            List<String> theNetwork;
            theNetwork = (this.isSetNetwork()?this.getNetwork():null);
            strategy.appendField(locator, this, "network", buffer, theNetwork, this.isSetNetwork());
        }
        {
            List<RelatedResourcesType> theRelatedResource;
            theRelatedResource = (this.isSetRelatedResource()?this.getRelatedResource():null);
            strategy.appendField(locator, this, "relatedResource", buffer, theRelatedResource, this.isSetRelatedResource());
        }
        return buffer;
    }

    public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy2 strategy) {
        if ((object == null)||(this.getClass()!= object.getClass())) {
            return false;
        }
        if (this == object) {
            return true;
        }
        final GeneralInfoType that = ((GeneralInfoType) object);
        {
            CompoundResourceIdentifierType lhsIdentifier;
            lhsIdentifier = this.getIdentifier();
            CompoundResourceIdentifierType rhsIdentifier;
            rhsIdentifier = that.getIdentifier();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "identifier", lhsIdentifier), LocatorUtils.property(thatLocator, "identifier", rhsIdentifier), lhsIdentifier, rhsIdentifier, this.isSetIdentifier(), that.isSetIdentifier())) {
                return false;
            }
        }
        {
            NameType lhsName;
            lhsName = this.getName();
            NameType rhsName;
            rhsName = that.getName();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "name", lhsName), LocatorUtils.property(thatLocator, "name", rhsName), lhsName, rhsName, this.isSetName(), that.isSetName())) {
                return false;
            }
        }
        {
            DescriptionType lhsDescription;
            lhsDescription = this.getDescription();
            DescriptionType rhsDescription;
            rhsDescription = that.getDescription();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "description", lhsDescription), LocatorUtils.property(thatLocator, "description", rhsDescription), lhsDescription, rhsDescription, this.isSetDescription(), that.isSetDescription())) {
                return false;
            }
        }
        {
            List<ContactInfoType> lhsPointOfContact;
            lhsPointOfContact = (this.isSetPointOfContact()?this.getPointOfContact():null);
            List<ContactInfoType> rhsPointOfContact;
            rhsPointOfContact = (that.isSetPointOfContact()?that.getPointOfContact():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "pointOfContact", lhsPointOfContact), LocatorUtils.property(thatLocator, "pointOfContact", rhsPointOfContact), lhsPointOfContact, rhsPointOfContact, this.isSetPointOfContact(), that.isSetPointOfContact())) {
                return false;
            }
        }
        {
            List<String> lhsNetwork;
            lhsNetwork = (this.isSetNetwork()?this.getNetwork():null);
            List<String> rhsNetwork;
            rhsNetwork = (that.isSetNetwork()?that.getNetwork():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "network", lhsNetwork), LocatorUtils.property(thatLocator, "network", rhsNetwork), lhsNetwork, rhsNetwork, this.isSetNetwork(), that.isSetNetwork())) {
                return false;
            }
        }
        {
            List<RelatedResourcesType> lhsRelatedResource;
            lhsRelatedResource = (this.isSetRelatedResource()?this.getRelatedResource():null);
            List<RelatedResourcesType> rhsRelatedResource;
            rhsRelatedResource = (that.isSetRelatedResource()?that.getRelatedResource():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "relatedResource", lhsRelatedResource), LocatorUtils.property(thatLocator, "relatedResource", rhsRelatedResource), lhsRelatedResource, rhsRelatedResource, this.isSetRelatedResource(), that.isSetRelatedResource())) {
                return false;
            }
        }
        return true;
    }

    public boolean equals(Object object) {
        final EqualsStrategy2 strategy = JAXBEqualsStrategy.INSTANCE;
        return equals(null, null, object, strategy);
    }

    public int hashCode(ObjectLocator locator, HashCodeStrategy2 strategy) {
        int currentHashCode = 1;
        {
            CompoundResourceIdentifierType theIdentifier;
            theIdentifier = this.getIdentifier();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "identifier", theIdentifier), currentHashCode, theIdentifier, this.isSetIdentifier());
        }
        {
            NameType theName;
            theName = this.getName();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "name", theName), currentHashCode, theName, this.isSetName());
        }
        {
            DescriptionType theDescription;
            theDescription = this.getDescription();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "description", theDescription), currentHashCode, theDescription, this.isSetDescription());
        }
        {
            List<ContactInfoType> thePointOfContact;
            thePointOfContact = (this.isSetPointOfContact()?this.getPointOfContact():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "pointOfContact", thePointOfContact), currentHashCode, thePointOfContact, this.isSetPointOfContact());
        }
        {
            List<String> theNetwork;
            theNetwork = (this.isSetNetwork()?this.getNetwork():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "network", theNetwork), currentHashCode, theNetwork, this.isSetNetwork());
        }
        {
            List<RelatedResourcesType> theRelatedResource;
            theRelatedResource = (this.isSetRelatedResource()?this.getRelatedResource():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "relatedResource", theRelatedResource), currentHashCode, theRelatedResource, this.isSetRelatedResource());
        }
        return currentHashCode;
    }

    public int hashCode() {
        final HashCodeStrategy2 strategy = JAXBHashCodeStrategy.INSTANCE;
        return this.hashCode(null, strategy);
    }

    public Object clone() {
        return copyTo(createNewInstance());
    }

    public Object copyTo(Object target) {
        final CopyStrategy2 strategy = JAXBCopyStrategy.INSTANCE;
        return copyTo(null, target, strategy);
    }

    public Object copyTo(ObjectLocator locator, Object target, CopyStrategy2 strategy) {
        final Object draftCopy = ((target == null)?createNewInstance():target);
        if (draftCopy instanceof GeneralInfoType) {
            final GeneralInfoType copy = ((GeneralInfoType) draftCopy);
            {
                Boolean identifierShouldBeCopiedAndSet = strategy.shouldBeCopiedAndSet(locator, this.isSetIdentifier());
                if (identifierShouldBeCopiedAndSet == Boolean.TRUE) {
                    CompoundResourceIdentifierType sourceIdentifier;
                    sourceIdentifier = this.getIdentifier();
                    CompoundResourceIdentifierType copyIdentifier = ((CompoundResourceIdentifierType) strategy.copy(LocatorUtils.property(locator, "identifier", sourceIdentifier), sourceIdentifier, this.isSetIdentifier()));
                    copy.setIdentifier(copyIdentifier);
                } else {
                    if (identifierShouldBeCopiedAndSet == Boolean.FALSE) {
                        copy.identifier = null;
                    }
                }
            }
            {
                Boolean nameShouldBeCopiedAndSet = strategy.shouldBeCopiedAndSet(locator, this.isSetName());
                if (nameShouldBeCopiedAndSet == Boolean.TRUE) {
                    NameType sourceName;
                    sourceName = this.getName();
                    NameType copyName = ((NameType) strategy.copy(LocatorUtils.property(locator, "name", sourceName), sourceName, this.isSetName()));
                    copy.setName(copyName);
                } else {
                    if (nameShouldBeCopiedAndSet == Boolean.FALSE) {
                        copy.name = null;
                    }
                }
            }
            {
                Boolean descriptionShouldBeCopiedAndSet = strategy.shouldBeCopiedAndSet(locator, this.isSetDescription());
                if (descriptionShouldBeCopiedAndSet == Boolean.TRUE) {
                    DescriptionType sourceDescription;
                    sourceDescription = this.getDescription();
                    DescriptionType copyDescription = ((DescriptionType) strategy.copy(LocatorUtils.property(locator, "description", sourceDescription), sourceDescription, this.isSetDescription()));
                    copy.setDescription(copyDescription);
                } else {
                    if (descriptionShouldBeCopiedAndSet == Boolean.FALSE) {
                        copy.description = null;
                    }
                }
            }
            {
                Boolean pointOfContactShouldBeCopiedAndSet = strategy.shouldBeCopiedAndSet(locator, this.isSetPointOfContact());
                if (pointOfContactShouldBeCopiedAndSet == Boolean.TRUE) {
                    List<ContactInfoType> sourcePointOfContact;
                    sourcePointOfContact = (this.isSetPointOfContact()?this.getPointOfContact():null);
                    @SuppressWarnings("unchecked")
                    List<ContactInfoType> copyPointOfContact = ((List<ContactInfoType> ) strategy.copy(LocatorUtils.property(locator, "pointOfContact", sourcePointOfContact), sourcePointOfContact, this.isSetPointOfContact()));
                    copy.unsetPointOfContact();
                    if (copyPointOfContact!= null) {
                        List<ContactInfoType> uniquePointOfContactl = copy.getPointOfContact();
                        uniquePointOfContactl.addAll(copyPointOfContact);
                    }
                } else {
                    if (pointOfContactShouldBeCopiedAndSet == Boolean.FALSE) {
                        copy.unsetPointOfContact();
                    }
                }
            }
            {
                Boolean networkShouldBeCopiedAndSet = strategy.shouldBeCopiedAndSet(locator, this.isSetNetwork());
                if (networkShouldBeCopiedAndSet == Boolean.TRUE) {
                    List<String> sourceNetwork;
                    sourceNetwork = (this.isSetNetwork()?this.getNetwork():null);
                    @SuppressWarnings("unchecked")
                    List<String> copyNetwork = ((List<String> ) strategy.copy(LocatorUtils.property(locator, "network", sourceNetwork), sourceNetwork, this.isSetNetwork()));
                    copy.unsetNetwork();
                    if (copyNetwork!= null) {
                        List<String> uniqueNetworkl = copy.getNetwork();
                        uniqueNetworkl.addAll(copyNetwork);
                    }
                } else {
                    if (networkShouldBeCopiedAndSet == Boolean.FALSE) {
                        copy.unsetNetwork();
                    }
                }
            }
            {
                Boolean relatedResourceShouldBeCopiedAndSet = strategy.shouldBeCopiedAndSet(locator, this.isSetRelatedResource());
                if (relatedResourceShouldBeCopiedAndSet == Boolean.TRUE) {
                    List<RelatedResourcesType> sourceRelatedResource;
                    sourceRelatedResource = (this.isSetRelatedResource()?this.getRelatedResource():null);
                    @SuppressWarnings("unchecked")
                    List<RelatedResourcesType> copyRelatedResource = ((List<RelatedResourcesType> ) strategy.copy(LocatorUtils.property(locator, "relatedResource", sourceRelatedResource), sourceRelatedResource, this.isSetRelatedResource()));
                    copy.unsetRelatedResource();
                    if (copyRelatedResource!= null) {
                        List<RelatedResourcesType> uniqueRelatedResourcel = copy.getRelatedResource();
                        uniqueRelatedResourcel.addAll(copyRelatedResource);
                    }
                } else {
                    if (relatedResourceShouldBeCopiedAndSet == Boolean.FALSE) {
                        copy.unsetRelatedResource();
                    }
                }
            }
        }
        return draftCopy;
    }

    public Object createNewInstance() {
        return new GeneralInfoType();
    }

    public void mergeFrom(Object left, Object right) {
        final MergeStrategy2 strategy = JAXBMergeStrategy.INSTANCE;
        mergeFrom(null, null, left, right, strategy);
    }

    public void mergeFrom(ObjectLocator leftLocator, ObjectLocator rightLocator, Object left, Object right, MergeStrategy2 strategy) {
        if (right instanceof GeneralInfoType) {
            final GeneralInfoType target = this;
            final GeneralInfoType leftObject = ((GeneralInfoType) left);
            final GeneralInfoType rightObject = ((GeneralInfoType) right);
            {
                Boolean identifierShouldBeMergedAndSet = strategy.shouldBeMergedAndSet(leftLocator, rightLocator, leftObject.isSetIdentifier(), rightObject.isSetIdentifier());
                if (identifierShouldBeMergedAndSet == Boolean.TRUE) {
                    CompoundResourceIdentifierType lhsIdentifier;
                    lhsIdentifier = leftObject.getIdentifier();
                    CompoundResourceIdentifierType rhsIdentifier;
                    rhsIdentifier = rightObject.getIdentifier();
                    CompoundResourceIdentifierType mergedIdentifier = ((CompoundResourceIdentifierType) strategy.merge(LocatorUtils.property(leftLocator, "identifier", lhsIdentifier), LocatorUtils.property(rightLocator, "identifier", rhsIdentifier), lhsIdentifier, rhsIdentifier, leftObject.isSetIdentifier(), rightObject.isSetIdentifier()));
                    target.setIdentifier(mergedIdentifier);
                } else {
                    if (identifierShouldBeMergedAndSet == Boolean.FALSE) {
                        target.identifier = null;
                    }
                }
            }
            {
                Boolean nameShouldBeMergedAndSet = strategy.shouldBeMergedAndSet(leftLocator, rightLocator, leftObject.isSetName(), rightObject.isSetName());
                if (nameShouldBeMergedAndSet == Boolean.TRUE) {
                    NameType lhsName;
                    lhsName = leftObject.getName();
                    NameType rhsName;
                    rhsName = rightObject.getName();
                    NameType mergedName = ((NameType) strategy.merge(LocatorUtils.property(leftLocator, "name", lhsName), LocatorUtils.property(rightLocator, "name", rhsName), lhsName, rhsName, leftObject.isSetName(), rightObject.isSetName()));
                    target.setName(mergedName);
                } else {
                    if (nameShouldBeMergedAndSet == Boolean.FALSE) {
                        target.name = null;
                    }
                }
            }
            {
                Boolean descriptionShouldBeMergedAndSet = strategy.shouldBeMergedAndSet(leftLocator, rightLocator, leftObject.isSetDescription(), rightObject.isSetDescription());
                if (descriptionShouldBeMergedAndSet == Boolean.TRUE) {
                    DescriptionType lhsDescription;
                    lhsDescription = leftObject.getDescription();
                    DescriptionType rhsDescription;
                    rhsDescription = rightObject.getDescription();
                    DescriptionType mergedDescription = ((DescriptionType) strategy.merge(LocatorUtils.property(leftLocator, "description", lhsDescription), LocatorUtils.property(rightLocator, "description", rhsDescription), lhsDescription, rhsDescription, leftObject.isSetDescription(), rightObject.isSetDescription()));
                    target.setDescription(mergedDescription);
                } else {
                    if (descriptionShouldBeMergedAndSet == Boolean.FALSE) {
                        target.description = null;
                    }
                }
            }
            {
                Boolean pointOfContactShouldBeMergedAndSet = strategy.shouldBeMergedAndSet(leftLocator, rightLocator, leftObject.isSetPointOfContact(), rightObject.isSetPointOfContact());
                if (pointOfContactShouldBeMergedAndSet == Boolean.TRUE) {
                    List<ContactInfoType> lhsPointOfContact;
                    lhsPointOfContact = (leftObject.isSetPointOfContact()?leftObject.getPointOfContact():null);
                    List<ContactInfoType> rhsPointOfContact;
                    rhsPointOfContact = (rightObject.isSetPointOfContact()?rightObject.getPointOfContact():null);
                    List<ContactInfoType> mergedPointOfContact = ((List<ContactInfoType> ) strategy.merge(LocatorUtils.property(leftLocator, "pointOfContact", lhsPointOfContact), LocatorUtils.property(rightLocator, "pointOfContact", rhsPointOfContact), lhsPointOfContact, rhsPointOfContact, leftObject.isSetPointOfContact(), rightObject.isSetPointOfContact()));
                    target.unsetPointOfContact();
                    if (mergedPointOfContact!= null) {
                        List<ContactInfoType> uniquePointOfContactl = target.getPointOfContact();
                        uniquePointOfContactl.addAll(mergedPointOfContact);
                    }
                } else {
                    if (pointOfContactShouldBeMergedAndSet == Boolean.FALSE) {
                        target.unsetPointOfContact();
                    }
                }
            }
            {
                Boolean networkShouldBeMergedAndSet = strategy.shouldBeMergedAndSet(leftLocator, rightLocator, leftObject.isSetNetwork(), rightObject.isSetNetwork());
                if (networkShouldBeMergedAndSet == Boolean.TRUE) {
                    List<String> lhsNetwork;
                    lhsNetwork = (leftObject.isSetNetwork()?leftObject.getNetwork():null);
                    List<String> rhsNetwork;
                    rhsNetwork = (rightObject.isSetNetwork()?rightObject.getNetwork():null);
                    List<String> mergedNetwork = ((List<String> ) strategy.merge(LocatorUtils.property(leftLocator, "network", lhsNetwork), LocatorUtils.property(rightLocator, "network", rhsNetwork), lhsNetwork, rhsNetwork, leftObject.isSetNetwork(), rightObject.isSetNetwork()));
                    target.unsetNetwork();
                    if (mergedNetwork!= null) {
                        List<String> uniqueNetworkl = target.getNetwork();
                        uniqueNetworkl.addAll(mergedNetwork);
                    }
                } else {
                    if (networkShouldBeMergedAndSet == Boolean.FALSE) {
                        target.unsetNetwork();
                    }
                }
            }
            {
                Boolean relatedResourceShouldBeMergedAndSet = strategy.shouldBeMergedAndSet(leftLocator, rightLocator, leftObject.isSetRelatedResource(), rightObject.isSetRelatedResource());
                if (relatedResourceShouldBeMergedAndSet == Boolean.TRUE) {
                    List<RelatedResourcesType> lhsRelatedResource;
                    lhsRelatedResource = (leftObject.isSetRelatedResource()?leftObject.getRelatedResource():null);
                    List<RelatedResourcesType> rhsRelatedResource;
                    rhsRelatedResource = (rightObject.isSetRelatedResource()?rightObject.getRelatedResource():null);
                    List<RelatedResourcesType> mergedRelatedResource = ((List<RelatedResourcesType> ) strategy.merge(LocatorUtils.property(leftLocator, "relatedResource", lhsRelatedResource), LocatorUtils.property(rightLocator, "relatedResource", rhsRelatedResource), lhsRelatedResource, rhsRelatedResource, leftObject.isSetRelatedResource(), rightObject.isSetRelatedResource()));
                    target.unsetRelatedResource();
                    if (mergedRelatedResource!= null) {
                        List<RelatedResourcesType> uniqueRelatedResourcel = target.getRelatedResource();
                        uniqueRelatedResourcel.addAll(mergedRelatedResource);
                    }
                } else {
                    if (relatedResourceShouldBeMergedAndSet == Boolean.FALSE) {
                        target.unsetRelatedResource();
                    }
                }
            }
        }
    }

    public void setPointOfContact(List<ContactInfoType> value) {
        this.pointOfContact = null;
        if (value!= null) {
            List<ContactInfoType> draftl = this.getPointOfContact();
            draftl.addAll(value);
        }
    }

    public void setNetwork(List<String> value) {
        this.network = null;
        if (value!= null) {
            List<String> draftl = this.getNetwork();
            draftl.addAll(value);
        }
    }

    public void setRelatedResource(List<RelatedResourcesType> value) {
        this.relatedResource = null;
        if (value!= null) {
            List<RelatedResourcesType> draftl = this.getRelatedResource();
            draftl.addAll(value);
        }
    }

}
