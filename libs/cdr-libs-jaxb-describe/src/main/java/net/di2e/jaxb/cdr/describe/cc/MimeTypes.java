//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.11 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2016.08.03 at 06:09:57 PM EDT 
//


package net.di2e.jaxb.cdr.describe.cc;

import java.io.Serializable;
import java.util.ArrayList;
import java.util.List;
import javax.validation.Valid;
import javax.validation.constraints.NotNull;
import javax.validation.constraints.Size;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlRootElement;
import javax.xml.bind.annotation.XmlType;
import org.jvnet.jaxb2_commons.lang.CopyStrategy2;
import org.jvnet.jaxb2_commons.lang.CopyTo2;
import org.jvnet.jaxb2_commons.lang.Equals2;
import org.jvnet.jaxb2_commons.lang.EqualsStrategy2;
import org.jvnet.jaxb2_commons.lang.HashCode2;
import org.jvnet.jaxb2_commons.lang.HashCodeStrategy2;
import org.jvnet.jaxb2_commons.lang.JAXBCopyStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBEqualsStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBHashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBMergeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBToStringStrategy;
import org.jvnet.jaxb2_commons.lang.MergeFrom2;
import org.jvnet.jaxb2_commons.lang.MergeStrategy2;
import org.jvnet.jaxb2_commons.lang.ToString2;
import org.jvnet.jaxb2_commons.lang.ToStringStrategy2;
import org.jvnet.jaxb2_commons.locator.ObjectLocator;
import org.jvnet.jaxb2_commons.locator.util.LocatorUtils;


/**
 * <p>Java class for anonymous complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType&gt;
 *   &lt;complexContent&gt;
 *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
 *       &lt;sequence&gt;
 *         &lt;element name="mimeType" type="{urn:cdr-ex:describe:cc:1.0}MIMETypeType" maxOccurs="1000"/&gt;
 *       &lt;/sequence&gt;
 *     &lt;/restriction&gt;
 *   &lt;/complexContent&gt;
 * &lt;/complexType&gt;
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "", propOrder = {
    "mimeType"
})
@XmlRootElement(name = "mimeTypes")
public class MimeTypes implements Serializable, Cloneable, CopyTo2, Equals2, HashCode2, MergeFrom2, ToString2
{

    private final static long serialVersionUID = 1L;
    @XmlElement(required = true)
    @NotNull(message = "MimeTypes.mimeType {javax.validation.constraints.NotNull.message}")
    @Size(min = 1, max = 1000)
    @Valid
    protected List<MIMETypeType> mimeType;

    /**
     * Gets the value of the mimeType property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the mimeType property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getMimeType().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link MIMETypeType }
     * 
     * 
     */
    public List<MIMETypeType> getMimeType() {
        if (mimeType == null) {
            mimeType = new ArrayList<MIMETypeType>();
        }
        return this.mimeType;
    }

    public boolean isSetMimeType() {
        return ((this.mimeType!= null)&&(!this.mimeType.isEmpty()));
    }

    public void unsetMimeType() {
        this.mimeType = null;
    }

    public String toString() {
        final ToStringStrategy2 strategy = JAXBToStringStrategy.INSTANCE;
        final StringBuilder buffer = new StringBuilder();
        append(null, buffer, strategy);
        return buffer.toString();
    }

    public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy2 strategy) {
        strategy.appendStart(locator, this, buffer);
        appendFields(locator, buffer, strategy);
        strategy.appendEnd(locator, this, buffer);
        return buffer;
    }

    public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy2 strategy) {
        {
            List<MIMETypeType> theMimeType;
            theMimeType = (this.isSetMimeType()?this.getMimeType():null);
            strategy.appendField(locator, this, "mimeType", buffer, theMimeType, this.isSetMimeType());
        }
        return buffer;
    }

    public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy2 strategy) {
        if ((object == null)||(this.getClass()!= object.getClass())) {
            return false;
        }
        if (this == object) {
            return true;
        }
        final MimeTypes that = ((MimeTypes) object);
        {
            List<MIMETypeType> lhsMimeType;
            lhsMimeType = (this.isSetMimeType()?this.getMimeType():null);
            List<MIMETypeType> rhsMimeType;
            rhsMimeType = (that.isSetMimeType()?that.getMimeType():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "mimeType", lhsMimeType), LocatorUtils.property(thatLocator, "mimeType", rhsMimeType), lhsMimeType, rhsMimeType, this.isSetMimeType(), that.isSetMimeType())) {
                return false;
            }
        }
        return true;
    }

    public boolean equals(Object object) {
        final EqualsStrategy2 strategy = JAXBEqualsStrategy.INSTANCE;
        return equals(null, null, object, strategy);
    }

    public int hashCode(ObjectLocator locator, HashCodeStrategy2 strategy) {
        int currentHashCode = 1;
        {
            List<MIMETypeType> theMimeType;
            theMimeType = (this.isSetMimeType()?this.getMimeType():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "mimeType", theMimeType), currentHashCode, theMimeType, this.isSetMimeType());
        }
        return currentHashCode;
    }

    public int hashCode() {
        final HashCodeStrategy2 strategy = JAXBHashCodeStrategy.INSTANCE;
        return this.hashCode(null, strategy);
    }

    public Object clone() {
        return copyTo(createNewInstance());
    }

    public Object copyTo(Object target) {
        final CopyStrategy2 strategy = JAXBCopyStrategy.INSTANCE;
        return copyTo(null, target, strategy);
    }

    public Object copyTo(ObjectLocator locator, Object target, CopyStrategy2 strategy) {
        final Object draftCopy = ((target == null)?createNewInstance():target);
        if (draftCopy instanceof MimeTypes) {
            final MimeTypes copy = ((MimeTypes) draftCopy);
            {
                Boolean mimeTypeShouldBeCopiedAndSet = strategy.shouldBeCopiedAndSet(locator, this.isSetMimeType());
                if (mimeTypeShouldBeCopiedAndSet == Boolean.TRUE) {
                    List<MIMETypeType> sourceMimeType;
                    sourceMimeType = (this.isSetMimeType()?this.getMimeType():null);
                    @SuppressWarnings("unchecked")
                    List<MIMETypeType> copyMimeType = ((List<MIMETypeType> ) strategy.copy(LocatorUtils.property(locator, "mimeType", sourceMimeType), sourceMimeType, this.isSetMimeType()));
                    copy.unsetMimeType();
                    if (copyMimeType!= null) {
                        List<MIMETypeType> uniqueMimeTypel = copy.getMimeType();
                        uniqueMimeTypel.addAll(copyMimeType);
                    }
                } else {
                    if (mimeTypeShouldBeCopiedAndSet == Boolean.FALSE) {
                        copy.unsetMimeType();
                    }
                }
            }
        }
        return draftCopy;
    }

    public Object createNewInstance() {
        return new MimeTypes();
    }

    public void mergeFrom(Object left, Object right) {
        final MergeStrategy2 strategy = JAXBMergeStrategy.INSTANCE;
        mergeFrom(null, null, left, right, strategy);
    }

    public void mergeFrom(ObjectLocator leftLocator, ObjectLocator rightLocator, Object left, Object right, MergeStrategy2 strategy) {
        if (right instanceof MimeTypes) {
            final MimeTypes target = this;
            final MimeTypes leftObject = ((MimeTypes) left);
            final MimeTypes rightObject = ((MimeTypes) right);
            {
                Boolean mimeTypeShouldBeMergedAndSet = strategy.shouldBeMergedAndSet(leftLocator, rightLocator, leftObject.isSetMimeType(), rightObject.isSetMimeType());
                if (mimeTypeShouldBeMergedAndSet == Boolean.TRUE) {
                    List<MIMETypeType> lhsMimeType;
                    lhsMimeType = (leftObject.isSetMimeType()?leftObject.getMimeType():null);
                    List<MIMETypeType> rhsMimeType;
                    rhsMimeType = (rightObject.isSetMimeType()?rightObject.getMimeType():null);
                    List<MIMETypeType> mergedMimeType = ((List<MIMETypeType> ) strategy.merge(LocatorUtils.property(leftLocator, "mimeType", lhsMimeType), LocatorUtils.property(rightLocator, "mimeType", rhsMimeType), lhsMimeType, rhsMimeType, leftObject.isSetMimeType(), rightObject.isSetMimeType()));
                    target.unsetMimeType();
                    if (mergedMimeType!= null) {
                        List<MIMETypeType> uniqueMimeTypel = target.getMimeType();
                        uniqueMimeTypel.addAll(mergedMimeType);
                    }
                } else {
                    if (mimeTypeShouldBeMergedAndSet == Boolean.FALSE) {
                        target.unsetMimeType();
                    }
                }
            }
        }
    }

    public void setMimeType(List<MIMETypeType> value) {
        this.mimeType = null;
        if (value!= null) {
            List<MIMETypeType> draftl = this.getMimeType();
            draftl.addAll(value);
        }
    }

}
