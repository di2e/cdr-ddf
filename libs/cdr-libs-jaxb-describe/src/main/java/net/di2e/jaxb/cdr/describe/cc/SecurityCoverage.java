//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.11 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2016.08.03 at 12:07:39 AM EDT 
//


package net.di2e.jaxb.cdr.describe.cc;

import java.io.Serializable;
import java.util.ArrayList;
import java.util.List;
import javax.validation.Valid;
import javax.validation.constraints.NotNull;
import javax.validation.constraints.Size;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlRootElement;
import javax.xml.bind.annotation.XmlType;
import org.jvnet.jaxb2_commons.lang.CopyStrategy2;
import org.jvnet.jaxb2_commons.lang.CopyTo2;
import org.jvnet.jaxb2_commons.lang.Equals2;
import org.jvnet.jaxb2_commons.lang.EqualsStrategy2;
import org.jvnet.jaxb2_commons.lang.HashCode2;
import org.jvnet.jaxb2_commons.lang.HashCodeStrategy2;
import org.jvnet.jaxb2_commons.lang.JAXBCopyStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBEqualsStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBHashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBMergeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBToStringStrategy;
import org.jvnet.jaxb2_commons.lang.MergeFrom2;
import org.jvnet.jaxb2_commons.lang.MergeStrategy2;
import org.jvnet.jaxb2_commons.lang.ToString2;
import org.jvnet.jaxb2_commons.lang.ToStringStrategy2;
import org.jvnet.jaxb2_commons.locator.ObjectLocator;
import org.jvnet.jaxb2_commons.locator.util.LocatorUtils;


/**
 * <p>Java class for anonymous complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType&gt;
 *   &lt;complexContent&gt;
 *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
 *       &lt;sequence&gt;
 *         &lt;element name="securityMarkings" type="{urn:cdr-ex:describe:cc:1.0}SecurityType" maxOccurs="1000"/&gt;
 *       &lt;/sequence&gt;
 *     &lt;/restriction&gt;
 *   &lt;/complexContent&gt;
 * &lt;/complexType&gt;
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "", propOrder = {
    "securityMarkings"
})
@XmlRootElement(name = "securityCoverage")
public class SecurityCoverage implements Serializable, Cloneable, CopyTo2, Equals2, HashCode2, MergeFrom2, ToString2
{

    private final static long serialVersionUID = 1L;
    @XmlElement(required = true)
    @NotNull(message = "SecurityCoverage.securityMarkings {javax.validation.constraints.NotNull.message}")
    @Size(min = 1, max = 1000)
    @Valid
    protected List<SecurityType> securityMarkings;

    /**
     * Gets the value of the security property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the security property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getSecurity().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link SecurityType }
     * 
     * 
     */
    public List<SecurityType> getSecurityMarkings() {
        if (securityMarkings == null) {
            securityMarkings = new ArrayList<SecurityType>();
        }
        return this.securityMarkings;
    }

    public boolean isSetSecurityMarkings() {
        return ((this.securityMarkings!= null)&&(!this.securityMarkings.isEmpty()));
    }

    public void unsetSecurityMarkings() {
        this.securityMarkings = null;
    }

    public String toString() {
        final ToStringStrategy2 strategy = JAXBToStringStrategy.INSTANCE;
        final StringBuilder buffer = new StringBuilder();
        append(null, buffer, strategy);
        return buffer.toString();
    }

    public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy2 strategy) {
        strategy.appendStart(locator, this, buffer);
        appendFields(locator, buffer, strategy);
        strategy.appendEnd(locator, this, buffer);
        return buffer;
    }

    public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy2 strategy) {
        {
            List<SecurityType> theSecurity;
            theSecurity = (this.isSetSecurityMarkings()?this.getSecurityMarkings():null);
            strategy.appendField(locator, this, "securityMarkings", buffer, theSecurity, this.isSetSecurityMarkings());
        }
        return buffer;
    }

    public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy2 strategy) {
        if ((object == null)||(this.getClass()!= object.getClass())) {
            return false;
        }
        if (this == object) {
            return true;
        }
        final SecurityCoverage that = ((SecurityCoverage) object);
        {
            List<SecurityType> lhsSecurity;
            lhsSecurity = (this.isSetSecurityMarkings()?this.getSecurityMarkings():null);
            List<SecurityType> rhsSecurity;
            rhsSecurity = (that.isSetSecurityMarkings()?that.getSecurityMarkings():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "securityMarkings", lhsSecurity), LocatorUtils.property(thatLocator, "securityMarkings", rhsSecurity), lhsSecurity, rhsSecurity, this.isSetSecurityMarkings(), that.isSetSecurityMarkings())) {
                return false;
            }
        }
        return true;
    }

    public boolean equals(Object object) {
        final EqualsStrategy2 strategy = JAXBEqualsStrategy.INSTANCE;
        return equals(null, null, object, strategy);
    }

    public int hashCode(ObjectLocator locator, HashCodeStrategy2 strategy) {
        int currentHashCode = 1;
        {
            List<SecurityType> theSecurity;
            theSecurity = (this.isSetSecurityMarkings()?this.getSecurityMarkings():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "securityMarkings", theSecurity), currentHashCode, theSecurity, this.isSetSecurityMarkings());
        }
        return currentHashCode;
    }

    public int hashCode() {
        final HashCodeStrategy2 strategy = JAXBHashCodeStrategy.INSTANCE;
        return this.hashCode(null, strategy);
    }

    public Object clone() {
        return copyTo(createNewInstance());
    }

    public Object copyTo(Object target) {
        final CopyStrategy2 strategy = JAXBCopyStrategy.INSTANCE;
        return copyTo(null, target, strategy);
    }

    public Object copyTo(ObjectLocator locator, Object target, CopyStrategy2 strategy) {
        final Object draftCopy = ((target == null)?createNewInstance():target);
        if (draftCopy instanceof SecurityCoverage) {
            final SecurityCoverage copy = ((SecurityCoverage) draftCopy);
            {
                Boolean securityShouldBeCopiedAndSet = strategy.shouldBeCopiedAndSet(locator, this.isSetSecurityMarkings());
                if (securityShouldBeCopiedAndSet == Boolean.TRUE) {
                    List<SecurityType> sourceSecurity;
                    sourceSecurity = (this.isSetSecurityMarkings()?this.getSecurityMarkings():null);
                    @SuppressWarnings("unchecked")
                    List<SecurityType> copySecurity = ((List<SecurityType> ) strategy.copy(LocatorUtils.property(locator, "securityMarkings", sourceSecurity), sourceSecurity, this.isSetSecurityMarkings()));
                    copy.unsetSecurityMarkings();
                    if (copySecurity!= null) {
                        List<SecurityType> uniqueSecurityl = copy.getSecurityMarkings();
                        uniqueSecurityl.addAll(copySecurity);
                    }
                } else {
                    if (securityShouldBeCopiedAndSet == Boolean.FALSE) {
                        copy.unsetSecurityMarkings();
                    }
                }
            }
        }
        return draftCopy;
    }

    public Object createNewInstance() {
        return new SecurityCoverage();
    }

    public void mergeFrom(Object left, Object right) {
        final MergeStrategy2 strategy = JAXBMergeStrategy.INSTANCE;
        mergeFrom(null, null, left, right, strategy);
    }

    public void mergeFrom(ObjectLocator leftLocator, ObjectLocator rightLocator, Object left, Object right, MergeStrategy2 strategy) {
        if (right instanceof SecurityCoverage) {
            final SecurityCoverage target = this;
            final SecurityCoverage leftObject = ((SecurityCoverage) left);
            final SecurityCoverage rightObject = ((SecurityCoverage) right);
            {
                Boolean securityShouldBeMergedAndSet = strategy.shouldBeMergedAndSet(leftLocator, rightLocator, leftObject.isSetSecurityMarkings(), rightObject.isSetSecurityMarkings());
                if (securityShouldBeMergedAndSet == Boolean.TRUE) {
                    List<SecurityType> lhsSecurity;
                    lhsSecurity = (leftObject.isSetSecurityMarkings()?leftObject.getSecurityMarkings():null);
                    List<SecurityType> rhsSecurity;
                    rhsSecurity = (rightObject.isSetSecurityMarkings()?rightObject.getSecurityMarkings():null);
                    List<SecurityType> mergedSecurity = ((List<SecurityType> ) strategy.merge(LocatorUtils.property(leftLocator, "securityMarkings", lhsSecurity), LocatorUtils.property(rightLocator, "securityMarkings", rhsSecurity), lhsSecurity, rhsSecurity, leftObject.isSetSecurityMarkings(), rightObject.isSetSecurityMarkings()));
                    target.unsetSecurityMarkings();
                    if (mergedSecurity!= null) {
                        List<SecurityType> uniqueSecurityl = target.getSecurityMarkings();
                        uniqueSecurityl.addAll(mergedSecurity);
                    }
                } else {
                    if (securityShouldBeMergedAndSet == Boolean.FALSE) {
                        target.unsetSecurityMarkings();
                    }
                }
            }
        }
    }

    public void setSecurityMarkings(List<SecurityType> value) {
        this.securityMarkings = null;
        if (value!= null) {
            List<SecurityType> draftl = this.getSecurityMarkings();
            draftl.addAll(value);
        }
    }

}
